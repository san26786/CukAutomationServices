using Blackbaud.AppFx.WebAPI;
using Blackbaud.AppFx.WebAPI.ServiceProxy;
using Blackbaud.AppFx.XmlTypes.DataForms;
using Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent;
using Blackbaud.AppFx.Constituent.Catalog.WebApiClient.EditForms.Constituent;
using Blackbaud.AppFx.Constituent.Catalog.WebApiClient.EditForms.ConstituentFinancialAccount;
using Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue;
using Blackbaud.AppFx.GiftAid.Catalog.WebApiClient.DataLists.Constituent;
using Blackbaud.AppFx.Platform.Catalog.WebApiClient.AddForms.Batch;
using Blackbaud.AppFx.Platform.Catalog.WebApiClient.SearchLists.Batch;
using Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.AddForms.SponsorshipOpportunityChild;
using Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.SponsorshipOpportunity;
using Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.SearchLists.SponsorshipLocation;
using Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue;
using log4net;
using MySql.Data.MySqlClient;
using RestSharp;
using RestSharp.Authenticators;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.ServiceModel;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Services.Protocols;
using CukAutomationOperations.RightNowServices;
using System.Web.Script.Serialization;
using CukAutomationOperations.Model.AutomationBot;
using CukAutomationOperations.Model;
using Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship;
using CsvHelper;
using System.Diagnostics;
using System.Net.Mail;
using System.Data.SqlClient;
using System.Threading;
using Blackbaud.AppFx;
using Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.DataLists.Revenue;
using Polly;
using Newtonsoft.Json.Linq;
using Blackbaud.AppFx.GiftAid.Catalog.WebApiClient.AddForms.GiftAid;
using System.Configuration;
using Newtonsoft.Json;

namespace CukAutomationOperations
{
    public class CukAutomationOperation
    {
        protected static readonly ILog appLogger = LogManager.GetLogger(typeof(CukAutomationOperation));
        APIAccessRequestHeader api = new APIAccessRequestHeader();
        private RightNowSyncPortClient rightNowSyncPortClient = new RightNowSyncPortClient();
        private static readonly System.Collections.Specialized.NameValueCollection settings = ConfigurationManager.AppSettings;
        private string MyConnectionString = ConfigurationManager.ConnectionStrings["WebSiteDbConnectionString"].ConnectionString;
        private string Mytcpt_pptdbConnectionString = ConfigurationManager.ConnectionStrings["TCPT_PPTDB_ConnectionString"].ConnectionString;
        private string mycuk_tcpt4ConnectionString = ConfigurationManager.ConnectionStrings["TCPTR4DB_ConnectionString"].ConnectionString;
        private string Mytcpt_pptdbConnectionString_cs = ConfigurationManager.ConnectionStrings["ONEVIEW_CELSPPT_ConnectionString"].ConnectionString;
        


        string access_token = "";
        string token_type = "";
        string api_key = "";

        Policy retryPolicy = Policy
                      .Handle<Exception>(ex => ex.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                      .Retry(3, onRetry: (exception, retryCounter) =>
                      {
                          // Add logic to be executed before each retry, such as logging
                          appLogger.Info("Retrying...");
                      });

        private static DBModel dbObj;
        private Message DraftTileObj;
        private readonly System.Object lockThis = new System.Object();
        private string DDPaymentChecks = null;
        
        #region Global Instance
        private Blackbaud.AppFx.WebAPI.ServiceProxy.AppFxWebService _service;
        private string BbDatabase = string.Empty;
        private string Host = settings["ENV_HOST_URL"];
        private string Host_Website_Url = settings["WEBSITE_URL"];
        private string ApplicationName = System.Reflection.Assembly.GetCallingAssembly().FullName;
        #endregion

        #region Dictionary Container

        Dictionary<string, long> SetupStatusDictionary = JsonConvert.DeserializeObject<Dictionary<string, long>>(settings["RN_SETUP_STATUS_DICTIONARY"].Replace("\\r\\n", "\r\n").Replace("\\\"", "\""));

        Dictionary<string, string> FundsDesignation = JsonConvert.DeserializeObject<Dictionary<string, string>>(settings["BB_FUND_DESIGNATION_DICTIONARY"].Replace("\\r\\n", "\r\n").Replace("\\\"", "\""));

        Dictionary<string, string> CancelRGReasonDictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(settings["BB_CANCEL_RG_REASON_DICTIONARY"].Replace("\\r\\n", "\r\n").Replace("\\\"", "\""));

        #endregion

        public CukAutomationOperation()
        {
            try
            {
                DraftTileObj = new Message();

                rightNowSyncPortClient = new RightNowSyncPortClient();
                rightNowSyncPortClient.ClientCredentials.UserName.UserName = settings["RN_USER_ID"];
                rightNowSyncPortClient.ClientCredentials.UserName.Password = settings["RN_USER_PWD"];

                log4net.Config.XmlConfigurator.Configure();
                api_key = settings["GMC_API_KEY"];

                _service = new Blackbaud.AppFx.WebAPI.ServiceProxy.AppFxWebService();
                _service.Url = settings["BB_URI"];
                _service.Credentials = new System.Net.NetworkCredential(settings["BB_UID"], settings["BB_PWD"], "");
                var req = new Blackbaud.AppFx.WebAPI.ServiceProxy.GetAvailableREDatabasesRequest();
                req.ClientAppInfo = GetRequestHeader();
                var reply = retryPolicy.Execute(() => _service.GetAvailableREDatabases(req));
                BbDatabase = reply.Databases[0];
            }   
            catch (Exception e)
            {
                appLogger.Error("Error in constructor CukAutomationOperation:" + e.Message);
            }
        }
        public void getAuthToken()
        {
            string content = null;
            try
            {
                var restClient = new RestClient(settings["GMC_TOKEN_URL"]);

                restClient.Authenticator = new HttpBasicAuthenticator(settings["GMC_CLIENT_ID"], settings["GMC_SECRET"]);

                var tokenRequest = new RestRequest(Method.POST);

                tokenRequest.AddHeader("Content-Type", "application/x-www-form-urlencoded");

                tokenRequest.AddParameter("grant_type", "client_credentials");
                //tokenRequest.AddParameter("scope", "read write");

                IRestResponse tokenResponse = restClient.Execute(tokenRequest);
                content = tokenResponse.Content; // raw content as string

                TokenResponseContent tokenResponseContent = SimpleJson.DeserializeObject<TokenResponseContent>(content);
                //appLogger.Info(tokenResponseContent);
                access_token = tokenResponseContent.access_token;
                token_type = tokenResponseContent.token_type;
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Console.WriteLine(e.InnerException);
                Console.WriteLine(e.StackTrace);
                appLogger.Error(e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                if (content != null)
                {
                    // Console.WriteLine("Response content : " + content);
                    appLogger.Error("Response content : " + content);
                }
            }
        }

        #region Helper Method

        public long fetchNeedIdByGlobalId(string globalId)
        {
            long needRNID = 0;
            ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
            clientInfoHeader.AppID = "Updating NEED record in RN";
            String queryString = "Select SCBS_CHILD.NEED from SCBS_CHILD.NEED N where N.Beneficiary_GlobalID = '" + globalId + "' ";
            GenericObject genericObject = new GenericObject();
            RNObjectType objType = new RNObjectType();
            objType.TypeName = "NEED";
            objType.Namespace = "SCBS_CHILD";
            genericObject.ObjectType = objType;

            RNObject[] objectTemplates = new RNObject[] { genericObject };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

            QueryResultData[] queryObjects;
            head = rightNowSyncPortClient.QueryObjects(clientInfoHeader, api, queryString, objectTemplates, 1000000, out queryObjects);

            RNObject[] rnObject = queryObjects[0].RNObjectsResult;
            if (rnObject.Length > 0)
            {
                needRNID = rnObject[0].ID.id;
            }
            return needRNID;
        }

        private Guid? GetsponsorLocationID(string name)
        {
            SponsorshipLocationSearchFilterData filter = new SponsorshipLocationSearchFilterData();
            // filter.LOOKUPID = lookupid;
            filter.NAME = name;
            //filter.NAME = name;
            string[] str = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.SearchLists.SponsorshipLocation.SponsorshipLocationSearch.GetIDs(provider(), filter);
            return new Guid(str[0]);
        }

        private Guid? GetSponsorSearchlist()
        {  /// Child Support
            var req = new Blackbaud.AppFx.WebAPI.ServiceProxy.DataListLoadRequest();
            req.ClientAppInfo = GetRequestHeader();
            req.DataListID = new Guid("45ed8299-96a4-4aa0-8ad0-249b2363e55f");
            req.IncludeMetaData = true;
            var reply = _service.DataListLoad(req);
            return new Guid(reply.Rows[0].Values[0]);
        }

        public string GetChildLookupID(string contextrecordid)
        {
            var searchreq = new SearchListLoadRequest();


            searchreq.ClientAppInfo = GetRequestHeader();
            searchreq.SearchListID = new Guid("ab076868-114a-4696-afe9-8d590677708c");
            searchreq.ReturnSearchFilters = true;
            searchreq.MaxRecords = 500;

            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("SPONSORSHIPOPPORTUNITYID", contextrecordid);
            var dfi = new DataFormItem();
            dfi.Values = fvSet;

            searchreq.Filter = dfi;
            return _service.SearchListLoad(searchreq).Output.Rows[0].Values[2];

        }

        private Blackbaud.AppFx.WebAPI.ServiceProxy.ClientAppInfoHeader GetRequestHeader()
        {
            var header = new Blackbaud.AppFx.WebAPI.ServiceProxy.ClientAppInfoHeader();
            header.ClientAppName =
            header.REDatabaseToUse = BbDatabase;
            return header;
        }

        private AppFxWebServiceProvider provider()
        {
            BBTargetRepository.Model.Constant obj = new BBTargetRepository.Model.Constant();
            var iprovide = new AppFxWebServiceProvider();
            iprovide.ApplicationName = ApplicationName;
            iprovide.Credentials = new System.Net.NetworkCredential(obj.UID, obj.PWD, "");
            iprovide.Database = BbDatabase;
            iprovide.Url = obj.URI;
            return iprovide;
        }


        #endregion

        #region  GLOBAL METHOD --> fetch datavalue of specified generic field

        private static string fetchchilddata(GenericField fetchchildfields)
        {
            string value = "";
            if (fetchchildfields.DataValue != null)
            {
                foreach (object field1 in fetchchildfields.DataValue.Items)
                {

                    if (fetchchildfields.dataType.ToString().Equals("NAMED_ID"))
                    {
                        GenericField testField = (GenericField)fetchchildfields;
                        NamedID NamedIdVal = (NamedID)field1;
                        value = NamedIdVal.ID.id.ToString();
                    }
                    else
                    {
                        DataValue sponserdata = fetchchildfields.DataValue;
                        foreach (object spoerdvvalue in sponserdata.Items)
                        {
                            if (spoerdvvalue != null)
                            {
                                value = spoerdvvalue.ToString();
                            }
                        }
                    }
                }
            }
            else
            {
                value = "Null data";
            }
            return value;
        }

        private static int intgenericdatavalue(GenericField fetchchildfields)
        {
            int value = 0;
            if (fetchchildfields.DataValue != null)
            {
                foreach (object field1 in fetchchildfields.DataValue.Items)
                {

                    if (fetchchildfields.dataType.ToString().Equals("NAMED_ID"))
                    {
                        GenericField testField = (GenericField)fetchchildfields;
                        NamedID NamedIdVal = (NamedID)field1;
                        value = (Int32)NamedIdVal.ID.id;
                    }
                    else
                    {
                        DataValue sponserdata = fetchchildfields.DataValue;
                        foreach (object spoerdvvalue in sponserdata.Items)
                        {
                            if (spoerdvvalue != null)
                            {
                                value = (int)spoerdvvalue;
                            }
                        }
                    }
                }
            }
            else
            {
                value = 0;
            }
            return value;
        }

        private static DateTime datetimegenericdatavalue(GenericField fetchchildfields)
        {
            DateTime value = DateTime.Now;
            if (fetchchildfields.DataValue != null)
            {
                foreach (object field1 in fetchchildfields.DataValue.Items)
                {
                    DataValue sponserdata = fetchchildfields.DataValue;
                    foreach (object spoerdvvalue in sponserdata.Items)
                    {
                        if (spoerdvvalue != null)
                        {
                            value = (DateTime)spoerdvvalue;
                        }
                    }
                }
            }
            else
            {
                value = DateTime.Now;
            }
            return value;
        }

        #endregion

        #region 9 Private Method
        //Method to assign Data memeber for Generic Fields
        private GenericField createGenericfield(String name, DataValue dataValue, DataTypeEnum type)
        {
            GenericField genericField = new GenericField();

            genericField.dataType = type;
            genericField.dataTypeSpecified = true;
            genericField.name = name;
            genericField.DataValue = dataValue;

            return genericField;
        }

        private DataValue createNamedIdDataValue(NamedID namedID)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { namedID };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.NamedIDValue };

            return dv;
        }

        private DataValue createStringdataValue(String val)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.StringValue };

            return dv;
        }

        private DataValue createIntegerdataValue(int val)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.IntegerValue };

            return dv;
        }

        private static DataValue GetIntegerDataValue(int val)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.IntegerValue };

            return dv;
        }

        //Method to get data value for boolean datatype
        private DataValue createbooleandataValue(Boolean val)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.BooleanValue };

            return dv;
        }

        private DataValue createBinaryDataValue(bool val)
        {
            DataValue dv = new DataValue();

            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.BooleanValue };

            return dv;
        }

        private DataValue createdatedataValue(DateTime val)
        {

            DataValue dv = new DataValue();
            try
            {
                dv.Items = new Object[] { val };
                dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.DateValue };

            }
            catch (Exception e)
            {
                appLogger.Error("Exception in createdatedataValue Function " + e.Message);
            }
            return dv;
        }

        //Method to get data value for datetime datatype
        private DataValue createdatetimedataValue(DateTime val)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.DateTimeValue };

            return dv;
        }

        //Method to get data value for NamedID datatype
        private DataValue createNamedIdDataValue(long idVal)
        {
            ID id = new ID();
            id.id = idVal;
            id.idSpecified = true;

            NamedID namedID = new NamedID();
            namedID.ID = id;

            DataValue dv = new DataValue();
            dv.Items = new Object[] { namedID };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.NamedIDValue };

            return dv;
        }

        //Method to get data value for Byte datatype
        private GenericObject createbytedata(byte[] filedata, string pathextension)
        {
            List<RNObject> createObjects = new List<RNObject>();
            GenericObject go = new GenericObject();
            RNObjectType objType = new RNObjectType();
            objType.Namespace = "SupLetter";
            objType.TypeName = "SCBS_WEB";
            go.ObjectType = objType;

            List<GenericField> gfs = new List<GenericField>();

            gfs.Add(new GenericField()
            {
                name = "FileAttachments",
                DataValue = new DataValue()
                {
                    ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.ObjectValueList },
                    Items = new GenericObject[]
        {
            new GenericObject()
            {
                ObjectType = new RNObjectType() { TypeName = "FileAttachment" },
                GenericFields = new GenericField[]
                {
                    // add "ContentType"
                    new GenericField()
                    {
                        name = "ContentType",
                        DataValue = new DataValue()
                        {
                            ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.StringValue },
                            Items = new object[] { "text/"+pathextension+"" }
                        }
                    },
                    // add "FileName"
                    new GenericField()
                    {
                        name = "FileName",
                        DataValue = new DataValue()
                        {
                            ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.StringValue },
                            Items = new object[] { "Message"+pathextension+""}
                        }
                    },
                    // add "ContentType"

                    new GenericField()
                    {
                        name = "Data",
                        DataValue = new DataValue()
                        {

                            ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.Base64BinaryValue },
                            Items = new object[] { filedata }
                        }
                    }
                }
            }
        }
                }
            });
            go.GenericFields = gfs.ToArray();
            createObjects.Add(go);

            return go;

        }

        //Method to get data value for int datatype
        private DataValue createsendgiftintdataValue(int val)
        {
            DataValue dv = new DataValue();
            dv.Items = new Object[] { val };
            dv.ItemsElementName = new ItemsChoiceType[] { ItemsChoiceType.IntegerValue };

            return dv;
        }

        private DataValue createDataValue(Object[] objects, ItemsChoiceType type)
        {
            DataValue dv = new DataValue();
            dv.Items = objects;
            dv.ItemsElementName = new ItemsChoiceType[] { type };
            return dv;
        }

        private GenericField createGenericField(String name, DataValue dataValue, DataTypeEnum type)
        {
            GenericField genericField = new GenericField();

            genericField.dataType = type;
            genericField.dataTypeSpecified = true;
            genericField.name = name;
            genericField.DataValue = dataValue;

            return genericField;
        }

        #endregion

        #region Send Data to MainWebService7
        public void SendDataToMainWS<T>(T obj, int action)
        {
            string jsonpayload = (new JavaScriptSerializer()).Serialize(obj);
            MainWebService7.MainServicesClient client = new MainWebService7.MainServicesClient();
            client.IAmOneWayMessagingPattern(jsonpayload, action);
        }
        internal void SendDataToMainWS<T>(T obj)
        {
            string jsonpayload = (new JavaScriptSerializer()).Serialize(obj);
            MainWebService7.MainServicesClient proxy = new MainWebService7.MainServicesClient();
            int action = 1003;
            proxy.IAmOneWayMessagingPattern(jsonpayload, action);
        }
        #endregion

        #region BB search Methods
        private SearchListLoadReply GetChildsearchOnLookupID(string searchme)
        {

            var searchreq = new SearchListLoadRequest();

            searchreq.ClientAppInfo = GetRequestHeader();
            searchreq.SearchListID = new Guid("ab076868-114a-4696-afe9-8d590677708c");
            searchreq.ReturnSearchFilters = true;
            searchreq.MaxRecords = 500;

            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("LOOKUPID", searchme);

            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            searchreq.Filter = dfi;
            return _service.SearchListLoad(searchreq);
        }
        #endregion

        public void AddChildIfNotExistInBB(string Needkey)
        {
            SearchListLoadReply childSearchList = GetChildsearchOnLookupID(Needkey);
            string content = null;
            string GenderCode = null;
            string BirthDate = null;
            ChildDataModel cobj = new ChildDataModel();
            string URL = "select AbbreviatedName,Name,Gender,BirthDate,Beneficiary_GlobalID from SCBS_CHILD.Need where SCBS_CHILD.Need.NeedKey = '" + Needkey + "';";
            if (childSearchList.Output.RowCount == 0)
            {
                try
                {
                    var restClient = new RestClient("https://my.compassionuk.org/services/rest/connect/v1.4/queryResults/?query=" + URL); // live
                    var tokenRequest = new RestRequest(Method.GET);

                    tokenRequest.AddHeader("OSvC-CREST-Application-Context", "This is a valid request for account.");
                    tokenRequest.AddHeader("Authorization", "Basic R0NfMjpHMzNjb24wNDA0");
                    IRestResponse tokenResponse = restClient.Execute(tokenRequest);

                    content = tokenResponse.Content; // raw content as string
                    Rootobject tokenResponseContent = SimpleJson.DeserializeObject<Rootobject>(content);

                    if (tokenResponseContent.items.Count() > 0)
                    {
                        cobj.childPersonalName = tokenResponseContent.items[0].rows[0][0].ToString();
                        cobj.PreferredName = tokenResponseContent.items[0].rows[0][0].ToString();
                        cobj.childName = tokenResponseContent.items[0].rows[0][1].ToString();
                        GenderCode = tokenResponseContent.items[0].rows[0][2].ToString();
                        if (GenderCode == "1")
                        {
                            cobj.gender = "";
                        }
                        else if (GenderCode == "2")
                        {
                            cobj.gender = "M";
                        }
                        else if (GenderCode == "3")
                        {
                            cobj.gender = "F";
                        }
                        DateTime now = DateTime.Now;
                        DateTime myDate = DateTime.Parse(tokenResponseContent.items[0].rows[0][3].ToString());
                        int childAge = (int)Math.Floor((DateTime.Now - myDate).TotalDays / 365.25D);
                        cobj.ChildBirthDate = myDate.ToString("yyyy-MM-dd");
                        cobj.childGlobalId = tokenResponseContent.items[0].rows[0][4].ToString();
                        cobj.childKey = Needkey;
                        cobj.actionid = 129;
                        SendDataToMainWS(cobj);
                    }

                }
                catch (Exception e)
                {
                    appLogger.Info("Error While Adding Child in Blackbaud");
                    appLogger.Error(e.Message);
                    appLogger.Error(e.InnerException);
                    appLogger.Error(e.StackTrace);
                    if (content != null)
                    {
                        appLogger.Error("Response content : " + content);
                    }
                }
            }else
            {
                appLogger.Info("No child found with needkey :"+ Needkey);
            }
        }

        public void DoWork()
        {
           
        }
        
        public string GetDailySchedulerLastSuccessfullRunTime(string ProcessName)
        {
            appLogger.Info("GetDailySchedulerLastSuccessfullRunTime for Process : " + ProcessName + " Process Started...");
            string LastSuccessfulRunTime = "";
            ProcessScheduleManager obj = new ProcessScheduleManager();
            MySql.Data.MySqlClient.MySqlConnection conn = new MySql.Data.MySqlClient.MySqlConnection();
            try
            {
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                string Query = "SELECT LastSuccessfulRunTime FROM `DailyScheduler` where MethodName='" + ProcessName + "'";
                MySqlCommand MyCommand2 = new MySqlCommand(Query, conn);
                MySqlDataReader MyReader2;
                MyReader2 = MyCommand2.ExecuteReader();
                if (MyReader2.Read())
                {
                    LastSuccessfulRunTime = MyReader2["LastSuccessfulRunTime"] != null ? Convert.ToDateTime(MyReader2["LastSuccessfulRunTime"]).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'") : "";
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching GetDailySchedulerLastSuccessfullRunTime from DB :" + e.Message);
                appLogger.Error(e.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("GetDailySchedulerLastSuccessfullRunTime for Process : " + ProcessName + " Process Ended...");
            return LastSuccessfulRunTime;
        }

        #region DX89 – Automate Applications - Checkbot
        public ProcessScheduleManager fetchLastSuccessfullRunTime(string ProcessName)
        {
            appLogger.Info("Fetch LastSuccessfulRunTime Process Started...");

            ProcessScheduleManager obj = new ProcessScheduleManager();
            MySql.Data.MySqlClient.MySqlConnection conn = new MySql.Data.MySqlClient.MySqlConnection();
            try
            {
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                string Query = "SELECT * FROM ProcessScheduleManager WHERE ProcessName='" + ProcessName + "' AND Status='ON'";
                MySqlCommand MyCommand2 = new MySqlCommand(Query, conn);
                MySqlDataReader MyReader2;
                MyReader2 = MyCommand2.ExecuteReader();
                while (MyReader2.Read())
                {
                    obj.ID = MyReader2["ID"] != null ? MyReader2["ID"].ToString() : "";
                    obj.ProcessName = MyReader2["ProcessName"] != null ? MyReader2["ProcessName"].ToString() : "";
                    obj.LastSuccessfulRunTime = MyReader2["LastSuccessfulRunTime"] != null ? MyReader2["LastSuccessfulRunTime"].ToString() : "";
                }
                conn.Close();

            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching LastSuccessfulRunTime from DB :" + e.Message);
                appLogger.Error(e.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return obj;
        }
        public ConstituentPaymentDetails GetPaymentDetailsFromSponsorshipId(string BBSponsorshipId, long incidentId)
        {
            ConstituentPaymentDetails paymentDetails = null;
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("b6ec61d8-b9b8-493a-8fd4-8ac40c548d22");//Data List: 2nd sponsorship bank details

                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SPONSORSHIPSCOMMITMENTID", BBSponsorshipId);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                if (result.TotalRowsInReply > 0)
                {
                    foreach (DataListResultRow row in result.Rows)
                    {
                        paymentDetails = new ConstituentPaymentDetails();
                        paymentDetails.SponsorshipId = row.Values[0];
                        paymentDetails.RevenueId = row.Values[1];
                        paymentDetails.DirectDebitReferenceNumber = row.Values[2];
                        paymentDetails.AccountNo = row.Values[3];
                        paymentDetails.SortCode = row.Values[4];
                        paymentDetails.NameOnAccount = row.Values[5];
                        paymentDetails.AccountStatus = row.Values[6];
                        paymentDetails.PaymentMethod = row.Values[7];
                        if (!string.IsNullOrEmpty(row.Values[8]))
                        {
                            paymentDetails.NextInstallmentsDate = Convert.ToDateTime(row.Values[8]);
                        }
                        paymentDetails.InstallmentFrequency = row.Values[9];
                    }
                }
            }
            catch (Exception e)
            {
                UpdateSponsorshipAppThread(null, incidentId, "Payment details not retrieved due to technical failure");
                DDPaymentChecks = "Unable to lookup";
                appLogger.Error("Error in GetDirectDebitDetailsFromSponsorshipId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return paymentDetails;
        }
        public List<ConstituentPaymentDetails> GetSponsorshipBankDetails(string Lookupid, long incidentId)
        {
            List<ConstituentPaymentDetails> RGPaymentList = new List<ConstituentPaymentDetails>();
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("29648335-d17a-4107-9e9d-8e48a2df8f1f");// Data List: Get Sponsorship bank details Non Sponsor on lookupid

                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("CONSTITUENTLOOKUPID", Lookupid);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                if (result.TotalRowsInReply > 0)
                {
                    foreach (DataListResultRow row in result.Rows)
                    {
                        ConstituentPaymentDetails paymentDetails = new ConstituentPaymentDetails();
                        paymentDetails.Lookupid = row.Values[0];
                        paymentDetails.RevenueId = row.Values[1];
                        paymentDetails.DirectDebitReferenceNumber = row.Values[2];
                        paymentDetails.AccountNo = row.Values[3];
                        paymentDetails.SortCode = row.Values[4];
                        paymentDetails.NameOnAccount = row.Values[5];
                        paymentDetails.AccountStatus = row.Values[6];
                        paymentDetails.PaymentMethod = row.Values[7];
                        if (!string.IsNullOrEmpty(row.Values[8]))
                        {
                            paymentDetails.NextInstallmentsDate = Convert.ToDateTime(row.Values[8]);
                        }
                        paymentDetails.InstallmentFrequency = row.Values[9];
                        RGPaymentList.Add(paymentDetails);
                    }
                }
            }
            catch (Exception e)
            {
                UpdateSponsorshipAppThread(null, incidentId, "Payment details not retrieved due to technical failure");
                DDPaymentChecks = "Unable to lookup";
                appLogger.Error("Error in GetSponsorshipBankDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return RGPaymentList;
        }
        public void UpdateSetupStatus(long IncidentId, string SetupStatus)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };


                GenericField SetupStatusGenericField = null;
                if (SetupStatus == "Blank")
                {
                    SetupStatusGenericField = new GenericField();
                    SetupStatusGenericField.dataType = DataTypeEnum.STRING;
                    SetupStatusGenericField.dataTypeSpecified = true;
                    SetupStatusGenericField.name = "setupstatus";
                    SetupStatusGenericField.DataValue = null;
                }
                else
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary[SetupStatus]), DataTypeEnum.NAMED_ID);
                }


                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("SetupStatus updated with StatusCode: " + SetupStatus + " and incidentid " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error inUpdateSetupStatus " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public string GetlookupidfromSupporterid(long supporterid)
        {
            string blackbaudid = "";
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch blackbaud id";
                String query = "Select contact.customFields.c.blackbaudid from contact where ID =" + supporterid;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        blackbaudid = result.CSVTables[0].Rows[0].ToString();
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetlookupidfromSupporterid: " + e.Message + " with supporterID: " + supporterid);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return blackbaudid;
        }
        public void UpdateProcessScheduleTime(string ProcessName)
        {
            DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string query = "UPDATE ProcessScheduleManager SET LastSuccessfulRunTime = '" + Now.ToString("yyyy-MM-dd HH:mm:ss") + "' WHERE ProcessName='" + ProcessName + "'";
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(query, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateProcessScheduleTime: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
        }
        public void UpdateSponsorshipAppThread(ConstituentPaymentDetails payObj, long IncidentId, string ThreadMsg)
        {

            appLogger.Info("UpdateCheckBotThread process started...");
            try
            {

                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

               RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];
                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                thrd[0].EntryType = new NamedID { ID = new ID { id = 3, idSpecified = true } };
                thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };

                thrd[0].Text = ThreadMsg;
                incident.Threads = thrd;

                GenericField accountnameGenericField = null;
                GenericField sortcodeGenericField = null;
                GenericField accountnumberGenericField = null;
                GenericField ddDatePreferGenericField = null;
                GenericField ddRefNumberGenericField = null;
                if (payObj != null)
                {
                    if (!(string.IsNullOrWhiteSpace(payObj.DirectDebitReferenceNumber)))
                        ddRefNumberGenericField = createGenericfield("ddrefnumber", createStringdataValue(payObj.DirectDebitReferenceNumber), DataTypeEnum.STRING);
                    if (!(string.IsNullOrWhiteSpace(payObj.NameOnAccount)))
                        accountnameGenericField = createGenericfield("accountname", createStringdataValue(payObj.NameOnAccount), DataTypeEnum.STRING);
                    if (!(string.IsNullOrWhiteSpace(payObj.AccountNo)))
                        accountnumberGenericField = createGenericfield("bankaccountnumber", createStringdataValue(payObj.AccountNo), DataTypeEnum.STRING);
                    if (!(string.IsNullOrWhiteSpace(payObj.SortCode)))
                        sortcodeGenericField = createGenericfield("banksortcode", createStringdataValue(payObj.SortCode), DataTypeEnum.STRING);

                    int dddateprefer = 0;
                    if (payObj.NextInstallmentsDate != null)
                    {
                        switch (payObj.NextInstallmentsDate.Value.Day)
                        {
                            case 1:
                                dddateprefer = 1394;
                                break;
                            case 8:
                                dddateprefer = 1395;
                                break;
                            case 15:
                                dddateprefer = 1396;
                                break;
                            case 22:
                                dddateprefer = 1397;
                                break;
                        }

                        if (dddateprefer != 0)
                        {
                            ddDatePreferGenericField = createGenericfield("dddateprefer", createNamedIdDataValue(dddateprefer), DataTypeEnum.NAMED_ID);
                        }
                        else
                        {
                            appLogger.Info("Value of dddateprefer is zero and NextInstallmentsDate: " + payObj.NextInstallmentsDate.Value);
                        }
                    }
                }

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { accountnameGenericField, sortcodeGenericField, accountnumberGenericField, ddDatePreferGenericField, ddRefNumberGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("Incident updated successfully with threadtxt: " + ThreadMsg + " with incidentid: " + IncidentId);

            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateCheckBotThread: " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public SearchListLoadReply GetConstituentOnLookupID(string searchme)
        {

            var searchreq = new SearchListLoadRequest();

            searchreq.ClientAppInfo = GetRequestHeader();
            searchreq.SearchListID = new Guid("23C5C603-D7D8-4106-AECC-65392B563887");
            searchreq.ReturnSearchFilters = true;
            searchreq.MaxRecords = 500;

            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("LOOkUPID", searchme);
            fvSet.Add("EXACTMATCHONLY", true);
            fvSet.Add("INCLUDEINACTIVE", true);
            fvSet.Add("INCLUDEDECEASED", true);

            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            searchreq.Filter = dfi;
            return retryPolicy.Execute(() => _service.SearchListLoad(searchreq));

        }
        public int GetSupporterDetailsChangeEnquiriesCount(long ContactId)
        {
            int Count = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get Incident data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "SELECT COUNT(ID) FROM incident WHERE primaryContact.contact = " + ContactId + " AND statusWithType.status.id = 1 AND subject = 'Supporter Details Change'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        Count = Convert.ToInt32(result.CSVTables[0].Rows[0]);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterDetailsChangeEnquiriesCount : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Count;
        }
        public Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent.ConstituentFinancialAccountsListRow[] FinancialAccountList(string recordId)
        {

            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("18adb86f-bb23-4b71-820c-a0d91d12c8b6");
                req.ContextRecordID = recordId;

                Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent.ConstituentFinancialAccountsListRow[] rows = Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent.ConstituentFinancialAccountsList.GetRows(provider(), req);

                // Changes for unmasked account number START
                DataListLoadRequest request = new DataListLoadRequest();
                request.ClientAppInfo = GetRequestHeader();
                request.DataListName = "Constituent Financial Accounts List - unmasked";
                request.ContextRecordID = recordId;
                //request.IncludeMetaData = true;
                var result = _service.DataListLoad(request);
                rows = rows.Select(x => { x.Account_number = result.Rows.Where(y => y.Values[10].Equals(x.ID.ToString())).First().Values[2]; return x; }).ToArray();
                // Changes for unmasked account number END

                return rows;
            }
            catch (Exception e)
            {
                appLogger.Error("Error while fetching Financial Account from lookup id : " + e.Message);
                Console.WriteLine("Error while fetching Financial Account from lookup id : " + e.Message);

                return null;
            }
        }
        public void TriggerCheckBot()
        {
            appLogger.Info("Checkbot process started at " + DateTime.Now);
            string[] NewSupporter_RNIDMatch_Arr = new string[] { "New Supporter (address partial match)", "New Supporter (postcode name partial match)", "New Supporter (bank account match)", "New Supporter (telephone partial match)" };
            string[] Existing_RNIDMatch_Arr = new string[] { "ExistingOnEmailAddress", "ExistingOnEmailAddressAndFirstName", "ExistingOnEarliestID" };
            string[] ExistingSupporter_RNIDMatch_Arr = new string[] { "Existing (already logged in)", "Existing (logged in during OSJ)" };

            UpdateDailySchedulerStatus("TriggerCheckBot", "In Progress", "UPDATE_STATUS");

            DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
            string LastSuccessfulRunTime = GetDailySchedulerLastSuccessfullRunTime("TriggerCheckBot");
            if (!string.IsNullOrEmpty(LastSuccessfulRunTime))
            {
                DateTime LastSuccessfulRunTime_GMT = DateTime.ParseExact(LastSuccessfulRunTime, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'", CultureInfo.InvariantCulture);
                LastSuccessfulRunTime = LastSuccessfulRunTime_GMT.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
            }
            string Last15Minutes = Now.AddMinutes(-15).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
            string fromTime = string.IsNullOrEmpty(LastSuccessfulRunTime) ? Last15Minutes : LastSuccessfulRunTime;

            try
            {
                appLogger.Info("Fetching Incident for checkbot process");
                List<long> listresobj = new List<long>();
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get Incident Data";

                //fromTime = Now.AddHours(-6).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");

                string Query = "SELECT Incident FROM Incident WHERE Incident.queue.lookupname='Inbound Applications' AND Incident.statusWithType.statusType.lookupname='Unresolved' AND (Incident.customFields.c.setupstatus IS NULL OR Incident.customFields.c.setupstatus.lookupname='Waiting') AND (Incident.CreatedTime >= '" + fromTime + "' OR Incident.UpdatedTime>= '" + fromTime + "') Order by Incident.CreatedTime DESC";

                appLogger.Info("Between : CreatedTime >= '" + fromTime + "' OR UpdatedTime >= '" + fromTime + "'");

                //string Query = "SELECT Incident FROM Incident WHERE Incident.ID=6017347";

                Incident contactTemplate = new Incident();
                RNObject[] objectTemplates = new RNObject[] { contactTemplate };
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);
                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;
                if (rnObjects != null && rnObjects.Length > 0)
                {
                    appLogger.Info("Total Records : " + rnObjects.Length + " for update checkbot process from time :" + fromTime);
                    foreach (QueryResultData queryResultData in queryObjects)
                    {
                        foreach (RNObject data in queryResultData.RNObjectsResult)
                        {
                            bool RunReadyBot = true;
                            string EmailAddressStatus = "";
                            string PostalAddressStatus = "";
                            string CountryOfResidence = "";
                            string SupporterNameStatus = "";
                            string PhoneNumberStatus = "Other";
                            string ApplicationSource = "";
                            string GiftAidStatus = "";
                            string DigitalChoice = "Unclear";
                            string AnnualGifts = "";
                            string sponsorshipplus = "No";
                            string NewSupporter = "";
                            string paymentMethod = null;
                            int NewSupporterValues = 0;
                            int updatesAppliedCode = 0;
                            DDPaymentChecks = null;//DX175
                            Incident incidentTemp = (Incident)data;
                            long incidentId = incidentTemp.ID.id;
                            UpdateLastCheckedTime(incidentId);//DX190
                            appLogger.Info("CheckBot process started for IncidentId: " + incidentId);
                            IncidentData incidentdate = new IncidentData();
                            string ExistingCommitments = "";
                            incidentdate = FetchAccountDetailsFromEnquiry(incidentId);
                            long contactid = incidentdate.ContactId;
                            string InternalSubject = incidentdate.internalsubject;
                            if (string.IsNullOrEmpty(InternalSubject) || !InternalSubject.Contains("Online Sponsorship Application"))
                            {
                                appLogger.Info("Incident is not a sponroship enquiry with id:" + incidentId + " with InternalSubject: " + InternalSubject);
                                continue;
                            }
                            string RNIDMatch = incidentdate.ThreadData.RNIDMatch;
                            string PhoneNo = incidentdate.ThreadData.TelephoneNumber;
                            string UpdatesApplied = incidentdate.updatesapplied;
                            string SetupStatus = incidentdate.SetupStatus;
                            string IsUnique = CheckSupporterIsUnique(incidentId, contactid);
                            string ConstituentBBID = GetlookupidfromSupporterid(contactid);
                            string ConstituentRecordID = null;
                            if (!string.IsNullOrEmpty(ConstituentBBID))
                            {
                                ConstituentRecordID = GetConstituentOnLookupID(ConstituentBBID).Output.Rows[0].Values[0];
                            }


                            if (ExistingSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains))
                            {
                                IsUnique = "Yes";
                            }
                            #region DX168 Existing Supporter Sponsorship and CheckBot & ReadyBot
                            //Get Supporter Details Change enquiries Count
                            int OpenEnquiriesCount = GetSupporterDetailsChangeEnquiriesCount(contactid);

                            if (contactid == 104724)
                            {
                                UpdatesApplied = "No";
                                NewSupporter = "Check";
                                updatesAppliedCode = 1753; //No
                            }
                            else if (contactid != 104724 && OpenEnquiriesCount == 0)
                            {
                                UpdatesApplied = "Yes";
                                updatesAppliedCode = 1752; //Yes
                            }
                            /*else if (contactid != 104724 && OpenEnquiriesCount > 0)
                            {
                                UpdatesApplied = "No";
                                SetupStatus = "Check";
                                updatesAppliedCode = 1753; //No
                            }

                            if (ExistingSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && OpenEnquiriesCount == 0)
                            {
                                UpdatesApplied = "N/A";
                                updatesAppliedCode = 1751; //N/A
                            }
                            else if (ExistingSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && OpenEnquiriesCount > 0)
                            {
                                UpdatesApplied = "No";
                                updatesAppliedCode = 1753; //No
                            }
                            else if (Existing_RNIDMatch_Arr.Any(RNIDMatch.Contains) && OpenEnquiriesCount == 0)
                            {
                                UpdatesApplied = "N/A";
                                updatesAppliedCode = 1751; //N/A
                            }
                            else if (Existing_RNIDMatch_Arr.Any(RNIDMatch.Contains) && OpenEnquiriesCount > 0)
                            {
                                UpdatesApplied = "No";
                                updatesAppliedCode = 1753; //No
                            }
                            else if (NewSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && OpenEnquiriesCount == 0)
                            {
                                UpdatesApplied = "N/A";
                                updatesAppliedCode = 1751; //N/A
                            }
                            else if (NewSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && OpenEnquiriesCount > 0)
                            {
                                UpdatesApplied = "No";
                                updatesAppliedCode = 1753; //No
                            }
                            else if (RNIDMatch == "NewSupporter" && OpenEnquiriesCount == 0)
                            {
                                UpdatesApplied = "N/A";
                                updatesAppliedCode = 1751; //N/A
                            }
                            else if (RNIDMatch == "NewSupporter" && OpenEnquiriesCount > 0)
                            {
                                UpdatesApplied = "No";
                                updatesAppliedCode = 1753; //No
                            }
                            */
                            #endregion
                            
                            #region NewSupporter
                            //DX144 Identifying existing supporters in OSJ
                            if (RNIDMatch == "Existing (already logged in)" || RNIDMatch == "Existing (logged in during OSJ)")
                            {
                                NewSupporter = "No";
                                NewSupporterValues = 1175;
                            }
                            if (RNIDMatch == "NewSupporter")
                            {
                                NewSupporter = "Yes";
                                NewSupporterValues = 1174;
                                DDPaymentChecks = "New Direct Debit";//DX175
                            }
                            if (RNIDMatch == "ExistingOnEmailAddress" || RNIDMatch == "ExistingOnEmailAddressAndFirstName" || RNIDMatch == "ExistingOnEarliestID")
                            {
                                NewSupporter = "Check";
                                NewSupporterValues = 1176;
                            }
                            if (RNIDMatch == "New Supporter (address partial match)" || RNIDMatch == "New Supporter (postcode name partial match)" || RNIDMatch == "New Supporter (bank account match)" || RNIDMatch == "New Supporter (telephone partial match)")
                            {
                                NewSupporter = "Check";
                                NewSupporterValues = 1176;
                                SetupStatus = "Check";
                            }

                            if (!string.IsNullOrEmpty(incidentdate.newsupporter))
                            {
                                switch (incidentdate.newsupporter)
                                {
                                    case "Yes":
                                        NewSupporter = "Yes";
                                        NewSupporterValues = 1174;
                                        break;
                                    case "No":
                                        NewSupporter = "No";
                                        NewSupporterValues = 1175;
                                        break;
                                    case "Check":
                                        NewSupporter = "Check";
                                        NewSupporterValues = 1176;
                                        SetupStatus = "Check";
                                        break;
                                }
                            }
                            #endregion

                            #region DX105 Check, Setup and Resolve existing supporters applications
                            if (NewSupporter == "No")
                            {
                                if (!string.IsNullOrEmpty(incidentdate.ThreadData.BasedOnCommitment))
                                {
                                    string[] values = incidentdate.ThreadData.BasedOnCommitment.Split('/');
                                    string SponsorshipId = values[1];
                                    ConstituentPaymentDetails ExistingUsedPaymentDetails = GetPaymentDetailsFromSponsorshipId(SponsorshipId, incidentId);
                                    if (ExistingUsedPaymentDetails != null)
                                    {
                                        if (InternalSubject.Contains("Invalid Bank Account for"))
                                        {
                                            //just run existing logic
                                        }
                                        else if (InternalSubject.Contains("- No Money for"))
                                        {
                                            if (ExistingUsedPaymentDetails.AccountStatus == "EFT")
                                            {
                                                UpdateSponsorshipAppThread(ExistingUsedPaymentDetails, incidentId, "Payment details retrieved from the existing commitment");
                                                incidentdate.AccountNo = ExistingUsedPaymentDetails.AccountNo;
                                                incidentdate.SortCode = ExistingUsedPaymentDetails.SortCode;
                                                incidentdate.AccountName = ExistingUsedPaymentDetails.NameOnAccount;
                                                DDPaymentChecks = "Existing Direct Debit found";
                                                incidentdate.bankaccountstatus = "UK Valid Personal";
                                            }
                                            else
                                            {
                                                appLogger.Info("Existing finantial account details is not active with incidentID: " + incidentId);
                                                UpdateSponsorshipAppThread(null, incidentId, "Direct Debit mandate is no longer active");
                                                SetupStatus = "Check";
                                                DDPaymentChecks = "Complex Direct Debits";
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (InternalSubject.Contains("– Invalid Bank Account for"))
                                    {
                                        //just run existing logic
                                    }
                                    else if (InternalSubject.Contains("- Money for"))
                                    {
                                        if (!string.IsNullOrEmpty(ConstituentRecordID))
                                        {
                                            var FinantialAccounts = FinancialAccountList(ConstituentRecordID);
                                            bool IsGivenDirectDebitMatched = false;
                                            bool IsActiveAccount = false;
                                            if (FinantialAccounts.Length > 0)
                                            {
                                                foreach (ConstituentFinancialAccountsListRow row in FinantialAccounts)
                                                {
                                                    if (row.EFT_status == "EFT")
                                                    {
                                                        IsActiveAccount = true;
                                                        if (incidentdate.AccountNo.Contains(row.Account_number.Replace("x", "")) && row.Sort_code == incidentdate.SortCode)
                                                        {
                                                            IsGivenDirectDebitMatched = true;
                                                            DDPaymentChecks = "Existing Direct Debit found";
                                                            incidentdate.bankaccountstatus = "UK Valid Personal";
                                                            break;
                                                        }
                                                    }
                                                }
                                                if (!IsGivenDirectDebitMatched && IsActiveAccount)
                                                {
                                                    appLogger.Info("Given accountno and sortcode does not match with existing DD details");
                                                    UpdateSponsorshipAppThread(null, incidentId, "Bank Account details differ from those on record");
                                                    SetupStatus = "Check";
                                                    DDPaymentChecks = "Complex Direct Debits";
                                                }
                                                else if (!IsActiveAccount)
                                                {
                                                    //No monthly Direct Debit mandate available
                                                    appLogger.Info("Money Case - No monthly Direct Debit mandate available with lookupid: " + ConstituentBBID);
                                                    UpdateSponsorshipAppThread(null, incidentId, "No monthly Direct Debit mandate available");
                                                    SetupStatus = "Check";
                                                    DDPaymentChecks = "Complex Direct Debits";
                                                }
                                            }
                                            else
                                            {
                                                //No monthly Direct Debit mandate available
                                                appLogger.Info("Money Case - No monthly Direct Debit mandate available with lookupid: " + ConstituentBBID);
                                                UpdateSponsorshipAppThread(null, incidentId, "No monthly Direct Debit mandate available");
                                                SetupStatus = "Check";
                                                DDPaymentChecks = "Complex Direct Debits";
                                            }
                                        }
                                    }
                                    else if (InternalSubject.Contains("No Money for"))
                                    {
                                        if (!string.IsNullOrEmpty(ConstituentBBID))
                                        {
                                            List<ConstituentPaymentDetails> RGPayList = GetSponsorshipBankDetails(ConstituentBBID, incidentId);
                                            if (RGPayList.Count > 0)
                                            {
                                                List<ConstituentPaymentDetails> UniqueDDAccountList = RGPayList.GroupBy(i => i.AccountNo).Select(x => x.First()).ToList();
                                                if (UniqueDDAccountList.Count > 1)
                                                {
                                                    //More than one monthly Direct Debit mandate available
                                                    appLogger.Info("More than one monthly Direct Debit mandate available with lookupid: " + ConstituentBBID);
                                                    UpdateSponsorshipAppThread(null, incidentId, "More than one monthly Direct Debit mandate available");
                                                    SetupStatus = "Check";
                                                    DDPaymentChecks = "Complex Direct Debits";
                                                }
                                                else if (UniqueDDAccountList.Count == 1)
                                                {
                                                    //Payment details retrieved from the only monthly Direct Debit
                                                    UpdateSponsorshipAppThread(UniqueDDAccountList[0], incidentId, "Payment details retrieved from the only monthly Direct Debit");
                                                    incidentdate.AccountNo = UniqueDDAccountList[0].AccountNo;
                                                    incidentdate.SortCode = UniqueDDAccountList[0].SortCode;
                                                    incidentdate.AccountName = UniqueDDAccountList[0].NameOnAccount;
                                                    DDPaymentChecks = "Existing Direct Debit found";
                                                    incidentdate.bankaccountstatus = "UK Valid Personal";
                                                    //In this case we intend to use the existing DD mandate details to set up the commitment
                                                }
                                            }
                                            else
                                            {
                                                //No monthly Direct Debit mandate available
                                                appLogger.Info("No monthly Direct Debit mandate available with lookupid: " + ConstituentBBID);
                                                UpdateSponsorshipAppThread(null, incidentId, "No monthly Direct Debit mandate available");
                                                SetupStatus = "Check";
                                                DDPaymentChecks = "Complex Direct Debits";
                                            }
                                        }
                                    }
                                }
                            }

                            #endregion

                            #region ExistingCommitments
                            //- CheckBot - ExistingCommitments revised checking
                            //DX178 Prevent setup when DepSub in progress
                            int depSubInProgressCount = 0;
                            int ExistingCommitmentsCount = getCommitmentCountonSupporterid(contactid.ToString(), out depSubInProgressCount);
                            if (ExistingCommitmentsCount == 0)
                            {
                                ExistingCommitments = "None";
                            }
                            else if (ExistingCommitmentsCount > 0 && ExistingCommitmentsCount <= Model.Constant.MAX_EXISTING_COMMITMENTS)
                            {
                                ExistingCommitments = "Some";
                            }
                            else if (ExistingCommitmentsCount > Model.Constant.MAX_EXISTING_COMMITMENTS)
                            {
                                ExistingCommitments = "Many";
                            }
                            if (depSubInProgressCount > 0)
                            {
                                appLogger.Info("Setting setup status CHECK as supporter linked to the enquiry has one or more 'unprocessed departures'");
                                SetupStatus = "Check";
                            }
                            #endregion

                            #region PhoneNumberStatus
                            if (string.IsNullOrEmpty(PhoneNo))
                            {
                                PhoneNumberStatus = "None";
                            }
                            if (PhoneNo.StartsWith("447") || PhoneNo.StartsWith("+447") || PhoneNo.StartsWith("07"))// IF phone starts '447' OR '+447' OR '07' THEN set to 'UK Mobile'
                            {
                                PhoneNumberStatus = "UK Mobile";
                            }
                            else if (PhoneNo.StartsWith("44") || PhoneNo.StartsWith("01") || PhoneNo.StartsWith("02") || PhoneNo.StartsWith("03") || PhoneNo.StartsWith("04") || PhoneNo.StartsWith("05") || PhoneNo.StartsWith("06") || PhoneNo.StartsWith("07") || PhoneNo.StartsWith("08") || PhoneNo.StartsWith("09") || !PhoneNo.StartsWith("00"))//phone starts '44' OR '01' OR '02' OR '03' OR '04' OR '05' OR '06' OR '08' OR '09 (but not '00')
                            {
                                PhoneNumberStatus = "UK Landline";
                            }
                            if (!PhoneNo.StartsWith("+44") && (PhoneNo.StartsWith("+555") || PhoneNo.StartsWith("00") || (PhoneNo.StartsWith("+"))))////DX143(Skinny)  ELSEIF phone starts '00' OR ('+' but not '+44') THEN set to 'Overseas' ('+44' includes '+447')
                            {
                                PhoneNumberStatus = "Overseas";
                            }
                            #endregion

                            #region Bank Account Status
                            // DX144 - Remove NewSupporter/BankAccount fields from comment to dropdown
                            string BankAccountStatus = "Check";
                            int BankAccountStatusCode = 1714;
                            if (string.IsNullOrEmpty(incidentdate.AccountNo) || string.IsNullOrEmpty(incidentdate.SortCode) || !incidentdate.AccountNo.All(char.IsDigit) || !incidentdate.SortCode.All(char.IsDigit))
                            {
                                BankAccountStatus = "None/Invalid";
                                BankAccountStatusCode = 1710;
                            }

                            if (!string.IsNullOrEmpty(incidentdate.AccountNo) && !string.IsNullOrEmpty(incidentdate.SortCode) && !string.IsNullOrEmpty(incidentdate.AccountName) && incidentdate.AccountName.ToLower().Contains(incidentdate.LastName.ToLower()) && incidentdate.AccountName.ToLower().Contains(incidentdate.FirstName.ToLower()))//DX142
                            {
                                BankAccountStatus = "UK Valid Personal";
                                BankAccountStatusCode = 1711;
                            }

                            if (!string.IsNullOrEmpty(incidentdate.AccountNo) && !string.IsNullOrEmpty(incidentdate.SortCode) && !string.IsNullOrEmpty(incidentdate.AccountName) && (!incidentdate.AccountName.ToLower().Contains(incidentdate.LastName.ToLower()) || !incidentdate.AccountName.ToLower().Contains(incidentdate.FirstName.ToLower())))
                            {
                                //DX155 - Use 'Check' instead and leave the 'UK Valid Other' value for Ops to [possibly] use
                                BankAccountStatus = "Check";
                                BankAccountStatusCode = 1714;
                                SetupStatus = "Check";
                            }
                            #endregion

                            #region PostalAddressStatus
                            if (string.IsNullOrEmpty(incidentdate.ThreadData.Address1) || string.IsNullOrEmpty(incidentdate.ThreadData.Postcode))
                            {
                                PostalAddressStatus = "Insufficient";
                            }
                            if (!string.IsNullOrEmpty(incidentdate.ThreadData.Address1) && !string.IsNullOrEmpty(incidentdate.ThreadData.Postcode))
                            {
                                PostalAddressStatus = "Sufficient";
                            }

                            if (string.IsNullOrEmpty(PostalAddressStatus))
                            {
                                if (!string.IsNullOrEmpty(incidentdate.ThreadData.AddressEntryMethod) && incidentdate.ThreadData.AddressEntryMethod == "Postcode")
                                {
                                    PostalAddressStatus = "Sufficient";
                                }
                                else
                                {
                                    PostalAddressStatus = "Insufficient";
                                }
                            }

                            #region DX188 Changes
                            //DX188 Changes started
                            if (incidentdate.ThreadData.AddressChanged == "TRUE" && incidentdate.ThreadData.AddressEntryMethod == "Postcode")
                            {
                                PostalAddressStatus = "Sufficient";
                            }
                            else if (incidentdate.ThreadData.AddressChanged == "TRUE" && incidentdate.ThreadData.AddressEntryMethod != "Postcode")
                            {
                                PostalAddressStatus = "Insufficient";
                            }
                            else if (incidentdate.ThreadData.AddressChanged == "NEW" && incidentdate.ThreadData.AddressEntryMethod == "Postcode")
                            {
                                PostalAddressStatus = "Sufficient";
                            }
                            else if (incidentdate.ThreadData.AddressChanged == "NEW" && incidentdate.ThreadData.AddressEntryMethod != "Postcode")
                            {
                                PostalAddressStatus = "Insufficient";
                            }
                            /*else if (incidentdate.ThreadData.AddressChanged != "TRUE" && !string.IsNullOrEmpty(incidentdate.ThreadData.AddressEntryMethod))
                            {
                                PostalAddressStatus = "Insufficient";
                            }*/
                            //DX188 Changes ended
                            #endregion

                            #endregion

                            #region SupporterNameStatus
                            if (string.IsNullOrEmpty(incidentdate.ThreadData.SupporterFirstName) || string.IsNullOrEmpty(incidentdate.ThreadData.SupporterLastName) || string.IsNullOrEmpty(incidentdate.ThreadData.SupporterTitle))
                            {
                                SupporterNameStatus = "Insufficient";
                            }
                            else if (!string.IsNullOrEmpty(incidentdate.ThreadData.SupporterFirstName) && !string.IsNullOrEmpty(incidentdate.ThreadData.SupporterLastName) && !string.IsNullOrEmpty(incidentdate.ThreadData.SupporterTitle))
                            {
                                SupporterNameStatus = "Sufficient";
                            }

                            #region DX188 changes
                            //DX188 Changes started
                            if (!string.IsNullOrEmpty(incidentdate.ThreadData.SupporterFirstName) && !string.IsNullOrEmpty(incidentdate.ThreadData.SupporterLastName) && !string.IsNullOrEmpty(incidentdate.ThreadData.SupporterTitle) && incidentdate.ThreadData.SupporterNameStatus != "Check")
                            {
                                SupporterNameStatus = "Sufficient";
                            }
                            else if (!string.IsNullOrEmpty(incidentdate.ThreadData.SupporterFirstName) && !string.IsNullOrEmpty(incidentdate.ThreadData.SupporterLastName) && !string.IsNullOrEmpty(incidentdate.ThreadData.SupporterTitle) && incidentdate.ThreadData.SupporterNameStatus == "Check")
                            {
                                SupporterNameStatus = "Insufficient";
                            }
                            else if (string.IsNullOrEmpty(incidentdate.ThreadData.SupporterFirstName) || string.IsNullOrEmpty(incidentdate.ThreadData.SupporterLastName) || string.IsNullOrEmpty(incidentdate.ThreadData.SupporterTitle))
                            {
                                SupporterNameStatus = "Insufficient";
                            }
                            //DX188 Changes ended
                            #endregion

                            if (!string.IsNullOrEmpty(incidentdate.ThreadData.SupporterLastName) && incidentdate.ThreadData.SupporterLastName.ToLower().Contains("testtest"))//DX143(Skinny)
                            {
                                SupporterNameStatus = "Check";
                            }
                            #endregion

                            #region UpdatesApplied and IsUnique
                            //- CheckBot - UpdatesApplied revised checking
                            if (string.IsNullOrEmpty(UpdatesApplied))
                            {
                                UpdatesApplied = "Yes";// UpdatesApplied flag is already set to 'Yes'
                                UpdatesApplied = IsUnique == "N/A" ? "Unknown" : UpdatesApplied;
                                UpdatesApplied = NewSupporter == "Yes" ? "N/A" : "No";
                                if (UpdatesApplied == "No")
                                {
                                    SetupStatus = "Check";
                                }
                                if (!string.IsNullOrEmpty(incidentdate.ThreadData.AddressChanged) && incidentdate.ThreadData.AddressChanged == "True")
                                {
                                    UpdatesApplied = "No";//DX135
                                    SetupStatus = "Check";
                                }
                                switch (UpdatesApplied)
                                {
                                    case "N/A":
                                        updatesAppliedCode = 1751; //N/A
                                        UpdatesApplied = "N/A";
                                        break;
                                    case "Yes":
                                        updatesAppliedCode = 1752; //Yes
                                        UpdatesApplied = "Yes";
                                        break;
                                    case "No":
                                        updatesAppliedCode = 1753; //No
                                        UpdatesApplied = "No";
                                        SetupStatus = "Check";
                                        break;
                                }
                            }

                            #region DX188 Changes
                            //DX188 Changes started
                            if (OpenEnquiriesCount == 0 && PostalAddressStatus == "Sufficient" && SupporterNameStatus == "Sufficient")
                            {
                                UpdatesApplied = "Yes";
                                updatesAppliedCode = 1752;
                                appLogger.Info("DX188:OpenEnquiriesCount is 0 AND PostalAddressStatus is Sufficient AND SupporterNameStatus is Sufficient that why we are setting UpdatesApplied to Yes");
                            }
                            else if (OpenEnquiriesCount > 0 && PostalAddressStatus == "Sufficient" && SupporterNameStatus == "Sufficient")
                            {
                                UpdatesApplied = "Resolve Supporter Details Changes";
                                updatesAppliedCode = 1768;
                                appLogger.Info("DX188:OpenEnquiriesCount is some AND PostalAddressStatus is Sufficient AND SupporterNameStatus is Sufficient that why we are setting UpdatesApplied to Resolve Supporter Details Changes");
                            }
                            else if (OpenEnquiriesCount == 0 && (PostalAddressStatus == "Insufficient" || SupporterNameStatus == "Insufficient"))
                            {
                                UpdatesApplied = "Check data quality";
                                updatesAppliedCode = 1769;
                                appLogger.Info("DX188:OpenEnquiriesCount is 0 AND PostalAddressStatus is Insufficient AND SupporterNameStatus is Insufficient that why we are setting UpdatesApplied to Check data quality");
                            }
                            else if (OpenEnquiriesCount > 0 && (PostalAddressStatus == "Insufficient" || SupporterNameStatus == "Insufficient"))
                            {
                                UpdatesApplied = "Check data quality and Resolve SDC";
                                updatesAppliedCode = 1770;
                                appLogger.Info("DX188:OpenEnquiriesCount is 0 AND PostalAddressStatus is Insufficient AND SupporterNameStatus is Insufficient that why we are setting UpdatesApplied to Check data quality and Resolve SDC");
                            }
                            //DX188.20
                            if (UpdatesApplied == "Resolve Supporter Details Changes" && SetupStatus == "Check")
                            {

                            }

                            //DX188 Changes ended
                            #endregion


                            if (!string.IsNullOrEmpty(incidentdate.updatesapplied))
                            {
                                switch (incidentdate.updatesapplied)
                                {
                                    case "N/A":
                                        updatesAppliedCode = 1751;
                                        UpdatesApplied = "N/A";
                                        break;
                                    case "Yes":
                                        updatesAppliedCode = 1752;
                                        UpdatesApplied = "Yes";
                                        //DX188 Changes starts

                                        SupporterNameStatus = "Sufficient";
                                        PostalAddressStatus = "Sufficient";

                                        //DX188 Changes ends
                                        PhoneNumberStatus = "UK Mobile";
                                        break;
                                    case "No":
                                        updatesAppliedCode = 1753;
                                        SetupStatus = "Check";
                                        UpdatesApplied = "No";
                                        break;
                                    //DX188 Changes starts

                                    case "Resolve Supporter Details Changes":
                                        updatesAppliedCode = 1768;
                                        UpdatesApplied = "Resolve Supporter Details Changes";
                                        if (OpenEnquiriesCount == 0)
                                        {
                                            updatesAppliedCode = 1752;
                                            UpdatesApplied = "Yes";
                                        }
                                        else if (OpenEnquiriesCount > 0)
                                        {
                                            //DX188.26
                                            SetupStatus = "Check";
                                        }
                                        break;
                                    case "Check data quality":
                                        updatesAppliedCode = 1769;
                                        UpdatesApplied = "Check data quality";
                                        break;
                                    case "Check data quality and Resolve SDC":
                                        updatesAppliedCode = 1770;
                                        UpdatesApplied = "Check data quality and Resolve SDC";
                                        break;

                                }

                                if ((incidentdate.updatesapplied == "Resolve Supporter Details Changes" || incidentdate.updatesapplied == "Check data quality and Resolve Supporter Details Changes") && OpenEnquiriesCount == 0)
                                {
                                    //DX188.27
                                    updatesAppliedCode = 1769;
                                    UpdatesApplied = "Check data quality";
                                    SetupStatus = "Check";
                                }
                                else if ((incidentdate.updatesapplied == "Check data quality" || incidentdate.updatesapplied == "Check data quality and Resolve Supporter Details Changes") && OpenEnquiriesCount > 0)
                                {
                                    updatesAppliedCode = 1770;
                                    UpdatesApplied = "Check data quality and Resolve SDC";
                                    SetupStatus = "Check";
                                }

                                //DX188 Changes ends
                            }
                            string IsUniqueStr = IsUnique;
                            #endregion

                            #region Payment Method
                            if (!string.IsNullOrEmpty(incidentdate.AccountNo) && !string.IsNullOrEmpty(incidentdate.SortCode))
                            {
                                paymentMethod = "Direct Debit Monthly";
                            }
                            else if (string.IsNullOrEmpty(incidentdate.AccountNo) || string.IsNullOrEmpty(incidentdate.SortCode))
                            {
                                paymentMethod = "Other";
                            }
                            #endregion

                            #region EmailAddressStatus
                            if (!string.IsNullOrEmpty(incidentdate.ThreadData.SupporterEmail))
                            {
                                EmailAddressStatus = "Yes";
                            }
                            else
                            {
                                EmailAddressStatus = "No";
                            }
                            #endregion

                            #region CountryOfResidence
                            if (!string.IsNullOrEmpty(incidentdate.ThreadData.Country) && incidentdate.ThreadData.Country == "UNITED KINGDOM")
                            {
                                CountryOfResidence = "UK";
                            }
                            else
                            {
                                CountryOfResidence = "Other";
                            }
                            #endregion

                            #region ApplicationSource
                            if (!string.IsNullOrEmpty(incidentdate.Category) && (incidentdate.Category == "Web Sponsorship" || incidentdate.Category == "SMS Application"))
                            {
                                ApplicationSource = "Web";
                            }
                            else
                            {
                                ApplicationSource = "Other";
                            }
                            if (PhoneNo.StartsWith("+555"))//DX143(Skinny)
                            {
                                ApplicationSource = "Web Test";
                            }
                            #endregion

                            #region GiftAidStatus
                            if (!string.IsNullOrEmpty(incidentdate.giftaidstatus) && incidentdate.giftaidstatus == "Gift Aid - No")
                            {
                                GiftAidStatus = "No";
                            }
                            else if (!string.IsNullOrEmpty(incidentdate.giftaidstatus) && incidentdate.giftaidstatus == "Gift Aid - Yes")
                            {
                                GiftAidStatus = "Yes";
                            }
                            else if (!string.IsNullOrEmpty(incidentdate.giftaidstatus) && (incidentdate.giftaidstatus == "Gift Aid - Yes" && BankAccountStatus != "UK Valid Personal"))
                            {
                                GiftAidStatus = "Other";
                            }
                            #endregion

                            #region DigitalChoice
                            SupporterPreferences spObj = FetchSupporterPreferences(contactid);
                            //DX136 HybridPhoto and InboundApplicationAutomation
                            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && (spObj.Comments == "No Pack" || spObj.Comments == "I don't want a physical pack in the post" || string.IsNullOrEmpty(spObj.Comments))) { DigitalChoice = "Digital"; }
                            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && (spObj.Comments == "Welcome Pack" || spObj.Comments == "I do want a physical pack in the post")) { DigitalChoice = "Hybrid Welcome Pack"; }
                            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && spObj.Comments == "Photo Only") { DigitalChoice = "Hybrid Photo Pack"; }
                            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-In") { DigitalChoice = "Traditional"; }
                            #endregion

                            #region AnnualGifts
                            if (incidentdate.ThreadData.Birthday == "0" && incidentdate.ThreadData.Christmas == "0")
                            {
                                AnnualGifts = "No";
                            }
                            else
                            {
                                AnnualGifts = "Yes";
                            }
                            #endregion

                            #region sponsorshipplus
                            if (incidentdate.sponsorshipplustype == "Yes – Hillsong sponsorship Plus")//(DX:147) Sponsorship Automation: Adding Hillsong Sponsorship+ to the automation
                            {
                                sponsorshipplus = "Hillsong";
                            }
                            else
                            {
                                sponsorshipplus = incidentdate.sponsorshipplus;
                            }
                            #endregion

                            #region Supporter Data , SafeguardingConcern And childAvailability
                            Supporter sObj = new Supporter();
                            sObj = fetchSupporterDetails(contactid);
                            string SupporterStatus = sObj.Status;
                            string SupporterType = incidentdate.supportertype;
                            string PartnerOffice = incidentdate.country;
                            string SupporterLinked = contactid == 104724 ? "Temporary" : "Yes";
                            string SponsorshipPlus = sponsorshipplus;
                            string VulnerableCircumstances = "";
                            if (sObj.bannerflagid == 0 || sObj.bannerflagid < 3)
                            {
                                VulnerableCircumstances = "No";
                            }
                            else if (sObj.bannerflagid == 3)
                            {
                                VulnerableCircumstances = "Yes";
                            }
                            string SafeguardingConcern = sObj.safeguarding_concern == "1418" ? "Yes" : "No";
                            string childAvailability = FetchChildStatus(incidentdate.NeedKey);
                            #endregion

                            #region BankAccountStatus
                            bool ValidBankDetails = true;
                            if (InternalSubject.Contains("Invalid Bank Account for"))
                            {
                                ValidBankDetails = false;
                            }
                            else if (InternalSubject.Contains("- No Money for"))
                            {
                                ValidBankDetails = false;
                            }

                            if (!ValidBankDetails)
                            {
                                BankAccountStatus = "None/Invalid";
                                BankAccountStatusCode = 1710;
                            }

                            if (!string.IsNullOrEmpty(incidentdate.bankaccountstatus))
                            {
                                // If bankaccountstatus is manually set by compassion team
                                switch (incidentdate.bankaccountstatus)
                                {
                                    case "None/Invalid":
                                        BankAccountStatus = "None/Invalid";
                                        BankAccountStatusCode = 1710;
                                        break;
                                    case "UK Valid Personal":
                                        BankAccountStatus = "UK Valid Personal";
                                        BankAccountStatusCode = 1711;
                                        break;
                                    case "UK Valid Other":
                                        BankAccountStatus = "UK Valid Other";
                                        BankAccountStatusCode = 1712;
                                        break;
                                    case "UK Valid Business":
                                        BankAccountStatus = "UK Valid Business";
                                        BankAccountStatusCode = 1713;
                                        break;
                                    case "Check":
                                        BankAccountStatus = "Check";
                                        BankAccountStatusCode = 1714;
                                        break;
                                }
                            }

                            #endregion
                            //DX188.20
                            if (NewSupporter == "Check" || BankAccountStatus == "Check" || UpdatesApplied != "Yes" || DDPaymentChecks == "Complex Direct Debits" || depSubInProgressCount > 0)
                            {
                                SetupStatus = "Check";
                                RunReadyBot = false;
                                appLogger.Info("SetupStatus = Check and RunReadyBot = false NewSupporter == Check || BankAccountStatus == Check || UpdatesApplied != Yes || DDPaymentChecks == Complex Direct Debits || depSubInProgressCount > 0");
                            }
                            #region CheckBot Object

                            CheckBot Cobj = new CheckBot();
                            Cobj.CountryOffice = PartnerOffice;
                            Cobj.ApplicationSource = ApplicationSource;
                            Cobj.SupporterType = SupporterType;
                            Cobj.NewSupporter = NewSupporter;
                            Cobj.IsUnique = IsUniqueStr;
                            Cobj.ExistingCommitments = ExistingCommitments;
                            Cobj.UpdatesApplied = UpdatesApplied;
                            Cobj.SupporterNameStatus = SupporterNameStatus;
                            Cobj.DigitalChoice = DigitalChoice;
                            Cobj.CountryOfResidence = CountryOfResidence;
                            Cobj.PostalAddressStatus = PostalAddressStatus;
                            Cobj.PhoneNumberStatus = PhoneNumberStatus;
                            Cobj.EmailAddressStatus = EmailAddressStatus;
                            Cobj.PaymentMethod = paymentMethod;
                            Cobj.BankAccountStatus = BankAccountStatus;
                            Cobj.SponsorshipPlus = SponsorshipPlus;
                            Cobj.AnnualGifts = AnnualGifts;
                            Cobj.GiftAidStatus = GiftAidStatus;
                            Cobj.VulnerableCircumstances = VulnerableCircumstances;
                            Cobj.SafeguardingConcern = SafeguardingConcern;
                            Cobj.SupporterLinked = SupporterLinked;
                            Cobj.SupporterStatus = SupporterStatus;
                            Cobj.ChildAvailability = childAvailability;

                            #endregion

                            #region ReadyBot

                            bool IsPreferenceCreated = CheckIfSupporterSponsorshipCompletedStep4(contactid, incidentdate.createdTime);


                            if (ExistingSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && !IsPreferenceCreated)
                            {
                                SetupStatus = "Waiting";
                                RunReadyBot = false;
                                appLogger.Info("SetupStatus = Waiting && RunReadyBot = false due to ExistingSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && !IsPreferenceCreated");
                            }
                            else if (NewSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && NewSupporter == "Check" && !IsPreferenceCreated)
                            {
                                SetupStatus = "Waiting";
                                RunReadyBot = false;
                                appLogger.Info("SetupStatus = Waiting && RunReadyBot = false due to NewSupporter_RNIDMatch_Arr.Any(RNIDMatch.Contains) && NewSupporter == Check && !IsPreferenceCreated");
                            }
                            else if (Existing_RNIDMatch_Arr.Any(RNIDMatch.Contains) && !IsPreferenceCreated)
                            {
                                SetupStatus = "Waiting";
                                RunReadyBot = false;
                                appLogger.Info("SetupStatus = Waiting && RunReadyBot = false due to Existing_RNIDMatch_Arr.Any(RNIDMatch.Contains) && !IsPreferenceCreated");
                            }
                            else if (NewSupporter == "Yes" && !IsPreferenceCreated)
                            {
                                SetupStatus = "Waiting";
                                RunReadyBot = false;
                                appLogger.Info("SetupStatus = Waiting && RunReadyBot = false due to NewSupporter == Yes && !IsPreferenceCreated");
                            }

                            //DX175
                            if (string.IsNullOrEmpty(SetupStatus) && NewSupporter == "No" && DDPaymentChecks == "Existing Direct Debit found")
                            {
                                RunReadyBot = true;
                                appLogger.Info("Readybot is running as string.IsNullOrEmpty(SetupStatus) && NewSupporter == No && DDPaymentChecks == Existing Direct Debit found");
                            }
                            else if (string.IsNullOrEmpty(SetupStatus) && NewSupporter == "No" && (!string.IsNullOrEmpty(DDPaymentChecks) && DDPaymentChecks != "Existing Direct Debit found"))
                            {
                                SetupStatus = "Check";
                                RunReadyBot = false;
                                appLogger.Info("Readybot is not running as string.IsNullOrEmpty(SetupStatus) && NewSupporter == No && (!string.IsNullOrEmpty(DDPaymentChecks) && DDPaymentChecks != Existing Direct Debit found");
                            }
                            else if (string.IsNullOrEmpty(SetupStatus) && NewSupporter == "Yes" && (!string.IsNullOrEmpty(DDPaymentChecks) && DDPaymentChecks != "New Direct Debit"))   // DX175
                            {
                                RunReadyBot = false;
                                appLogger.Info("Readybot is not running as string.IsNullOrEmpty(SetupStatus) && NewSupporter == Yes && (!string.IsNullOrEmpty(DDPaymentChecks) && DDPaymentChecks != New Direct Debit");
                            }
                            else if (NewSupporter == "No" && DDPaymentChecks == "Unable to lookup")
                            {
                                RunReadyBot = false;
                                appLogger.Info("Readybot is not running as NewSupporter = No and ExistingCommitments = Unable to lookup");
                            }

                            if (NewSupporter == "No" && ExistingCommitments != "Some")
                            {
                                RunReadyBot = false;
                                appLogger.Info("Readybot is not running as NewSupporter = No and ExistingCommitments != Some");
                            }

                            ReadyBotRulesConfiguration readyBotRules = new ReadyBotRulesConfiguration();
                            if (RunReadyBot)
                            {
                                UpdateLastCheckedTime(incidentId);
                                readyBotRules = DoReadyBotMatch(Cobj);//Run Readybot
                            }

                            string ReadyForSetup = "";
                            if (readyBotRules.AutomationLevel == "Check")
                            {
                                ReadyForSetup = "Check";
                                SetupStatus = "Held";
                                appLogger.Info("AutomationLevel is Check so setting up ReadyForSetup = Check and SetupStatus = Held");
                            }
                            else if (readyBotRules.AutomationLevel == "Setup")
                            {
                                ReadyForSetup = "Ready";
                                SetupStatus = "Not Started";
                                appLogger.Info("ReadyBot found matched RuleId:" + readyBotRules.RuleSetID);
                            }
                            else
                            {
                                ReadyForSetup = "No";
                            }

                            if (UpdatesApplied != "Yes")
                            {
                                //DX141 change
                                if (incidentdate.ThreadData.SupporterNameStatus == "Check")
                                {
                                    appLogger.Info("SupporterNameStatus is Check due to SupporterFirstName:" + incidentdate.ThreadData.SupporterFirstName + " OR SupporterLastName: " + incidentdate.ThreadData.SupporterLastName);
                                    ReadyForSetup = "No";
                                    readyBotRules.RuleSetID = "";
                                    SetupStatus = "Check";
                                }
                            }
                            else
                            {
                                appLogger.Info("UpdatesApplied value is: " + UpdatesApplied + " that's why not checking SupporterNameStatus.");
                            }



                            if (NewSupporter == "Check")
                            {
                                ReadyForSetup = "No";
                                readyBotRules.RuleSetID = "";
                            }
                            else if (BankAccountStatus == "Check")
                            {
                                ReadyForSetup = "No";
                                readyBotRules.RuleSetID = "";
                            }
                            #endregion

                            #region Comments Field Operation 
                            string Comment_msg = "IsUnique : " + IsUniqueStr + Environment.NewLine +
                                "ExistingCommitments : " + ExistingCommitments + Environment.NewLine +
                                "PaymentMethod : " + paymentMethod + Environment.NewLine +
                                "EmailAddressStatus : " + EmailAddressStatus + Environment.NewLine +
                                "PostalAddressStatus : " + PostalAddressStatus + Environment.NewLine +
                                "CountryOfResidence : " + CountryOfResidence + Environment.NewLine +
                                "PhoneNumberStatus : " + PhoneNumberStatus + Environment.NewLine +
                                "SupporterNameStatus : " + SupporterNameStatus + Environment.NewLine +
                                "ApplicationSource : " + ApplicationSource + Environment.NewLine +
                                "ChildAvailability : " + childAvailability + Environment.NewLine +
                                "GiftAidStatus : " + GiftAidStatus + Environment.NewLine +
                                "DigitalChoice : " + DigitalChoice + Environment.NewLine +
                                "AnnualGifts : " + AnnualGifts + Environment.NewLine +
                                "SupporterLinked : " + SupporterLinked + Environment.NewLine +
                                "SupporterType : " + SupporterType + Environment.NewLine +
                                "SupporterStatus : " + SupporterStatus + Environment.NewLine +
                                "PartnerOffice : " + PartnerOffice + Environment.NewLine +
                                "SponsorshipPlus : " + SponsorshipPlus + Environment.NewLine +
                                "VulnerableCircumstances : " + VulnerableCircumstances + Environment.NewLine +
                                "SafeguardingConcern : " + SafeguardingConcern + Environment.NewLine +
                                "DDPaymentChecks : " + DDPaymentChecks + Environment.NewLine +
                                "ReadyForSetup : " + ReadyForSetup + Environment.NewLine +
                                "MatchedOn : " + readyBotRules.RuleSetID;

                            bool IsMatched = false;
                            if (!string.IsNullOrEmpty(readyBotRules.RuleSetID))//DX155
                            {
                                IsMatched = true;
                            }
                            appLogger.Info("Checkbot Values found for updated in comment field :" + Comment_msg);
                            #endregion

                            //DX105
                            if (NewSupporter == "No" && (ExistingCommitments == "None" || ExistingCommitments == "Many"))
                            {
                                SetupStatus = "No Match";
                                appLogger.Info("SetupStatus = No Match due to NewSupporter == No && (ExistingCommitments == None || ExistingCommitments == Many)");
                            }

                            #region Update Incident
                            if (!string.IsNullOrEmpty(incidentdate.SetupStatus) && incidentdate.SetupStatus != "Not Started")
                            {
                                SetupStatus = incidentdate.SetupStatus;//If SetupStatus is Alreday set than do not change it
                                appLogger.Info("SetupStatus is already set to :" + incidentdate.SetupStatus);
                            }
                            if (SetupStatus == "Waiting" && IsPreferenceCreated)
                            {
                                SetupStatus = "Not Started";
                                RunReadyBot = false;
                                appLogger.Info("SetupStatus = Not Started and RunReadyBot = false due to SetupStatus == Waiting && IsPreferenceCreated");
                            }
                            else
                            {
                                appLogger.Info("Else condition for SetupStatus = Waiting && IsPreferenceCreated -> SetupStatus:" + SetupStatus + " IsPreferenceCreated " + IsPreferenceCreated);
                            }
                            if (!string.IsNullOrEmpty(SetupStatus))
                            {
                                appLogger.Info("Setting SetupStatus: " + SetupStatus);
                            }
                            else
                            {
                                appLogger.Info("Setting SetupStatus to No Match");
                            }

                            UpdateIncident(incidentId, Comment_msg, NewSupporterValues, BankAccountStatusCode, IsMatched, SetupStatus, updatesAppliedCode);
                            #endregion

                            #region Run SetupBot
                            if (ReadyForSetup == "Ready")
                            {
                                InitiateSetupBot(incidentId);
                            }
                            UpdateLastCheckedTime(incidentId);
                            #endregion
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in TriggerCheckBot: " + ex.Message);
                appLogger.Error(ex.StackTrace);
                appLogger.Error(ex.InnerException);
                UpdateDailySchedulerStatus("TriggerCheckBot", "Failed", "UPDATE_STATUS_FINAL");
            }

            UpdateDailySchedulerStatus("TriggerCheckBot", "Completed", "UPDATE_STATUS_FINAL");
            appLogger.Info("Checkbot process ended at " + DateTime.Now);
        }
        public void UpdateLastCheckedTime(long IncidentId)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                GenericField lastCheckedGenericField = null;
                lastCheckedGenericField = createGenericfield("lastchecked", createdatetimedataValue(Now), DataTypeEnum.DATETIME);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { lastCheckedGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("LastChecked is updated successfully");
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateLastCheckedTime: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public int getCommitmentCountonSupporterid(string Supporterid, out int depSubInProgressCount)
        {
            int TotalCommitment = 0;
            depSubInProgressCount = 0;
            try
            {
                List<string> SupporterGroupIds = new List<string>();
                SupporterGroupIds = getSupporterGroupIds(Supporterid);
                foreach (string supporterGroupid in SupporterGroupIds)
                {
                    int Count = 0;
                    int depSubInProgressCountForSGId = 0;
                    Count = CommitmentCountOnSupporterGroupId(supporterGroupid, out depSubInProgressCountForSGId);
                    TotalCommitment = TotalCommitment + Count;
                    depSubInProgressCount += depSubInProgressCountForSGId;
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error while getting total commitment count " + e.Message);
            }

            return TotalCommitment;
        }
        public int CommitmentCountOnSupporterGroupId(string supporterGroupId, out int depSubInProgressCountForSGId)
        {
            int count = 0;
            depSubInProgressCountForSGId = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select SCBS_CM.Commitment.ID, SCBS_CM.Commitment.Need.EndDate from SCBS_CM.Commitment where SCBS_CM.Commitment.SupporterGroup=" + supporterGroupId + " AND SCBS_CM.Commitment.EndDate IS NULL";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            count++;
                            string[] values = row.Split(',');

                            if (!string.IsNullOrEmpty(values[1]))
                            {
                                depSubInProgressCountForSGId++;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CommitmentCountOnSupporterGroupId " + e.Message);
            }
            return count;
        }
        public bool CheckIfSupporterSponsorshipCompletedStep4(long SupporterID, DateTime CreatedTime)
        {
            bool IsPreferenceUpdated = false;
            string fromTime = CreatedTime.AddHours(1).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");

            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT S.ID  FROM SCBS_SUP.SolicitCodes S WHERE S.Supporter=" + SupporterID + " AND S.CreatedTime >= '" + CreatedTime.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'") + "' AND S.CreatedTime <= '" + fromTime + "' order by ID desc";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        IsPreferenceUpdated = true;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfSupporterSponsorshipCompletedStep4: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IsPreferenceUpdated;
        }
        public ReadyBotRulesConfiguration DoReadyBotMatch(CheckBot Cobj)
        {
            appLogger.Info("Ready bot process started...");
            string ChildAvailability = Cobj.ChildAvailability == "Website (Sponsored)" ? "18 - Website (Sponsored)" : "";
            string DigitalChoice = Cobj.DigitalChoice == "Hybrid Photo Pack" ? "Hybrid Photo Only" : Cobj.DigitalChoice;
            ReadyBotRulesConfiguration readyBot = new ReadyBotRulesConfiguration();
            try
            {
                string Query = "SELECT * FROM `ReadyBotRulesConfiguration` WHERE CountryOffice = '" + Cobj.CountryOffice + "' AND ApplicationSource = '" + Cobj.ApplicationSource + "' AND SupporterType = '" + Cobj.SupporterType + "' AND NewSupporter = '" + Cobj.NewSupporter + "' AND IsUnique = '" + Cobj.IsUnique + "' AND ExistingCommitments = '" + Cobj.ExistingCommitments + "' AND UpdatesApplied = '" + Cobj.UpdatesApplied + "' AND SupporterNameStatus = '" + Cobj.SupporterNameStatus + "' AND DigitalChoice = '" + DigitalChoice + "' AND CountryOfResidence = '" + Cobj.CountryOfResidence + "' AND PostalAddressStatus = '" + Cobj.PostalAddressStatus + "' AND PhoneNumberStatus = '" + Cobj.PhoneNumberStatus + "' AND EmailAddressStatus = '" + Cobj.EmailAddressStatus + "' AND PaymentMethod = '" + Cobj.PaymentMethod + "' AND BankAccountStatus = '" + Cobj.BankAccountStatus + "' AND SponsorshipPlus = '" + Cobj.SponsorshipPlus + "' AND AnnualGifts = '" + Cobj.AnnualGifts + "' AND GiftAidStatus = '" + Cobj.GiftAidStatus + "' AND VulnerableCircumstances = '" + Cobj.VulnerableCircumstances + "' AND SafeguardingConcern = '" + Cobj.SafeguardingConcern + "' AND SupporterLinked = '" + Cobj.SupporterLinked + "' AND SupporterStatus = '" + Cobj.SupporterStatus + "' AND ChildAvailability = '" + ChildAvailability + "' ORDER BY ProcessingOrder ASC";


                appLogger.Info("ReadyBot Rule Query: " + Query);


                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand MyCommand2 = new MySqlCommand(Query, conn);
                    MySqlDataReader MyReader2;
                    MyReader2 = MyCommand2.ExecuteReader();
                    if (MyReader2.Read())
                    {
                        readyBot.RuleSetID = MyReader2["RuleSetID"].ToString();
                        readyBot.AutomationLevel = MyReader2["AutomationLevel"].ToString();
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FindReadyBotMatchedRule: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Ready bot process ended...");
            return readyBot;
        }
        public void UpdateIncident(long IncidentId, string comment, int NewSupporterValues, int BankAccountStatusCode, bool IsMatched, string SetupStatus, int updatesAppliedCode)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                GenericField CommentGenericField = null;
                CommentGenericField = createGenericfield("comments", createStringdataValue(comment), DataTypeEnum.STRING);


                GenericField newsupporterField = null;
                if (NewSupporterValues != 0)
                {
                    newsupporterField = createGenericfield("newsupporter", createNamedIdDataValue(NewSupporterValues), DataTypeEnum.NAMED_ID);
                }

                GenericField bankAccountStatusField = null;
                if (BankAccountStatusCode != 0)
                {
                    bankAccountStatusField = createGenericfield("bankaccountstatus", createNamedIdDataValue(BankAccountStatusCode), DataTypeEnum.NAMED_ID);
                }

                GenericField updatesAppliedCodeField = null;
                if (updatesAppliedCode != 0)
                {
                    updatesAppliedCodeField = createGenericfield("updatesapplied", createNamedIdDataValue(updatesAppliedCode), DataTypeEnum.NAMED_ID);
                }

                GenericField SetupStatusGenericField = null;

                SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["No Match"]), DataTypeEnum.NAMED_ID);

                if (IsMatched)
                {
                    if (string.IsNullOrEmpty(SetupStatus))
                    {
                        SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Not Started"]), DataTypeEnum.NAMED_ID);
                    }
                }

                if (!string.IsNullOrEmpty(SetupStatus))
                {
                    if (SetupStatus == "Blank")
                    {
                        SetupStatusGenericField = new GenericField();
                        SetupStatusGenericField.dataType = DataTypeEnum.STRING;
                        SetupStatusGenericField.dataTypeSpecified = true;
                        SetupStatusGenericField.name = "setupstatus";
                        SetupStatusGenericField.DataValue = null;
                    }
                    else
                    {
                        SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary[SetupStatus]), DataTypeEnum.NAMED_ID);
                    }
                }



                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { CommentGenericField, bankAccountStatusField, newsupporterField, SetupStatusGenericField, updatesAppliedCodeField };//, newsupporterField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                string ReferenceNo = GetIncidentReferenceNo(IncidentId.ToString());
                appLogger.Info("Incident updated for checkbot process with incidentid " + IncidentId + " with ReferenceNo: " + ReferenceNo);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in Updating incident for checkbot " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
            }
        }
        public List<string> getSupporterGroupIds(string Supporterid)
        {
            List<string> SupporterGroupsIds = new List<string>();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select SupporterGroupID from SCBS_SUP.SupporterGroupLinks where SCBS_SUP.SupporterGroupLinks.SupporterID=" + Supporterid;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        for (int i = 0; i < result.CSVTables[0].Rows.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(result.CSVTables[0].Rows[i].ToString()))
                            {
                                SupporterGroupsIds.Add(result.CSVTables[0].Rows[i].ToString());
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error in fetching supporter group ids" + e.Message);
            }
            return SupporterGroupsIds;
        }
        public int CommitmentCountOnSupporterGroupId(string supporterGroupId)
        {
            int count = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select count(SCBS_CM.Commitment.ID) from SCBS_CM.Commitment where SCBS_CM.Commitment.SupporterGroup=" + supporterGroupId;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        count = Convert.ToInt32(result.CSVTables[0].Rows[0]);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            return count;
        }
        public int getCommitmentCountonSupporterid(string Supporterid)
        {
            int TotalCommitment = 0;
            try
            {
                List<string> SupporterGroupIds = new List<string>();
                SupporterGroupIds = getSupporterGroupIds(Supporterid);
                foreach (string supporterGroupid in SupporterGroupIds)
                {
                    int Count = 0;
                    Count = CommitmentCountOnSupporterGroupId(supporterGroupid);
                    TotalCommitment = TotalCommitment + Count;
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error while getting total commitment count " + e.Message);
            }

            return TotalCommitment;
        }
        public Supporter fetchSupporterDetails(long contactsid)
        {
            Supporter sObj = new Supporter();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter details";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select Contact.customFields.c.status.lookupname,Contact.banner.importanceFlag.id,Contact.customFields.c.safeguarding_concern from Contact where Contact.ID =" + contactsid;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split(',');
                        sObj.Status = values[0];
                        if (!string.IsNullOrEmpty(values[1]))
                        {
                            sObj.bannerflagid = Convert.ToInt32(values[1]);
                        }
                        sObj.safeguarding_concern = values[2];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching contact status for Checkbot " + e.Message);
            }
            return sObj;
        }
        public SupporterPreferences FetchSupporterPreferences(long SupporterId)
        {
            SupporterPreferences spObj = new SupporterPreferences();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "SELECT S.ChannelPost.lookupname,S.Comment,S.SCSubType.lookupname  FROM SCBS_SUP.SolicitCodes S WHERE S.Supporter=" + SupporterId + " order by ID desc";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split(',');
                        spObj.Post = values[0];
                        spObj.Comments = values[1];
                        spObj.Type = values[2];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching Solicit Codes contact for Checkbot " + e.Message);
            }
            return spObj;
        }
        public IncidentData FetchAccountDetailsFromEnquiry(long incidentid)
        {
            IncidentData account = new IncidentData();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select Incident.customFields.c.accountname,Incident.customFields.c.bankaccountnumber,Incident.customFields.c.banksortcode,Incident.primaryContact.contact.name,Incident.threads.text,Incident.category.lookupName,Incident.Customfields.c.giftaidstatus.lookupName,Incident.Customfields.c.supportertype.lookupName,Incident.Customfields.c.country.lookupName,Incident.Customfields.c.sponsorshipplus.lookupname,Incident.Customfields.c.sponsorchildref,Incident.Customfields.c.sponsorshipplustype.lookupname,Incident.Customfields.c.newsupporter.lookupname,Incident.Customfields.c.bankaccountstatus.lookupname,Incident.Customfields.c.setupstatus.lookupname,Incident.PrimaryContact.Contact.ID,Incident.Customfields.c.updatesapplied.lookupname,Incident.Customfields.c.internalsubject from Incident where Incident.ID =" + incidentid + " order by Incident.threads.createdTime ASC limit 0,1";//4612074
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        account.AccountName = values[0];
                        account.AccountNo = values[1];
                        account.SortCode = values[2];
                        if (!string.IsNullOrEmpty(values[3]))
                        {
                            account.FirstName = values[3].Split(' ')[0];
                            account.LastName = values[3].Split(' ')[1];
                        }
                        if (!string.IsNullOrEmpty(values[4]) && values[4].Contains("Supporter Title"))
                        {
                            List<string> Columns = new List<string>();
                            account.ThreadText = values[4].Trim('\"');
                            Columns.AddRange(account.ThreadText.Split('\n'));
                            Dictionary<string, string> ThreadTextDic = new Dictionary<string, string>();
                            foreach (string data in Columns)
                            {
                                if (data.Contains(":"))
                                {
                                    string[] value = data.Split(':');
                                    ThreadTextDic.Add(value[0].Replace(" ", ""), value[1].TrimStart(' '));
                                }
                            }
                            IncidentThreadText ThreadData = GetObject<IncidentThreadText>(ThreadTextDic, "IncidentThreadText");
                            account.ThreadData = ThreadData;
                        }
                        account.Category = values[5];
                        account.giftaidstatus = values[6];
                        account.supportertype = values[7];
                        account.country = values[8];
                        account.sponsorshipplus = values[9] == "Yes" ? "Yes" : "No";
                        account.NeedKey = values[10];
                        account.sponsorshipplustype = values[11];
                        account.newsupporter = values[12];
                        account.bankaccountstatus = values[13];
                        account.SetupStatus = values[14];
                        account.ContactId = Convert.ToInt64(values[15]);
                        account.updatesapplied = values[16];
                        account.internalsubject = values[17];
                        account.createdTime = GetIncidentCreatedTime(incidentid);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchAccountDetailsFromEnquiry: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return account;
        }
        public DateTime GetIncidentCreatedTime(long IncidentId)
        {
            DateTime CreatedTime = new DateTime();
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get Incident Data";

            string Query = "SELECT Incident FROM Incident WHERE Incident.ID=" + IncidentId;
            Incident contactTemplate = new Incident();
            contactTemplate.PrimaryContact = new IncidentContact();

            RNObject[] objectTemplates = new RNObject[] { contactTemplate };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

            try
            {
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);

                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;

                if (rnObjects != null && rnObjects.Length > 0)
                {
                    foreach (QueryResultData queryResultData in queryObjects)
                    {
                        foreach (RNObject data in queryResultData.RNObjectsResult)
                        {
                            CreatedTime = data.CreatedTime;
                        }
                    }
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetIncidentCreatedTime: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return CreatedTime;
        }
        public long GetContactIdFromIncidentId(long incidentID)
        {
            long contactid = 0;
            #region Fetch Supporter Id
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select Incident.PrimaryContact.Contact.ID from Incident where Incident.ID =" + incidentID;//4610677
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        contactid = Convert.ToInt64(result.CSVTables[0].Rows[0]);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching primary contact for Checkbot " + e.Message);
            }
            #endregion
            return contactid;
        }
        public string CheckSupporterIsUnique(long IncidentId, long contactid)
        {
            string IsUniqueSupporter = "No";
            if (contactid != 0 && contactid != 104724)//temporary Supporter
            {
                SupporterDataModel sobj = new SupporterDataModel();
                sobj = FetchSupporter(contactid);
                try
                {
                    ClientInfoHeader info = new ClientInfoHeader();
                    info.AppID = "Fetch contact details";
                    APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                    string QueryEmail = " and contact.Emails.Address LIKE '%" + sobj.Email + "%'";
                    string QueryPostcode = " and Contact.CustomFields.c.postcode LIKE '%" + sobj.postcode + "%'";
                    string QueryStreet1 = " and Contact.CustomFields.c.street1 LIKE '%" + sobj.street1 + "%'";
                    String query = "SELECT contact.id FROM contact WHERE Contact.CustomFields.c.Status = 388 " + QueryEmail + QueryPostcode;//+ QueryStreet1;
                    byte[] byteArray;

                    CSVTableSet result;
                    head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                    if (result.CSVTables.Length > 0)
                    {
                        if (result.CSVTables[0].Rows.Length == 1)
                        {
                            IsUniqueSupporter = "Yes";
                        }
                    }
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in fetching matching supporter details for checkbot " + e.Message);
                }
            }
            else
            {
                IsUniqueSupporter = "N/A";
                appLogger.Info("Supporter is temporary with incident id " + IncidentId);
            }
            return IsUniqueSupporter;
        }
        public SupporterDataModel FetchSupporter(long contactid)
        {
            string Query = "SELECT contact FROM contact where id=" + contactid;
            SupporterDataModel spobj = new SupporterDataModel();
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get Supporter";

            Contact contactTemplate = new Contact();
            contactTemplate.CustomFields = new GenericObject() { };
            contactTemplate.Emails = new Email[] { };

            RNObject[] objectTemplates = new RNObject[] { contactTemplate };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();


            QueryResultData[] results;
            head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out results);

            if (results[0].RNObjectsResult.Length == 0)
            {
                return spobj;
            }
            foreach (RNObject RNsupporter in results[0].RNObjectsResult)
            {
                Contact contact = (Contact)RNsupporter;
                foreach (GenericField fetchchildfields in ((GenericObject)(contact.CustomFields.GenericFields[3].DataValue.Items[0])).GenericFields)
                {
                    switch (fetchchildfields.name)
                    {
                        case "postcode":
                            spobj.postcode = fetchchilddata(fetchchildfields);
                            break;
                        case "street1":
                            spobj.street1 = fetchchilddata(fetchchildfields);
                            break;
                    }
                }

                if (((Contact)(RNsupporter)).Emails != null)
                    spobj.Email = ((Contact)(RNsupporter)).Emails[0].Address;
                else
                    spobj.Email = "";
            }

            return spobj;
        }
        public bool CheckValidBankDetails(long IncidentId)
        {
            bool IsValidBankDetails = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch incident subject";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select Incident.subject from Incident where Incident.ID=" + IncidentId;//4610677
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string Subject = result.CSVTables[0].Rows[0];
                        if (Subject.Contains("No Money"))
                        {
                            IsValidBankDetails = false;
                        }
                        else if (Subject.Contains("Invalid Bank Account"))
                        {
                            IsValidBankDetails = false;
                        }
                        else
                        {
                            IsValidBankDetails = true;
                        }
                    }
                }
                else
                {
                    appLogger.Info("No Record found for validate bank account with incident id " + IncidentId);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in incident subject for Checkbot " + e.Message);
            }
            return IsValidBankDetails;
        }
        public void UpdateIncident(long IncidentId, string comment, string RecordID)
        {

            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                GenericField CommentGenericField = null;
                CommentGenericField = createGenericfield("comments", createStringdataValue(comment), DataTypeEnum.STRING);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { CommentGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("Incident updated for checkbot process with incidentid " + IncidentId);
                updateCheckBotinDB(RecordID);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in Updating incident for checkbot " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
            }
        }

        public void updateCheckBotinDB(string dbRecordId)
        {

            MySql.Data.MySqlClient.MySqlConnection conn = new MySql.Data.MySqlClient.MySqlConnection();
            try
            {
                string Now = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                string Query = "UPDATE ProcessScheduleManager set LastSuccessfulRunTime=NOW() WHERE ID=" + dbRecordId + "";
                MySqlCommand updateCommand = new MySqlCommand(Query, conn);
                MySqlDataReader dataReader;
                dataReader = updateCommand.ExecuteReader();     // Here our query will be executed and data saved into the database.
                conn.Close();
                appLogger.Info("ProcessScheduleManager updated successfully...");
            }
            catch (MySql.Data.MySqlClient.MySqlException ex)
            {
                appLogger.Error("Error in setting updating DB for CheckBot process with ID " + dbRecordId + " : " + ex.Message);
                appLogger.Error(ex.StackTrace);
            }
            finally
            {
                conn.Close();
            }

        }
        public void UpdateDailySchedulerStatus(string MethodName, string Status, string Type)
        {
            appLogger.Info("UpdateDailySchedulerStatus Started for MethodName: " + MethodName + " with status: " + Status);
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = null;
                if (Type == "UPDATE_STATUS")
                {
                    sql = "UPDATE DailyScheduler SET Status = '" + Status + "' WHERE MethodName='" + MethodName + "'";
                }
                else
                {
                    sql = "UPDATE DailyScheduler SET LastSuccessfulRunTime = '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',Status = '" + Status + "' WHERE MethodName='" + MethodName + "'";
                }

                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateDailySchedulerStatus with recordid :" + MethodName + " with status: " + Status + " with Error " + e.Message);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("UpdateDailySchedulerStatus ended.");
        }
        #endregion

        #region DX - 104 ReadyBot
        public CheckBot DoReadyBotProcess(CheckBot Cobj)
        {
            appLogger.Info("Ready bot process started...");
            CheckBot MatchObj = null;
            List<CheckBot> Rows = new List<CheckBot>();
            Rows = GetReadybotConfigurationRules();
            appLogger.Info("Total Readybot configuration rules found " + Rows.Count);
            foreach (CheckBot row in Rows)
            {
                int MatchedOn = 0;
                MatchObj = new CheckBot();
                if (row.NewSupporter.Equals(Cobj.NewSupporter))
                {
                    MatchedOn++;
                    MatchObj.NewSupporter = "Matched";
                }
                if (row.CountryOffice.Equals(Cobj.CountryOffice))
                {
                    MatchedOn++;
                    MatchObj.CountryOffice = "Matched";
                }
                if (row.ApplicationSource.Equals(Cobj.ApplicationSource))
                {
                    MatchedOn++;
                    MatchObj.ApplicationSource = "Matched";
                }
                if (row.SupporterType.Equals(Cobj.SupporterType))
                {
                    MatchedOn++;
                    MatchObj.SupporterType = "Matched";
                }
                if (row.IsUnique.Equals(Cobj.IsUnique))
                {
                    MatchedOn++;
                    MatchObj.IsUnique = "Matched";
                }
                if (row.ExistingCommitments.Equals(Cobj.ExistingCommitments))
                {
                    MatchedOn++;
                    MatchObj.ExistingCommitments = "Matched";
                }
                if (row.UpdatesApplied.Equals(Cobj.UpdatesApplied))
                {
                    MatchedOn++;
                    MatchObj.UpdatesApplied = "Matched";
                }
                if (row.SupporterNameStatus.Equals(Cobj.SupporterNameStatus))
                {
                    MatchedOn++;
                    MatchObj.SupporterNameStatus = "Matched";
                }
                if (row.DigitalChoice.Equals(Cobj.DigitalChoice))
                {
                    MatchedOn++;
                    MatchObj.DigitalChoice = "Matched";
                }
                if (row.CountryOfResidence.Equals(Cobj.CountryOfResidence))
                {
                    MatchedOn++;
                    MatchObj.CountryOfResidence = "Matched";
                }
                if (row.PostalAddressStatus.Equals(Cobj.PostalAddressStatus))
                {
                    MatchedOn++;
                    MatchObj.PostalAddressStatus = "Matched";
                }
                if (row.PhoneNumberStatus.Equals(Cobj.PhoneNumberStatus))
                {
                    MatchedOn++;
                    MatchObj.PhoneNumberStatus = "Matched";
                }
                if (row.EmailAddressStatus.Equals(Cobj.EmailAddressStatus))
                {
                    MatchedOn++;
                    MatchObj.EmailAddressStatus = "Matched";
                }
                if (row.PaymentMethod.Equals(Cobj.PaymentMethod))
                {
                    MatchedOn++;
                    MatchObj.PaymentMethod = "Matched";
                }

                if (row.BankAccountStatus.Equals(Cobj.BankAccountStatus))
                {
                    MatchedOn++;
                    MatchObj.BankAccountStatus = "Matched";
                }
                if (row.SponsorshipPlus.Equals(Cobj.SponsorshipPlus))
                {
                    MatchedOn++;
                    MatchObj.SponsorshipPlus = "Matched";
                }
                if (row.AnnualGifts.Equals(Cobj.AnnualGifts))
                {
                    MatchedOn++;
                    MatchObj.AnnualGifts = "Matched";
                }
                if (row.GiftAidStatus.Equals(Cobj.GiftAidStatus))
                {
                    MatchedOn++;
                    MatchObj.GiftAidStatus = "Matched";
                }
                if (row.VulnerableCircumstances.Equals(Cobj.VulnerableCircumstances))
                {
                    MatchedOn++;
                    MatchObj.VulnerableCircumstances = "Matched";
                }
                if (row.SafeguardingConcern.Equals(Cobj.SafeguardingConcern))
                {
                    MatchedOn++;
                    MatchObj.SafeguardingConcern = "Matched";
                }
                if (row.SupporterLinked.Equals(Cobj.SupporterLinked))
                {
                    MatchedOn++;
                    MatchObj.SupporterLinked = "Matched";
                }
                if (row.SupporterStatus.Equals(Cobj.SupporterStatus))
                {
                    MatchedOn++;
                    MatchObj.SupporterStatus = "Matched";
                }
                if (row.ChildAvailability.Equals(Cobj.ChildAvailability))
                {
                    MatchedOn++;
                    MatchObj.ChildAvailability = "Matched";
                }
                MatchObj.AutomationLevel = row.AutomationLevel;
                MatchObj.MatchedOn = row.RuleSetID;
                if (MatchedOn == 23)
                {
                    break;
                }
                else
                {
                    MatchObj.MatchedOn = "";
                    MatchObj.AutomationLevel = "No";
                }
            }
            appLogger.Info("Ready bot process ended...");
            return MatchObj;
        }
        public List<CheckBot> GetReadybotConfigurationRules()
        {
            List<CheckBot> Clist = new List<CheckBot>();
            MySqlConnection conn = new MySqlConnection();
            try
            {
                conn.ConnectionString = mycuk_tcpt4ConnectionString;//cukdevco_live
                conn.Open();
                string Query = "Select * from `ReadyBotRulesConfiguration` Order by ProcessingOrder desc";
                MySqlCommand MyCommand2 = new MySqlCommand(Query, conn);
                MySqlDataReader MyReader2;
                MyReader2 = MyCommand2.ExecuteReader();
                while (MyReader2.Read())
                {
                    CheckBot CObj = new CheckBot();
                    CObj.RuleSetID = MyReader2["RuleSetID"].ToString();
                    CObj.Description = MyReader2["Description"].ToString();
                    CObj.ProcessingOrder = MyReader2["ProcessingOrder"].ToString();
                    CObj.AutomationLevel = MyReader2["AutomationLevel"].ToString();
                    CObj.CountryOffice = MyReader2["CountryOffice"].ToString();
                    CObj.ApplicationSource = MyReader2["ApplicationSource"].ToString();
                    CObj.SupporterType = MyReader2["SupporterType"].ToString();
                    CObj.NewSupporter = MyReader2["NewSupporter"].ToString();
                    CObj.IsUnique = MyReader2["IsUnique"].ToString();
                    CObj.ExistingCommitments = MyReader2["ExistingCommitments"].ToString();
                    CObj.UpdatesApplied = MyReader2["UpdatesApplied"].ToString();
                    CObj.SupporterNameStatus = MyReader2["SupporterNameStatus"].ToString();
                    CObj.DigitalChoice = MyReader2["DigitalChoice"].ToString();
                    CObj.CountryOfResidence = MyReader2["CountryOfResidence"].ToString();
                    CObj.PostalAddressStatus = MyReader2["PostalAddressStatus"].ToString();
                    CObj.PhoneNumberStatus = MyReader2["PhoneNumberStatus"].ToString();
                    CObj.EmailAddressStatus = MyReader2["EmailAddressStatus"].ToString();
                    CObj.PaymentMethod = MyReader2["PaymentMethod"].ToString();
                    CObj.BankAccountStatus = MyReader2["BankAccountStatus"].ToString();
                    CObj.SponsorshipPlus = MyReader2["SponsorshipPlus"].ToString();
                    CObj.AnnualGifts = MyReader2["AnnualGifts"].ToString();
                    CObj.GiftAidStatus = MyReader2["GiftAidStatus"].ToString();
                    CObj.VulnerableCircumstances = MyReader2["VulnerableCircumstances"].ToString();
                    CObj.SafeguardingConcern = MyReader2["SafeguardingConcern"].ToString();
                    CObj.SupporterLinked = MyReader2["SupporterLinked"].ToString();
                    CObj.SupporterStatus = MyReader2["SupporterStatus"].ToString();
                    CObj.ChildAvailability = MyReader2["ChildAvailability"].ToString();
                    Clist.Add(CObj);
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in reading Ready Bot Rules Configuration from DB : " + e.Message);
                appLogger.Error(e.StackTrace);
            }
            finally
            {
                conn.Close();
            }
            return Clist;
        }
        #endregion

        #region DX - 108 SetupBot
        public void FindSetupBotRecords()
        {
            try
            {
                appLogger.Info("SetupBot process started...");
                UpdateDailySchedulerStatus("TriggerSetupBot", "In Progress", "UPDATE_STATUS");
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                string LastSuccessfulRunTime = GetDailySchedulerLastSuccessfullRunTime("TriggerSetupBot");
                if (!string.IsNullOrEmpty(LastSuccessfulRunTime))
                {
                    DateTime LastSuccessfulRunTime_GMT = DateTime.ParseExact(LastSuccessfulRunTime, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'", CultureInfo.InvariantCulture);
                    LastSuccessfulRunTime = LastSuccessfulRunTime_GMT.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                }
                string Last15Minutes = Now.AddMinutes(-15).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                string fromTime = string.IsNullOrEmpty(LastSuccessfulRunTime) ? Last15Minutes : LastSuccessfulRunTime;

                ClientInfoHeader info = new ClientInfoHeader();

                info.AppID = "Get Incident Data";

                string Query = "SELECT Incident FROM Incident WHERE Incident.queue.lookupname='Inbound Applications' AND (Incident.Customfields.c.setupstatus.lookupName = 'Not Started' OR Incident.Customfields.c.setupstatus.lookupName = 'Released') AND (Incident.CreatedTime >= '" + fromTime + "' OR Incident.UpdatedTime >= '" + fromTime + "') AND Incident.customFields.c.comments IS NOT NULL";

                Incident contactTemplate = new Incident();
                RNObject[] objectTemplates = new RNObject[] { contactTemplate };
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);
                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;
                if (rnObjects != null && rnObjects.Length > 0)
                {
                    appLogger.Info("Total Records : " + rnObjects.Length + " for setupbot process with date range between :" + Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'") + " To " + fromTime);
                    foreach (QueryResultData queryResultData in queryObjects)
                    {
                        foreach (RNObject data in queryResultData.RNObjectsResult)
                        {
                            Incident incident = (Incident)data;
                            long IncidentId = incident.ID.id;
                            appLogger.Info("Starting SetupBot ");
                            if (IncidentId != 0)
                            {
                                InitiateSetupBot(IncidentId);
                            }
                        }
                    }
                }
                else
                {
                    appLogger.Info("No records found for SetupBot with date range between :" + DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'") + " To " + fromTime);
                }

                UpdateDailySchedulerStatus("TriggerSetupBot", "Completed", "UPDATE_STATUS_FINAL");
                appLogger.Info("SetupBot process ended...");
            }
            catch (Exception e)
            {
                UpdateDailySchedulerStatus("TriggerSetupBot", "Completed", "UPDATE_STATUS_FINAL");
                appLogger.Error("Error in FindSetupBotRecords: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public int GetIncidentThreadCount(string IncidentID)
        {
            int Count = 0;
            try
            {

                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Incident details";
                string query = "SELECT count(Incident.threads.text) FROM Incident where Incident.ID=" + IncidentID;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        Count = Convert.ToInt32(result.CSVTables[0].Rows[0]);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetListOfArrearsIncident: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return Count;
        }
        public void GetSetUpbotRecords()
        {
            appLogger.Info("SetupBot process started...");
            string fromTime = DateTime.Now.AddDays(-1).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
            try
            {
                appLogger.Info("Fetching Incident for SetupBot process");
                List<long> listresobj = new List<long>();
                ClientInfoHeader info = new ClientInfoHeader();

                info.AppID = "Get Incident Data";
                string Query = "SELECT Incident FROM Incident WHERE Incident.queue.lookupname='Inbound Applications' AND Incident.statusWithType.statusType.lookupname='Unresolved' AND (Incident.CreatedTime >= '" + fromTime + "' OR Incident.UpdatedTime>= '" + fromTime + "') AND Incident.customFields.c.comments IS NOT NULL";

                Incident contactTemplate = new Incident();
                RNObject[] objectTemplates = new RNObject[] { contactTemplate };
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);
                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;
                if (rnObjects != null && rnObjects.Length > 0)
                {
                    appLogger.Info("Total Records : " + rnObjects.Length + " for setupbot process from time :" + fromTime);
                    //fetch ReadyForSetup 
                    string ReadyForSetup = "";
                    string SetupStatus = "";

                    if (ReadyForSetup == "Ready" && (SetupStatus == "In Progress" || SetupStatus == "Succeeded"))
                    {

                    }
                    else if (ReadyForSetup == "Ready" && SetupStatus == "Failed")
                    {

                    }
                    else if (ReadyForSetup == "Ready" && SetupStatus == "" && SetupStatus == "Not Started")
                    {

                    }
                    else if (ReadyForSetup == "Ready" && SetupStatus == "Retry")
                    {

                    }

                }
            }
            catch (Exception e)
            {

            }
            appLogger.Info("SetupBot process ended...");
        }
        public void InitiateSetupBot(long IncidentID)
        {
            appLogger.Info("SetupBot process statarted with incidentId: " + IncidentID + " at :" + DateTime.Now);
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get incidents data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = null;
                query = "SELECT Incident.id,Incident.customFields.c.setupstatus.lookupname,Incident.customFields.c.setupguid,Incident.customFields.c.comments,Incident.Customfields.c.sponsorchildref,Incident.customFields.c.accountname,Incident.customFields.c.bankaccountnumber,Incident.customFields.c.banksortcode,Incident.primaryContact.contact,Incident.Customfields.c.sponsorshipplus,Incident.Customfields.c.giftaidstatus,Incident.Customfields.c.supprefname,Incident.Customfields.c.sponsorshipplustype.lookupName,Incident.threads.text,Incident.Customfields.c.sponsorshipplus,Incident.Customfields.c.lettersalutation,Incident.Customfields.c.dddateprefer.lookupName,Incident.Customfields.c.newsupporter.lookupName,Incident.Customfields.c.bankaccountstatus.lookupName,Incident.Customfields.c.updatesapplied.lookupname FROM Incident WHERE Incident.ID =" + IncidentID + " order by Incident.threads.createdTime ASC limit 0,1";
                
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            OperationParams OPObj = new OperationParams();
                            string[] values = row.Split('^');
                            string IncidentId = values[0];
                            /*int NumberOfThread = GetIncidentThreadCount(IncidentId);
                            if (NumberOfThread > 1)
                            {
                                appLogger.Info("Skipping Enquiry as it contains more than 1 thread with incidentId" + IncidentId);
                                continue;
                            }*/
                            string SetupStatus = values[1];
                            string SetupGUID = values[2];
                            string CommentTxt = values[3];
                            string NeedKey = values[4];
                            OPObj.Needkey = NeedKey;
                            OPObj.AccountName = values[5];
                            OPObj.AccountNo = values[6];
                            OPObj.SortCode = values[7];
                            if (!string.IsNullOrEmpty(values[8]))
                            {
                                OPObj.Contactid = Convert.ToInt64(values[8]);
                            }

                            #region DX181 - Automating multiple sponsorship applications

                            int OpenSponsorshipAppCount = GetSupporterOpenSponsorshipApplicationCount(OPObj.Contactid);
                            if (OpenSponsorshipAppCount > 1)
                            {
                                //Update setupstatus to unable to resolve
                                UpdateSetupBotSetupStatus(Convert.ToInt64(IncidentId), "Unable to Setup");
                                UpdateSponsorshipAppThread(null, Convert.ToInt64(IncidentId), "Multiple applications for this supporter need to be set up manually");
                                continue;
                            }


                            #endregion

                            OPObj.IncidentId = Convert.ToInt64(IncidentId);
                            OPObj.SponsorshipPlus = values[9];
                            OPObj.giftaidstatus = values[10];
                            OPObj.SupporterPreferredName = values[11];
                            OPObj.sponsorshipplustype = values[12];
                            string Threads_text = values[13];
                            OPObj.sponsorshipplus = values[14];
                            OPObj.ApplicationCode = values[15];
                            OPObj.dddateprefer = values[16];
                            string ReadyForSetup = "";// We Need this field in RN
                            bool StartSetupBot = false;
                            CheckBot CheckBotObj = new CheckBot();
                            CheckBot ThreadObj = new CheckBot();
                            CheckBotObj = GetStringToObjects(CommentTxt, "Comment");
                            ThreadObj = GetStringToObjects(Threads_text, "Thread");
                            CheckBotObj.NewSupporter = values[17];
                            CheckBotObj.BankAccountStatus = values[18];
                            CheckBotObj.UpdatesApplied = values[19];
                            OPObj.NewSupporter = CheckBotObj.NewSupporter;
                            OPObj.BirthdayAmount = ThreadObj.ThreadObjects.Birthday;
                            OPObj.ChritmasAmount = ThreadObj.ThreadObjects.Christmas;

                            if (!string.IsNullOrEmpty(ThreadObj.ThreadObjects.YearofBirth))
                            {
                                int YearOfBirth = Convert.ToInt32(ThreadObj.ThreadObjects.YearofBirth);
                                int CurrentYear = DateTime.Now.Year;
                                if (!(CurrentYear - YearOfBirth >= 19))
                                {
                                    appLogger.Info("SetupBot not started as supporter age is less than 19 with Year of birth: " + YearOfBirth + " with incident id: " + IncidentId);
                                    UpdateSetupBotSetupStatus(Convert.ToInt64(IncidentId), "Failed");
                                    continue;
                                }
                            }

                            string ByDefault_FFD = "Recurring Gifts First Mandate";
                            #region DX174 FIRST INSTALLMENT DATE CALCULATION – NEW AND EXISTING SUPPORTERS
                            if (CheckBotObj.NewSupporter == "Yes")
                            {
                                //Find First Installment Date For New Supporter
                                if (CheckBotObj.NewSupporter == "Yes" && CheckBotObj.DigitalChoice == "Traditional" && (OPObj.BirthdayAmount == "0" && OPObj.ChritmasAmount == "0") && OPObj.sponsorshipplus != "1" && CheckBotObj.EmailAddressStatus == "No" && CheckBotObj.CountryOfResidence == "UK" && CheckBotObj.PostalAddressStatus == "Sufficient")
                                {
                                    //USE KINGSLINE NOTICE PERIOD
                                    ByDefault_FFD = "Recurring Gifts via Kingsline";
                                    //UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Letter");
                                }
                                else if (CheckBotObj.NewSupporter == "Yes" && CheckBotObj.DigitalChoice == "Traditional" && (OPObj.BirthdayAmount == "0" && OPObj.ChritmasAmount == "0") && OPObj.sponsorshipplus != "1" && CheckBotObj.EmailAddressStatus == "Yes")
                                {
                                    ByDefault_FFD = "Recurring Gifts First Mandate";
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Email");
                                }
                                else if (CheckBotObj.NewSupporter == "Yes" && CheckBotObj.DigitalChoice == "Traditional" && ((OPObj.BirthdayAmount != "0" || OPObj.ChritmasAmount != "0") || (OPObj.sponsorshipplus == "1" || OPObj.sponsorshipplustype == "Yes – Hillsong sponsorship Plus")) && CheckBotObj.EmailAddressStatus == "No")
                                {
                                    ByDefault_FFD = "Recurring Gifts via Kingsline";
                                    //UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Letter");
                                }
                                else if (CheckBotObj.NewSupporter == "Yes" && CheckBotObj.DigitalChoice == "Traditional" && ((OPObj.BirthdayAmount != "0" || OPObj.ChritmasAmount != "0") || (OPObj.sponsorshipplus == "1" || OPObj.sponsorshipplustype == "Yes – Hillsong sponsorship Plus")) && CheckBotObj.EmailAddressStatus == "Yes")
                                {
                                    ByDefault_FFD = "Recurring Gifts First Mandate";
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Email");
                                }
                                else if (CheckBotObj.NewSupporter == "Yes" && (CheckBotObj.DigitalChoice == "Digital" || CheckBotObj.DigitalChoice == "Hybrid Welcome Pack" || CheckBotObj.DigitalChoice == "Hybrid Photo Pack") && CheckBotObj.EmailAddressStatus == "No")
                                {
                                    UpdateSetupBotFieldsinIncident(Convert.ToInt64(IncidentId), null, true);//Set setupStatus to Failed
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Blank");
                                    continue;
                                }
                                else if (CheckBotObj.NewSupporter == "Yes" && (CheckBotObj.DigitalChoice == "Digital" || CheckBotObj.DigitalChoice == "Hybrid Welcome Pack" || CheckBotObj.DigitalChoice == "Hybrid Photo Pack") && CheckBotObj.EmailAddressStatus == "Yes")
                                {
                                    ByDefault_FFD = "Recurring Gifts First Mandate";
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Email");
                                }
                            }
                            else
                            {
                                //Find First Installment Date For Existing Supporter
                                if (CheckBotObj.NewSupporter == "No" && CheckBotObj.DigitalChoice == "Traditional" && ((OPObj.BirthdayAmount == "0" && OPObj.ChritmasAmount == "0") || OPObj.sponsorshipplus == "1" || OPObj.sponsorshipplustype == "Yes – Hillsong sponsorship Plus") && CheckBotObj.EmailAddressStatus == "Yes")
                                {
                                    ByDefault_FFD = "Recurring Gifts Existing Mandate";
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Email");
                                }
                                else if (CheckBotObj.NewSupporter == "No" && CheckBotObj.DigitalChoice == "Traditional" && (OPObj.BirthdayAmount == "0" && OPObj.ChritmasAmount == "0") && OPObj.sponsorshipplus != "1" && CheckBotObj.EmailAddressStatus == "No" && CheckBotObj.CountryOfResidence == "UK" && CheckBotObj.PostalAddressStatus == "Sufficient")
                                {
                                    ByDefault_FFD = "Recurring Gifts via Kingsline";
                                    //UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Letter");
                                }
                                else if (CheckBotObj.NewSupporter == "No" && (CheckBotObj.DigitalChoice == "Digital" || CheckBotObj.DigitalChoice == "Hybrid Welcome Pack" || CheckBotObj.DigitalChoice == "Hybrid Photo Pack") && CheckBotObj.EmailAddressStatus == "Yes")
                                {
                                    ByDefault_FFD = "Recurring Gifts Existing Mandate";
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Email");
                                }
                                else if (CheckBotObj.NewSupporter == "No" && (CheckBotObj.DigitalChoice == "Digital" || CheckBotObj.DigitalChoice == "Hybrid Welcome Pack" || CheckBotObj.DigitalChoice == "Hybrid Photo Pack") && CheckBotObj.EmailAddressStatus == "No")
                                {
                                    UpdateSetupBotSetupStatus(Convert.ToInt64(IncidentId), "Failed");
                                    UpdateAutomatedResponse(Convert.ToInt64(IncidentId), "Blank");
                                    continue;
                                }
                            }
                            #endregion

                            OPObj.MandateType = ByDefault_FFD;
                            ReadyForSetup = CheckBotObj.ReadyForSetup.Trim();
                            
                            if (!string.IsNullOrEmpty(SetupGUID))
                            {
                                appLogger.Info("SetupBot not started as SetupGUID is already set in enquiry AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                                continue;
                            }

                            /*if (ReadyForSetup == "Check")//DX155
                            {
                                appLogger.Info("SetupBot not started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                                UpdateSetupBotStatusCheck(Convert.ToInt64(IncidentId));
                                continue;
                            }*/

                            if ((ReadyForSetup == "Ready" || ReadyForSetup == "Check") && (SetupStatus == "In Progress" || SetupStatus == "Succeeded"))
                            {
                                appLogger.Info("SetupBot not started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                                continue;
                            }
                            else if ((ReadyForSetup == "Ready" || ReadyForSetup == "Check") && SetupStatus == "Failed")
                            {
                                appLogger.Info("SetupBot not started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                                continue;
                            }
                            else if ((ReadyForSetup == "Ready" || ReadyForSetup == "Check") &&  SetupStatus == "Not Started")
                            {
                                StartSetupBot = true;
                                appLogger.Info("SetupBot started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                            }
                            /*else if ((ReadyForSetup == "Ready" || ReadyForSetup == "Check") && SetupStatus == "Released")
                             {
                                 StartSetupBot = true;
                                 appLogger.Info("SetupBot started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                             }*/
                            else if (ReadyForSetup == "Ready" && SetupStatus == "Retry")
                            {
                                //StartSetupBot = true;
                                appLogger.Info("SetupBot started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                                continue;
                            }
                            else if (SetupStatus == "Released")
                            {
                                StartSetupBot = true;
                                appLogger.Info("SetupBot started as SetupStatus is :" + SetupStatus + " AND ReadyForSetup " + ReadyForSetup + " with incident id: " + IncidentId);
                            }
                            
                            if (StartSetupBot)
                            {
                                //Starte SetupBot
                                Guid Guid = Guid.NewGuid();
                                string SEFGUID = !string.IsNullOrEmpty(SetupGUID) ? SetupGUID : "{" + Guid.ToString().ToUpper() + "}";
                                InsertSEFOperationResponse(SEFGUID, "SetupBot Process started...", "SetupBot", true); 
                                OPObj.SEFGUID = SEFGUID;
                                UpdateSetupBotFieldsinIncident(Convert.ToInt64(IncidentId), SEFGUID, false);
                                bool isValidData = Verifydata(CheckBotObj);//verify data
                                if (!isValidData)
                                {
                                    appLogger.Info("SetupBot failed in verifing data for incidentid :" + IncidentId);
                                    UpdateSetupBotFieldsinIncident(Convert.ToInt64(IncidentId), SEFGUID, true);
                                    InsertSEFOperationResponse(SEFGUID, "SetupBot failed in verification", "SetupBot", false);
                                    continue;
                                }
                                string NeedStatus = FetchChildStatus(NeedKey);
                                if (NeedStatus != "Website (Sponsored)")
                                {
                                    appLogger.Info("SetupBot failed for incidentid :" + IncidentId + " because needStatus is: " + NeedStatus);
                                    UpdateSetupBotFieldsinIncident(Convert.ToInt64(IncidentId), SEFGUID, true); 
                                    InsertSEFOperationResponse(SEFGUID, "SetupBot failed as needstatus is invalid", "SetupBot", false);
                                    continue;
                                }
                                AssignAndSendDatatoCIFSubscriberForIndividual(OPObj);
                                InsertSEFOperationResponse(SEFGUID, "SetupBot Process ended...", "SetupBot", true);
                            }

                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in InitiateSetupBot getting incident data for setupbot :" + e.Message + " with incidentId:" + IncidentID);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            appLogger.Info("SetupBot process ended with incidentId: " + IncidentID + " at :" + DateTime.Now);
        }
        public int GetSupporterOpenSponsorshipApplicationCount(long ContactId)
        {
            int Count = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get Incident data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "SELECT COUNT(ID) FROM incident WHERE primaryContact.contact = " + ContactId + " AND Incident.queue.lookupname='Inbound Applications' AND Incident.statusWithType.statusType.lookupname='Unresolved'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        Count = Convert.ToInt32(result.CSVTables[0].Rows[0]);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterOpenSponsorshipApplicationCount : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Count;
        }
        private void UpdateSetupBotSetupStatus(long IncidentId, string Status)
        {
            appLogger.Info("Updating SetupBotStatus with status: "+Status+" with incident: "+ IncidentId);
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                GenericField SetupStartedGenericField = null;
                GenericField SetupEndateGenericField = null;
                GenericField SetupStatusGenericField = null;
                SetupEndateGenericField = createGenericfield("setupended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);
                SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary[Status]), DataTypeEnum.NAMED_ID);
                SetupStartedGenericField = createGenericfield("setupstarted", createdatetimedataValue(Now), DataTypeEnum.DATETIME);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStartedGenericField, SetupStatusGenericField, SetupEndateGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("Incident updated for SetupBot process with incidentid " + IncidentId + " for Status : " + Status);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateSetupBotSetupStatus: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void UpdateAutomatedResponse(long IncidentId, string Type)
        {
            try
            {
                int AutomatedResponseVal = 0;

                switch (Type)
                {
                    case "Blank":
                        AutomatedResponseVal = 0;
                        break;
                    case "None":
                        AutomatedResponseVal = 1764;//tst1 1732 prod 1764
                        break;
                    case "Email":
                        AutomatedResponseVal = 1765;//tst1 1733 prod 1765
                        break;
                    case "Letter":
                        //AutomatedResponseVal = 1734;
                        break;
                }

                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };
                GenericField AutomatedResponseGenericField = null;

                if (AutomatedResponseVal == 0)
                {
                    AutomatedResponseGenericField = new GenericField();
                    AutomatedResponseGenericField.dataType = DataTypeEnum.STRING;
                    AutomatedResponseGenericField.dataTypeSpecified = true;
                    AutomatedResponseGenericField.name = "automatedresponse";
                    AutomatedResponseGenericField.DataValue = null;
                }
                else
                {
                    AutomatedResponseGenericField = createGenericfield("automatedresponse", createNamedIdDataValue(AutomatedResponseVal), DataTypeEnum.NAMED_ID);
                }


                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { AutomatedResponseGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info("Incident AutomatedResponse updated with incidentid " + IncidentId + " for Type: " + Type);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateAutomatedResponse: " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public void UpdateSetupBotStatusCheck(long IncidentId)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };


                GenericField SetupStatusGenericField = null;
                SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1661), DataTypeEnum.NAMED_ID);//Held

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info("Incident updated for SetupBot process with incidentid " + IncidentId + " for Check");
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in Updating incident for SetupBot " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
            }
        }
        public string FetchChildStatus(string NeedKey)
        {
            string childStatus = "";
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter details";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "SELECT SCBS_CHILD.Need.NeedStatus.lookupname FROM SCBS_CHILD.Need WHERE SCBS_CHILD.Need.NeedKey = '" + NeedKey + "'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        childStatus = result.CSVTables[0].Rows[0];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching Need status for Checkbot " + e.Message);
            }
            return childStatus;
        }
        public void UpdateSetupBotFieldsinIncident(long IncidentId, string GUID, bool Failed)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                GenericField SetupStartedGenericField = null;
                GenericField SetupGUIDGenericField = null;
                GenericField SetupEndateGenericField = null;
                GenericField SetupStatusGenericField = null;
                if (Failed)
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1693), DataTypeEnum.NAMED_ID);//Failed
                    SetupEndateGenericField = createGenericfield("setupended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);
                }
                else
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(355), DataTypeEnum.NAMED_ID);// In Progress

                    SetupStartedGenericField = createGenericfield("setupstarted", createdatetimedataValue(Now), DataTypeEnum.DATETIME);

                    SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(GUID), DataTypeEnum.STRING);
                }



                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStartedGenericField, SetupStatusGenericField, SetupGUIDGenericField, SetupEndateGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                string Type = Failed ? "Failed State" : "Initial State";
                appLogger.Info("Incident updated for SetupBot process with incidentid " + IncidentId + " for " + Type);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in Updating incident for SetupBot " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
            }
        }
        public CheckBot GetCommentTxtData(string CommentTxt)
        {
            List<string> Columns = new List<string>();
            string ThreadText = CommentTxt.Trim('\"');
            Columns.AddRange(ThreadText.Split('\n'));
            Dictionary<string, string> CommentTextDic = new Dictionary<string, string>();
            foreach (string data in Columns)
            {
                if (data.Contains(":"))
                {
                    string[] value = data.Split(':');
                    CommentTextDic.Add(value[0].Replace(" ", ""), value[1].TrimStart(' '));
                }
            }
            CheckBot CommentTextData = GetObject<CheckBot>(CommentTextDic, "CheckBot");
            return CommentTextData;
        }
        public CheckBot GetStringToObjects(string StrText, string type)
        {
            CheckBot Objects = new CheckBot();
            List<string> Columns = new List<string>();
            string ThreadText = StrText.Trim('\"');
            Columns.AddRange(ThreadText.Split('\n'));
            Dictionary<string, string> StringDic = new Dictionary<string, string>();
            foreach (string data in Columns)
            {
                if (data.Contains(":"))
                {
                    string[] value = data.Split(':');
                    StringDic.Add(value[0].Replace(" ", ""), value[1].TrimStart(' '));
                }
            }
            if (type == "Comment")
            {
                Objects = GetObject<CheckBot>(StringDic, "CheckBot");
            }
            else
            {
                Objects.ThreadObjects = GetObject<IncidentThreadText>(StringDic, "IncidentThreadText");
            }
            return Objects;
        }
        public string GetFFD()
        {
            appLogger.Info("Get FFD started.");
            string FFD = "";
            MySqlConnection conn = new MySqlConnection(MyConnectionString);
            try
            {
                string query = "SELECT * FROM cirlBatch WHERE MandateType='Recurring Gifts First Mandate'";
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    FFD = reader["NextInstallmaneDate"].ToString();
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetFFD " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Get FFD ended.");
            return FFD;
        }
        public bool Verifydata(CheckBot Cobj)
        {
            bool DataIsValid = false;
            if (Cobj.PartnerOffice == "UK" && Cobj.ApplicationSource == "Web" && Cobj.SupporterType == "Individual" && (Cobj.NewSupporter == "Yes" || Cobj.NewSupporter == "No") && Cobj.IsUnique == "Yes" && Cobj.SupporterNameStatus == "Sufficient" && Cobj.CountryOfResidence == "UK" && Cobj.PostalAddressStatus == "Sufficient" && Cobj.EmailAddressStatus == "Yes" && Cobj.PaymentMethod == "Direct Debit Monthly" && Cobj.BankAccountStatus == "UK Valid Personal" && Cobj.VulnerableCircumstances == "No" && Cobj.SafeguardingConcern == "No" && Cobj.SupporterLinked == "Yes" && Cobj.SupporterStatus == "Active" && (Cobj.UpdatesApplied == "N/A" || Cobj.UpdatesApplied == "Yes"))//&& Cobj.PhoneNumberStatus == "UK Mobile"
            {
                DataIsValid = true;
            }
            return DataIsValid;
        }
        public SEFModel GetEmailAndPhoneNo(long contactid)
        {
            string Query = "SELECT contact FROM contact where id=" + contactid;
            SEFModel spobj = new SEFModel();
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get Supporter";

            Contact contactTemplate = new Contact();
            contactTemplate.CustomFields = new GenericObject() { };
            contactTemplate.Emails = new Email[] { };
            contactTemplate.Phones = new Phone[] { };

            RNObject[] objectTemplates = new RNObject[] { contactTemplate };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();


            QueryResultData[] results;
            head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out results);

            if (results[0].RNObjectsResult.Length == 0)
            {
                return spobj;
            }
            foreach (RNObject RNsupporter in results[0].RNObjectsResult)
            {
                Contact contact = (Contact)RNsupporter;
                if (((Contact)(RNsupporter)).Emails != null)
                    spobj.email = ((Contact)(RNsupporter)).Emails[0].Address;
                else
                    spobj.email = "";
                if (((Contact)(RNsupporter)).Phones != null)
                    spobj.mobilephone = ((Contact)(RNsupporter)).Phones[0].Number;
                else
                    spobj.mobilephone = "";
            }

            return spobj;
        }
        public SEFModel GetSupporterAndChildData(long contactid, string Needkey)
        {
            SEFModel sefObj = new SEFModel();
            SEFModel EPObj = new SEFModel();
            SEFModel ChildObj = new SEFModel();
            ChildObj = GetChildData(Needkey);
            EPObj = GetEmailAndPhoneNo(contactid);
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT c.customfields.c.titlename.lookupname,c.customfields.c.titlename.id,c.name.first,c.name.last,c.customfields.c.street1,c.customfields.c.street2,c.customfields.c.street3,c.customfields.c.street4,c.customfields.c.town,c.customfields.c.county, c.customfields.c.add_mailingcountrydrop.id,c.customfields.c.postcode,c.customfields.c.connectusestage.lookupname FROM Contact as c where id =" + contactid;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Split('^');
                            sefObj.titlestring = values[0];
                            sefObj.title = values[1];
                            sefObj.firstname = values[2];
                            sefObj.lastname = values[3];
                            sefObj.addresslineone = values[4];
                            sefObj.addresslinetwo = values[5];
                            sefObj.addresslinethree = values[6];
                            sefObj.addresslinefour = values[7];
                            sefObj.town = values[8];
                            sefObj.county = values[9];
                            sefObj.addresscountry = values[10];
                            sefObj.postcode = values[11];
                            sefObj.mobilephone = EPObj.mobilephone;
                            sefObj.email = EPObj.email;
                            sefObj.BeneficiaryGlobalId = ChildObj.BeneficiaryGlobalId;
                            sefObj.sponsorchild = ChildObj.sponsorchild;
                            sefObj.BeneficiaryHoldId = ChildObj.BeneficiaryHoldId;
                            sefObj.childnumber = Needkey;
                            sefObj.BirthDate = ChildObj.BirthDate;
                            sefObj.connectusestage = values[12];
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching supporter data :" + e.Message + " with supporter id: " + contactid);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return sefObj;
        }
        public SEFModel GetChildData(string Needkey)
        {
            SEFModel Cobj = new SEFModel();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT B.NeedRNID.Beneficiary_GlobalID,B.NeedRNID.AbbreviatedName,B.HoldID,B.NeedRNID.BirthDate FROM SCBS_CHILD.BeneficiaryOrICPHold as B WHERE B.NeedRNID.NeedKey ='" + Needkey + "' ORDER BY B.CreatedTime DESC LIMIT 0,1;";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Split('^');
                            Cobj.BeneficiaryGlobalId = values[0];
                            Cobj.sponsorchild = values[1];
                            Cobj.BeneficiaryHoldId = values[2];
                            Cobj.BirthDate = values[3];
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching child data for setupbot :" + e.Message + " with needkey: " + Needkey);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Cobj;
        }
        public void AssignAndSendDatatoCIFSubscriberForIndividual(OperationParams OPObj)
        {
            appLogger.Info("Processing started in AssignAndSendDatatoCIFSubscriberForIndividual..." + SimpleJson.SerializeObject(OPObj));
            try
            {
                SEFModel sefobj = new SEFModel();
                sefobj = GetSupporterAndChildData(OPObj.Contactid, OPObj.Needkey);

                Model.CIFModel sefcommitobj = new Model.CIFModel();
                sefcommitobj.SetupBotIncident = OPObj.IncidentId;

                //add child in BB
                AddChildIfNotExistInBB(OPObj.Needkey);

                //Flags
                sefcommitobj.isDepartureSubCommitment = false;
                sefcommitobj.isCorrespondentCommitment = false;
                sefcommitobj.createconstituentonly = false;

                //asign value to CIF Model
                //supporter data
                sefcommitobj.supporterid = new string[] { OPObj.Contactid.ToString(), "0" };
                sefcommitobj.titlestring = new string[] { sefobj.titlestring, "" };
                sefcommitobj.email = new string[] { sefobj.email, "" };
                sefcommitobj.firstname = new string[] { sefobj.firstname, "" };
                sefcommitobj.lastname = new string[] { sefobj.lastname, "" };
                sefcommitobj.mobilephone = new string[] { sefobj.mobilephone, "" };
                sefcommitobj.addresslineone = new string[] { sefobj.addresslineone, "" };
                sefcommitobj.postcode = new string[] { sefobj.postcode, "" };
                sefcommitobj.sponsorchild = sefobj.sponsorchild;
                sefcommitobj.communicationmethod = 0;
                sefcommitobj.BestTimetoCall = new string[] { "", "" };
                sefcommitobj.type = "2";
                sefcommitobj.primary = "0";
                sefcommitobj.title = new string[] { sefobj.title, "" };
                sefcommitobj.dob = new string[] { "", "" };
                sefcommitobj.phone = new string[] { sefobj.mobilephone, "" };
                sefcommitobj.addresslinetwo = new string[] { sefobj.addresslinetwo, "" };
                sefcommitobj.addresslinethree = new string[] { sefobj.addresslinethree, "" };
                sefcommitobj.addresslinefour = new string[] { sefobj.addresslinefour, "" };
                sefcommitobj.town = new string[] { sefobj.town, "" };
                sefcommitobj.county = new string[] { sefobj.county, "" };
                sefcommitobj.addresscountry = new string[] { sefobj.addresscountry, "" };
                sefcommitobj.communicationmethod = 0;

                //child details
                sefcommitobj.childnumber = sefobj.childnumber;
                sefcommitobj.BeneficiaryGlobalId = sefobj.BeneficiaryGlobalId;
                sefcommitobj.BeneficiaryHoldId = sefobj.BeneficiaryHoldId;


                //bank details
                sefcommitobj.accountname = OPObj.AccountName;
                sefcommitobj.accountnumber = OPObj.AccountNo;
                sefcommitobj.sortcode = OPObj.SortCode;
                sefcommitobj.paymentmethod = CukAutomationOperations.Model.AutomationBot.Constant.PAYMENTMETHOD;
                sefcommitobj.barcode = OPObj.ApplicationCode;
                // DX105 changes start 
                if (OPObj.NewSupporter == "No")
                {
                    sefcommitobj.paymentmethod = "Existing Direct Debit";
                    sefcommitobj.accountname = null;
                    sefcommitobj.accountnumber = null;
                    sefcommitobj.sortcode = null;
                }
                // DX105 changes End 
                //Constant values
                sefcommitobj.country = CukAutomationOperations.Model.AutomationBot.Constant.COUNTRY;
                sefcommitobj.amount = CukAutomationOperations.Model.AutomationBot.Constant.SPONSORSHIPMONTHLYAMOUNT;
                sefcommitobj.installmentfrequency = CukAutomationOperations.Model.AutomationBot.Constant.INSTALLMENTFREQUENCY;

                sefcommitobj.ddisource = CukAutomationOperations.Model.AutomationBot.Constant.DDISOURCE;
                sefcommitobj.firstfundeddate = !string.IsNullOrEmpty(GetFFD_SetupBot(OPObj.dddateprefer)) ? GetFFD_SetupBot(OPObj.dddateprefer) : CukAutomationOperations.Model.AutomationBot.Constant.FIRSTFUNDEDDATE;

                sefcommitobj.indicator = CukAutomationOperations.Model.AutomationBot.Constant.INDICATOR;
                sefcommitobj.loggedinUser = CukAutomationOperations.Model.AutomationBot.Constant.LOGGEDINUSER;
                sefcommitobj.loggedinUserAccountID = CukAutomationOperations.Model.AutomationBot.Constant.LOGGEDINUSERACCOUNTID;
                sefcommitobj.futuredonationdate = CukAutomationOperations.Model.AutomationBot.Constant.FIRSTFUNDEDDATE;
                sefcommitobj.Sponsorshipsource = CukAutomationOperations.Model.AutomationBot.Constant.SPONSORSHIPSOURCE;

                sefcommitobj.christmasGiftAmount = null;
                sefcommitobj.AnnualChristmasDate = null;
                sefcommitobj.birthdayGiftAmount = null;
                sefcommitobj.AnnualBirthDate = null;

                if (!string.IsNullOrEmpty(OPObj.BirthdayAmount) && OPObj.BirthdayAmount != "0")
                {
                    sefcommitobj.birthdayGiftAmount = OPObj.BirthdayAmount;
                    if (!string.IsNullOrEmpty(sefobj.BirthDate))
                    {
                        sefcommitobj.AnnualBirthDate = GetBD_RG_Date(Convert.ToDateTime(sefobj.BirthDate), OPObj.dddateprefer).ToString("dd-MM-yyyy");
                    }
                }

                if (!string.IsNullOrEmpty(OPObj.ChritmasAmount) && OPObj.ChritmasAmount != "0")
                {
                    sefcommitobj.christmasGiftAmount = OPObj.ChritmasAmount;
                    sefcommitobj.AnnualChristmasDate = GetRG_Christmas(OPObj.dddateprefer).ToString("dd-MM-yyyy");
                }

                sefcommitobj.IsSponPlus = (!string.IsNullOrEmpty(OPObj.sponsorshipplustype) && OPObj.sponsorshipplustype == "Yes – Sponsorship Plus") ? "1" : null;
                sefcommitobj.IsHillsongSponPlus = (!string.IsNullOrEmpty(OPObj.sponsorshipplustype) && OPObj.sponsorshipplustype == "Yes – Hillsong sponsorship Plus") ? "1" : null;

                sefcommitobj.IsSponPlus = (!string.IsNullOrEmpty(OPObj.sponsorshipplus) && OPObj.sponsorshipplus == "1") ? "1" : null;


                sefcommitobj.dddate = null;
                sefcommitobj.advancenoticesent = null;
                sefcommitobj.nomoney = "0";


                sefcommitobj.emailPreference = new string[] { "2", "2" };
                sefcommitobj.phonePreference = new string[] { "2", "2" };
                sefcommitobj.smsPreference = new string[] { "2", "2" };
                sefcommitobj.createSolicit = new string[] { "2", "2" };

                sefcommitobj.donationdate = DateTime.Now.ToString("dd-MM-yyyy");//check this take example from 37
                sefcommitobj.taxpayertitle = "Not Selected";
                /*
                  supporterGroupData.GAStartDate = newSupporter.futuredonationdate;
                    supporterGroupData.GAMadeDate = newSupporter.donationdate;
                 */

                sefcommitobj.linkreason = 328;
                sefcommitobj.linktype = 1;
                sefcommitobj.giftaidstatus = OPObj.giftaidstatus == "1029" ? "1029" : null;
                sefcommitobj.taxpayertitle = "";
                sefcommitobj.taxpayerfirstname = "";
                sefcommitobj.taxpayersurname = "";
                sefcommitobj.iamtaxpayer = "1";
                sefcommitobj.sefGUID = OPObj.SEFGUID;
                sefcommitobj.sgname = sefobj.titlestring + " " + sefobj.firstname + " " + sefobj.lastname;
                sefcommitobj.SupGrpPreferredName = OPObj.SupporterPreferredName;
                sefcommitobj.sglettersalutation = sefobj.firstname;
                sefcommitobj.sgaddresssalutation = sefobj.titlestring + " " + sefobj.firstname + " " + sefobj.lastname;


                sefcommitobj.connectusestage = sefobj.connectusestage == "Yes" ? true : false;
                sefcommitobj.iscorrsponsor = "0";
                sefcommitobj.volunteering = "0";
                sefcommitobj.sponsorship = null;
                sefcommitobj.manager = null;
                sefcommitobj.bankaddress = null;
                sefcommitobj.bankpostcode = "";
                sefcommitobj.sortcode1 = "00";
                sefcommitobj.sortcode2 = "00";
                sefcommitobj.sortcode3 = "00";
                sefcommitobj.reference = "0000000";
                sefcommitobj.supgrpid = 0;
                sefcommitobj.enqrefid = "";
                sefcommitobj.groupaccount = "0";
                sefcommitobj.scanneddocexists = "0";
                sefcommitobj.sgglobalid = null;
                sefcommitobj.sgcompassconid = null;
                sefcommitobj.SponsorSupporterGlobalID = "null";
                sefcommitobj.DepartedBeneficiaryGlobalId = "";
                sefcommitobj.ExistingBeneficiaryGlobalId = "";
                sefcommitobj.individualsgname = null;
                sefcommitobj.ExistingCommitmentId = null;
                sefcommitobj.ExistingGlobalCommitmentId = null;
                sefcommitobj.ExistingGlobalCorrCommitmentId = null;
                sefcommitobj.ExistingSupporterGroupID = null;
                sefcommitobj.CorrespondentSupporterGlobalID = null;
                sefcommitobj.ComBBId = null;
                sefcommitobj.bic = "";
                sefcommitobj.iban = "";
                sefcommitobj.isOrganisation = false;
                sefcommitobj.orgId = "0";
                sefcommitobj.orgName = "";
                sefcommitobj.orgAddPref = null;
                sefcommitobj.orgaddresslineone = null;
                sefcommitobj.orgaddresslinetwo = null;
                sefcommitobj.orgaddresslinethree = null;
                sefcommitobj.orgaddresslinefour = null;
                sefcommitobj.orgtown = null;
                sefcommitobj.orgcounty = null;
                sefcommitobj.orgaddresscountry = null;
                sefcommitobj.orgpostcode = null;
                sefcommitobj.orgwebsite = "";
                sefcommitobj.orgPhone = "";
                sefcommitobj.orgEmail = "";
                sefcommitobj.orgType = "";
                sefcommitobj.isorgcorrsponsor = null;
                sefcommitobj.commMarketingChannel = "";
                sefcommitobj.commMarketingCode = "";
                sefcommitobj.commRelationshipManager = "";
                sefcommitobj.commOrganisation = "";
                sefcommitobj.commSupporter = "";
                sefcommitobj.commEvent = "";
                sefcommitobj.commCampaign = "";
                sefcommitobj.commBBDDAmount = null;
                sefcommitobj.commBBDDNextDate = null;
                sefcommitobj.commBBDDStartDate = null;
                sefcommitobj.commBBPaymentMethod = null;
                sefcommitobj.commDDReference = null;
                sefcommitobj.commSponsorshipPlus = true;
                sefcommitobj.commPaymentMethod = null;
                sefcommitobj.commLinkedToPartnership = null;
                sefcommitobj.isIndiaProcessService = false;
                sefcommitobj.DepNeedStatus = null;
                sefcommitobj.delinkType = null;
                sefcommitobj.delinkReason = null;
                sefcommitobj.isChildChangeFlow = null;
                sefcommitobj.samepc = "0";
                sefcommitobj.debiton = "0";

                appLogger.Info("Processing ended in AssignAndSendDatatoCIFSubscriberForIndividual with data " + SimpleJson.SerializeObject(sefcommitobj));
                SendDataToMainWS(sefcommitobj, 1002);//uncomment after debug
            }
            catch (Exception e)
            {
                UpdateSetupBotFieldsinIncident(OPObj.IncidentId, "", true);
                appLogger.Error("Error in AssignAndSendDatatoCIFSubscriberForIndividual: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            appLogger.Info("Processing ended in AssignAndSendDatatoCIFSubscriberForIndividual...");
        }
        public string GetFFD_SetupBot(string DD_Date_Prefer)
        {
            DateTime ffdate = Convert.ToDateTime(GetFFD());
            int Day = Convert.ToInt32(Regex.Replace(DD_Date_Prefer, "[^0-9]", ""));
            DateTime ffd_from_oneview_plus_dd_date_prefer = new DateTime(ffdate.Year, ffdate.Month, Day);
            do
            {
                if (ffdate > ffd_from_oneview_plus_dd_date_prefer)
                {
                    ffd_from_oneview_plus_dd_date_prefer = ffd_from_oneview_plus_dd_date_prefer.AddMonths(1);
                }
                else
                {
                    break;
                }
            } while (true);
            return ffd_from_oneview_plus_dd_date_prefer.ToString("dd-MM-yyyy");
        }
        private DateTime GetRG_BirthDate(DateTime ChildBirthDate)
        {
            DateTime Today = DateTime.Now;
            List<int> dateList = new List<int>();
            dateList.Add(1);
            dateList.Add(8);
            dateList.Add(15);
            dateList.Add(22);
            // find closest to day
            int closestDay = dateList.OrderBy(item => Math.Abs(ChildBirthDate.Day - item)).First();
            DateTime tempDate = new DateTime(Today.Year, ChildBirthDate.Month, closestDay).AddMonths(-2);
            DateTime NextInstallmentDate = new DateTime();
            if (tempDate > Today)
            {
                NextInstallmentDate = tempDate;
            }
            else
            {
                NextInstallmentDate = tempDate.AddYears(1);
            }
            return NextInstallmentDate;
        }
        public DateTime GetRG_Christmas(string DD_Date_Prefer)
        {
            DateTime Today = DateTime.Now;
            DateTime requiredDate = new DateTime(Today.Year, 11, 1);
            int Day = Convert.ToInt32(Regex.Replace(DD_Date_Prefer, "[^0-9]", ""));
            if (Day != 1)
            {
                requiredDate = new DateTime(Today.Year, 10, Day);
            }
            if (Today > requiredDate)
            {
                requiredDate = new DateTime(Today.Year, 11, 1).AddYears(1);
            }
            return requiredDate;
        }
        public DateTime GetBD_RG_Date(DateTime ChildBirthDate, string DD_Date_Prefer)
        {
            DateTime Today = DateTime.Now;
            int Day = Convert.ToInt32(Regex.Replace(DD_Date_Prefer, "[^0-9]", ""));
            int Month = ChildBirthDate.AddMonths(-2).Month;
            DateTime TempDate = new DateTime(Today.Year, Month, Day);
            DateTime NextInstallmentDate = new DateTime();
            if (TempDate > Today)
            {
                NextInstallmentDate = TempDate;
            }
            else
            {
                NextInstallmentDate = TempDate.AddYears(1);
            }
            return NextInstallmentDate;
        }
        T GetObject<T>(Dictionary<string, string> dict, string ModelName)
        {
            Type type = typeof(T);
            var obj = Activator.CreateInstance(type);

            foreach (var kv in dict)
            {
                try
                {
                    type.GetProperty(kv.Key).SetValue(obj, kv.Value);
                }
                catch (NullReferenceException e)
                {
                    appLogger.Info("Given key " + kv.Key + " is not exist in " + ModelName + "  Model " + e.Message);
                    appLogger.Info(e.StackTrace);
                    continue;
                }
            }


            return (T)obj;
        }
        #endregion

        #region Compassion Celebration Services - Datapoint
        public void SyncOrgActiveSponsorshipData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Sponsorship Data",
            };
            try
            {
                string Query = "SELECT CM.Organisation.ID,CM.Need.NeedKey,CM.Need.FullBodyImageURL,CM.Need.CountryName,CM.Need.Gender.lookupname,CM.StartDate,CM.EndDate,CM.Need.BirthDate,CM.Need.Project,CM.Need.Project.Community,CM.Need.HouseHold.FemaleGuardianOccupation,CM.Need.HouseHold.MaleGuardianOccupation,CM.Need.HouseHold.NaturalFatherAlive.lookupname,CM.Need.HouseHold.NaturalMotherAlive.lookupname,CM.Need.HouseHold.YouthheadedHousehold,CM.Need.CorrespondenceLanguage,CM.Need.GradeLevelUS_Name,CM.ID FROM SCBS_CM.Commitment CM  where CM.Organisation.ID =" + OrgID;// AND CM.EndDate IS NULL
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Org sponsorship table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `ORG_SPONSORSHIP_DETAILS`(`RN_ORG_ID`, `NEED_KEY`, `NEED_IMAGE`, `COUNTRY`, `B2S_LETTER_COUNT`, `S2B_LETTER_COUNT`, `GENDER`, `SPONSORSHIP_START_DATE`, `SPONSORSHIP_END_DATE`,`NUTRITIOUS_MEALS`, `HOURS_SPENT_AT_PROJECT`, `MEDICAL_CHECKUP`, `BIRTH_DATE`, `PROJECT_ID`, `COMMUNITY_ID`, `FEMALE_GUARDIAN_OCCUPATION`, `MALE_GUARDIAN_OCCUPATION`, `NATURAL_FATHER_ALIVE`, `NATURAL_MOTHER_ALIVE`, `YOUTH_HEADED_HOUSEHOLD`, `CORRESPONDENCE_LANGUAGE`, `THINGSILIKE`, `GRADELEVELUS_NAME`,`COMMITMENT_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Org_ID = values[0];
                            string NeedKey = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            string FullBodyImageURL = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            string CountryName = !string.IsNullOrEmpty(values[3]) ? values[3] : "null";
                            string Gender = !string.IsNullOrEmpty(values[4]) ? values[4] : "null";

                            string StartDate = "";
                            string EndDate = "";
                            string BirthDate = "";
                            DateTime start_Date = new DateTime();
                            DateTime end_Date = new DateTime();
                            if (!string.IsNullOrEmpty(values[5]))
                            {
                                start_Date = DateTime.ParseExact(values[5], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                StartDate = start_Date.ToString("yyyy-MM-dd HH:mm:ss");
                            }
                            else
                            {
                                StartDate = "null";
                            }
                            if (!string.IsNullOrEmpty(values[6]))
                            {
                                end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                EndDate = end_Date.ToString("yyyy-MM-dd HH:mm:ss");
                            }
                            else
                            {
                                EndDate = "null";
                            }
                            if (!string.IsNullOrEmpty(values[7]))
                            {
                                DateTime dt = DateTime.ParseExact(values[7], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                BirthDate = dt.ToString("yyyy-MM-dd");
                            }
                            else
                            {
                                BirthDate = "null";
                            }

                            string Project = !string.IsNullOrEmpty(values[8]) ? values[8] : "null";
                            string Community = !string.IsNullOrEmpty(values[9]) ? values[9] : "null";
                            string FemaleGuardianOccupation = !string.IsNullOrEmpty(values[10]) ? values[10] : "null";
                            string MaleGuardianOccupation = !string.IsNullOrEmpty(values[11]) ? values[11] : "null";
                            string NaturalFatherAlive = !string.IsNullOrEmpty(values[12]) ? values[12] : "null";
                            string NaturalMotherAlive = !string.IsNullOrEmpty(values[13]) ? values[13] : "null";
                            string YouthheadedHousehold = !string.IsNullOrEmpty(values[14]) ? values[14] : "null";
                            string CorrespondenceLanguage = !string.IsNullOrEmpty(values[15]) ? values[15] : "null";
                            string GradeLevelUS_Name = !string.IsNullOrEmpty(values[16]) ? values[16] : "null";
                            string ThingsILike = !string.IsNullOrEmpty(GetThingsILike(NeedKey)) ? GetThingsILike(NeedKey) : "null";
                            string S2BCount = !string.IsNullOrEmpty(GetS2BCount(NeedKey)) ? GetS2BCount(NeedKey) : "null";
                            string B2SCount = !string.IsNullOrEmpty(GetB2SCount(NeedKey)) ? GetB2SCount(NeedKey) : "null";
                            string COMMITMENT_ID = !string.IsNullOrEmpty(values[17]) ? values[17] : "null";
                            if (end_Date != null)
                            {
                                end_Date = DateTime.Now;
                            }

                            int Hours_spent_at_project = (int)Math.Floor((end_Date - start_Date).TotalDays / 30);
                            int projectAttendance = (14 * Hours_spent_at_project);
                            int medicalCheckups = (Hours_spent_at_project / 12);
                            int NutritionalMeal = Hours_spent_at_project * (11 / 3);

                            string singleRow = "" + Org_ID + ",'" + NeedKey + "','" + FullBodyImageURL + "','" + CountryName + "'," + B2SCount + "," + S2BCount + ",'" + Gender + "','" + StartDate + "','" + EndDate + "'," + NutritionalMeal + "," + projectAttendance + "," + medicalCheckups + ",'" + BirthDate + "'," + Project + "," + Community + ",'" + FemaleGuardianOccupation + "','" + MaleGuardianOccupation + "','" + NaturalFatherAlive + "','" + NaturalMotherAlive + "','" + YouthheadedHousehold + "','" + CorrespondenceLanguage + "','" + ThingsILike + "','" + GradeLevelUS_Name + "'," + COMMITMENT_ID + "";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE RN_ORG_ID= Values(RN_ORG_ID),NEED_KEY= Values(NEED_KEY),NEED_IMAGE= Values(NEED_IMAGE),COUNTRY= Values(COUNTRY),B2S_LETTER_COUNT= Values(B2S_LETTER_COUNT),S2B_LETTER_COUNT= Values(S2B_LETTER_COUNT),GENDER= Values(GENDER),SPONSORSHIP_START_DATE= Values(SPONSORSHIP_START_DATE),SPONSORSHIP_END_DATE= Values(SPONSORSHIP_END_DATE),BIBLES_GIVEN= Values(BIBLES_GIVEN),NUTRITIOUS_MEALS= Values(NUTRITIOUS_MEALS),HOURS_SPENT_AT_PROJECT= Values(HOURS_SPENT_AT_PROJECT),MEDICAL_CHECKUP= Values(MEDICAL_CHECKUP),BIRTH_DATE= Values(BIRTH_DATE),PROJECT_ID= Values(PROJECT_ID),COMMUNITY_ID= Values(COMMUNITY_ID),FEMALE_GUARDIAN_OCCUPATION= Values(FEMALE_GUARDIAN_OCCUPATION),MALE_GUARDIAN_OCCUPATION= Values(MALE_GUARDIAN_OCCUPATION),NATURAL_FATHER_ALIVE= Values(NATURAL_FATHER_ALIVE),NATURAL_MOTHER_ALIVE= Values(NATURAL_MOTHER_ALIVE),YOUTH_HEADED_HOUSEHOLD= Values(YOUTH_HEADED_HOUSEHOLD),CORRESPONDENCE_LANGUAGE= Values(CORRESPONDENCE_LANGUAGE),THINGSILIKE= Values(THINGSILIKE),GRADELEVELUS_NAME= Values(GRADELEVELUS_NAME),COMMITMENT_ID= Values(COMMITMENT_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Org sponsorship table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncOrgActiveSponsorshipData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void SyncCommunityData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Community Data",
            };
            try
            {
                string Query = "SELECT DISTINCT CM.Need.Project.Community,CM.Need.Project.Community.FamilyMonthlyIncome,CM.Need.Project.Community.CoolestMonth_R4,CM.Need.Project.Community.WarmestMonth_R4,CM.Need.Project.Community.Climate_R4,CM.Need.Project.Community.HarvestMonthMatrix_R4,CM.Need.Project.Community.HungerMonthMatrix_R4,CM.Need.Project.Community.RainyMonthMatrix_R4,CM.Need.Project.Community.LocaleType,CM.Need.Project.Community.PrimaryOccupation_R4,CM.Need.Project.Community.PrimaryLanguage,CM.Need.Project.Community.Terrain_R4,CM.Need.Project.Community.HomeFloor,CM.Need.Project.Community.HomeRoof,CM.Need.Project.Community.HomeWall,CM.Need.Project.Community.UnemploymentRate FROM SCBS_CM.Commitment CM  where CM.Organisation.ID =" + OrgID;//AND CM.EndDate is null
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Community table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `COMMUNITY_DETAILS`(`COMMUNITY_ID`, `FAMILY_MONTHLY_INCOME`, `COOLEST_MONTH_R4`, `WARMEST_MONTH_R4`, `CLIMATE_R4`, `HARVEST_MONTH_MATRIX_R4`, `HUNGER_MONTH_MATRIX_R4`, `RAINY_MONTH_MATRIX_R4`, `LOCALE_TYPE`, `PRIMARY_OCCUPATION_R4`, `PRIMARY_LANGUAGE`, `TERRAIN_R4`, `HOME_FLOOR`, `HOME_ROOF`, `HOME_WALL`, `UNEMPLOYMENT_RATE`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Community_ID = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";
                            string Family_monthly_income = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            string Coolest_month_r4 = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            string Warmest_month_r4 = !string.IsNullOrEmpty(values[3]) ? values[3] : "null";
                            string Climate_r4 = !string.IsNullOrEmpty(values[4]) ? values[4] : "null";
                            string Harvest_month_matrix_r4 = !string.IsNullOrEmpty(values[5]) ? values[5] : "null";
                            string Hunger_month_matrix_r4 = !string.IsNullOrEmpty(values[6]) ? values[6] : "null";
                            string Rainy_month_matrix_r4 = !string.IsNullOrEmpty(values[7]) ? values[7] : "null";
                            string Locale_type = !string.IsNullOrEmpty(values[8]) ? values[8] : "null";
                            string Primary_occupation_r4 = !string.IsNullOrEmpty(values[9]) ? values[9] : "null";
                            string Primary_language = !string.IsNullOrEmpty(values[10]) ? values[10] : "null";
                            string Terrain_r4 = !string.IsNullOrEmpty(values[11]) ? values[11] : "null";
                            string Home_floor = !string.IsNullOrEmpty(values[12]) ? values[12] : "null";
                            string Home_roof = !string.IsNullOrEmpty(values[13]) ? values[13] : "null";
                            string Home_wall = !string.IsNullOrEmpty(values[14]) ? values[14] : "null";
                            string Unemployment_rate = !string.IsNullOrEmpty(values[15]) ? values[15] : "null";

                            string singleRow = "" + Community_ID + ",'" + Family_monthly_income + "','" + Coolest_month_r4 + "','" + Warmest_month_r4 + "','" + Climate_r4 + "','" + Harvest_month_matrix_r4 + "','" + Hunger_month_matrix_r4 + "','" + Rainy_month_matrix_r4 + "','" + Locale_type + "','" + Primary_occupation_r4 + "','" + Primary_language + "','" + Terrain_r4 + "','" + Home_floor + "','" + Home_roof + "','" + Home_wall + "','" + Unemployment_rate + "'";
                            if (Community_ID != "null")
                            {
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE COMMUNITY_ID= Values(COMMUNITY_ID),FAMILY_MONTHLY_INCOME= Values(FAMILY_MONTHLY_INCOME),COOLEST_MONTH_R4= Values(COOLEST_MONTH_R4),WARMEST_MONTH_R4= Values(WARMEST_MONTH_R4),CLIMATE_R4= Values(CLIMATE_R4),HARVEST_MONTH_MATRIX_R4= Values(HARVEST_MONTH_MATRIX_R4),HUNGER_MONTH_MATRIX_R4= Values(HUNGER_MONTH_MATRIX_R4),RAINY_MONTH_MATRIX_R4= Values(RAINY_MONTH_MATRIX_R4),LOCALE_TYPE= Values(LOCALE_TYPE),PRIMARY_OCCUPATION_R4= Values(PRIMARY_OCCUPATION_R4),PRIMARY_LANGUAGE= Values(PRIMARY_LANGUAGE),TERRAIN_R4= Values(TERRAIN_R4),HOME_FLOOR= Values(HOME_FLOOR),HOME_ROOF= Values(HOME_ROOF),HOME_WALL= Values(HOME_WALL),UNEMPLOYMENT_RATE = Values(UNEMPLOYMENT_RATE)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Community table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncCommunityData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void SyncProjectData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Project Data",
            };
            try
            {
                string Query = "SELECT DISTINCT CM.Need.Project.ID,CM.Need.Project.CognitiveActivitiesAge0To5,CM.Need.Project.CognitiveActivitiesAge12Plus,CM.Need.Project.CognitiveActivitiesAge6To11,CM.Need.Project.PhysicalActivitiesAge0To5,CM.Need.Project.PhysicalActivitiesAge12Plus,CM.Need.Project.PhysicalActivitiesAge6To11,CM.Need.Project.SocioEmotionalActivitiesAge0To,CM.Need.Project.SocioEmotionalActivitiesAge12P,CM.Need.Project.SocioEmotionalActivitiesAge6To,CM.Need.Project.SpiritualActivitiesAge0To5,CM.Need.Project.SpiritualActivitiesAge12Plus,CM.Need.Project.SpiritualActivitiesAge6To11,CM.Need.Project.ProjectActivitiesForFamilies  FROM SCBS_CM.Commitment CM  where CM.Organisation.ID =" + OrgID;// AND CM.EndDate is null
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Project table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `PROJECT_DETAILS`(`PROJECT_ID`, `COGNITIVE_ACTIVITIES_AGE0TO5`, `COGNITIVE_ACTIVITIES_AGE12PLUS`, `COGNITIVE_ACTIVITIES_AGE6TO11`, `PHYSICAL_ACTIVITIES_AGE0TO5`, `PHYSICAL_ACTIVITIES_AGE12PLUS`, `PHYSICAL_ACTIVITIES_AGE6TO11`, `SOCIO_EMOTIONAL_ACTIVITIES_AGE0To`, `SOCIO_EMOTIONAL_ACTIVITIES_AGE12P`, `SOCIO_EMOTIONAL_ACTIVITIES_AGE6To`, `SPIRITUAL_ACTIVITIES_AGE0To5`, `SPIRITUAL_ACTIVITIES_AGE12Plus`, `SPIRITUAL_ACTIVITIES_AGE6To11`, `PROJECT_ACTIVITIES_FOR_FAMILIES`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Project_id = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";
                            string Cognitive_activities_age0to5 = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            string Cognitive_activities_age12plus = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            string Cognitive_activities_age6to11 = !string.IsNullOrEmpty(values[3]) ? values[3] : "null";
                            string Physical_activities_age0to5 = !string.IsNullOrEmpty(values[4]) ? values[4] : "null";
                            string Physical_activities_age12plus = !string.IsNullOrEmpty(values[5]) ? values[5] : "null";
                            string Physical_activities_age6to11 = !string.IsNullOrEmpty(values[6]) ? values[6] : "null";
                            string Socio_emotional_activities_age0to = !string.IsNullOrEmpty(values[7]) ? values[7] : "null";
                            string Socio_emotional_activities_age12p = !string.IsNullOrEmpty(values[8]) ? values[8] : "null";
                            string Socio_emotional_activities_age6to = !string.IsNullOrEmpty(values[9]) ? values[9] : "null";
                            string Spiritual_activities_age0to5 = !string.IsNullOrEmpty(values[10]) ? values[10] : "null";
                            string Spiritual_activities_age12plus = !string.IsNullOrEmpty(values[11]) ? values[11] : "null";
                            string Spiritual_activities_age6to11 = !string.IsNullOrEmpty(values[12]) ? values[12] : "null";
                            string Project_activities_for_families = !string.IsNullOrEmpty(values[13]) ? values[13] : "null";

                            string singleRow = "" + Project_id + ",'" + Cognitive_activities_age0to5 + "','" + Cognitive_activities_age12plus + "','" + Cognitive_activities_age6to11 + "','" + Physical_activities_age0to5 + "','" + Physical_activities_age12plus + "','" + Physical_activities_age6to11 + "','" + Socio_emotional_activities_age0to + "','" + Socio_emotional_activities_age12p + "','" + Socio_emotional_activities_age6to + "','" + Spiritual_activities_age0to5 + "','" + Spiritual_activities_age12plus + "','" + Spiritual_activities_age6to11 + "','" + Project_activities_for_families + "'";

                            if (Project_id != "null")
                            {
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE PROJECT_ID= Values(PROJECT_ID),COGNITIVE_ACTIVITIES_AGE0TO5= Values(COGNITIVE_ACTIVITIES_AGE0TO5),COGNITIVE_ACTIVITIES_AGE12PLUS= Values(COGNITIVE_ACTIVITIES_AGE12PLUS),COGNITIVE_ACTIVITIES_AGE6TO11= Values(COGNITIVE_ACTIVITIES_AGE6TO11),PHYSICAL_ACTIVITIES_AGE0TO5= Values(PHYSICAL_ACTIVITIES_AGE0TO5),PHYSICAL_ACTIVITIES_AGE12PLUS= Values(PHYSICAL_ACTIVITIES_AGE12PLUS),PHYSICAL_ACTIVITIES_AGE6TO11= Values(PHYSICAL_ACTIVITIES_AGE6TO11),SOCIO_EMOTIONAL_ACTIVITIES_AGE0To= Values(SOCIO_EMOTIONAL_ACTIVITIES_AGE0To),SOCIO_EMOTIONAL_ACTIVITIES_AGE12P= Values(SOCIO_EMOTIONAL_ACTIVITIES_AGE12P),SOCIO_EMOTIONAL_ACTIVITIES_AGE6To= Values(SOCIO_EMOTIONAL_ACTIVITIES_AGE6To),SPIRITUAL_ACTIVITIES_AGE0To5= Values(SPIRITUAL_ACTIVITIES_AGE0To5),SPIRITUAL_ACTIVITIES_AGE12Plus= Values(SPIRITUAL_ACTIVITIES_AGE12Plus),SPIRITUAL_ACTIVITIES_AGE6To11= Values(SPIRITUAL_ACTIVITIES_AGE6To11),PROJECT_ACTIVITIES_FOR_FAMILIES= Values(PROJECT_ACTIVITIES_FOR_FAMILIES)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Project table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncProjectData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void SyncOrgData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Org Data",
            };
            try
            {
                string Query = "SELECT CM.Organisation.ID,CM.Organisation.Name,count(CM.Need.ID),CM.Organisation.customFields.c.add_street_line1,CM.Organisation.customFields.c.add_street_line2,CM.Organisation.customFields.c.add_street_line3,CM.Organisation.customFields.c.add_city,CM.Organisation.customFields.c.add_county,CM.Organisation.customFields.c.add_postal_code FROM SCBS_CM.Commitment CM where CM.Organisation.ID =" + OrgID;// AND CM.EndDate is null
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Organisations table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `ORG_DETAILS`(`RN_ORG_ID`, `ORG_NAME`,`NUMBER_OF_CHILDREN`, `ORG_ADDRESS`,`LETTERS_SENT_BY_CHILDREN`, `LETTERS_SENT_TO_CHILDREN`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Org_ID = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";
                            string Org_Name = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            string NumberOfChild = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";

                            string add_street_line1 = !string.IsNullOrEmpty(values[3]) ? values[3] : null;
                            string add_street_line2 = !string.IsNullOrEmpty(values[4]) ? values[4] : null;
                            string add_street_line3 = !string.IsNullOrEmpty(values[5]) ? values[5] : null;
                            string add_city = !string.IsNullOrEmpty(values[6]) ? values[6] : null;
                            string add_county = !string.IsNullOrEmpty(values[7]) ? values[7] : null;
                            string add_postal_code = !string.IsNullOrEmpty(values[8]) ? values[8] : null;
                            OrgData OrgObj = new OrgData();
                            OrgObj = GetS2BAndB2SCount(Org_ID);
                            string Org_Address = add_street_line1 + "," + add_street_line2 + "," + add_street_line3 + "," + add_city + "," + add_county + "," + add_postal_code + ".";
                            string Letters_sent_by_children = OrgObj.Letters_sent_by_children.ToString();
                            string Letters_sent_to_children = OrgObj.Letters_sent_to_children.ToString();

                            string singleRow = Org_ID + ",'" + Org_Name + "'," + NumberOfChild + ",'" + Org_Address + "'," + Letters_sent_by_children + "," + Letters_sent_to_children + "";

                            if (!string.IsNullOrEmpty(Org_ID))
                            {
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE RN_ORG_ID= Values(RN_ORG_ID),ORG_NAME= Values(ORG_NAME),ORG_ADDRESS= Values(ORG_ADDRESS),NUMBER_OF_CHILDREN= Values(NUMBER_OF_CHILDREN),LETTERS_SENT_BY_CHILDREN= Values(LETTERS_SENT_BY_CHILDREN),LETTERS_SENT_TO_CHILDREN= Values(LETTERS_SENT_TO_CHILDREN)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Organisations table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncOrgData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public string GetThingsILike(string NeedKey)
        {
            string ThingsIlike = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get ChildThingsIlike"
            };
            string Query = "SELECT SCBS_CM.BeneficiaryCaseStudy.ThingsILike FROM SCBS_CM.BeneficiaryCaseStudy WHERE SCBS_CM.BeneficiaryCaseStudy.NeedID.NeedKey='" + NeedKey + "' ORDER BY CreatedTime DESC";
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    ThingsIlike = result.CSVTables[0].Rows[0];
                }
            }
            return ThingsIlike;
        }
        public string GetS2BCount(string NeedKey)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get S2B Count"
            };
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.S2BCommunication S WHERE S.Need.NeedKey='" + NeedKey + "'";
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public string GetB2SCount(string NeedKey)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get B2S Count"
            };
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.Correspondence S WHERE S.Need.NeedKey='" + NeedKey + "'";
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public OrgData GetS2BAndB2SCount(string OrgID)
        {
            appLogger.Info("GetS2BAndB2SCount process started...");
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString);
            try
            {
                string query = "SELECT SUM(B2S_LETTER_COUNT) AS B2S_LETTER_COUNT,SUM(S2B_LETTER_COUNT) as S2B_LETTER_COUNT FROM ORG_SPONSORSHIP_DETAILS WHERE RN_ORG_ID=" + OrgID;
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    orgData.Letters_sent_by_children = reader["B2S_LETTER_COUNT"] != null ? Convert.ToInt32(reader["B2S_LETTER_COUNT"]) : 0;
                    orgData.Letters_sent_to_children = reader["S2B_LETTER_COUNT"] != null ? Convert.ToInt32(reader["B2S_LETTER_COUNT"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetS2BAndB2SCount " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("GetS2BAndB2SCount process ended...");
            return orgData;
        }
        public void SyncOrgData()
        {
            appLogger.Info("Sync org process started...");
            int[] Orgids = { 23203 };
            foreach (int Org_ID in Orgids)
            {
                //SyncOrgActiveSponsorshipData(Org_ID);
                //SyncCommunityData(Org_ID);
                //SyncProjectData(Org_ID);
                SyncOrgData(Org_ID);
            }
            appLogger.Info("Sync org process ended...");
        }
        #endregion
        
        #region Advance Notice Control Table

        #region Create Batch No
        public void updateDuplicateStatusInAN()
        {
            /*
                - Sync all new record as Extracted
                - Assign Batch Numbers to all Extracted and Change status to Merged
                - Find all batch numbers with status as Prepared
                - Find if those 5 fields exist with status Merged
                If Found then compare All amounts using Rev ids between Merged and Prepared records

                - If all amount same, set to Duplicate
                - Else dont change status and Keep merged
             */
            try
            {
                // Get All AN Rows
                List<AdvanceNotice> AllRows = GetANsControlTableData();
                //Get All Prepared batchNo 
                List<AdvanceNotice> BatchNoDistRows = GetAllPreparedBatchNo();
                foreach (AdvanceNotice row in BatchNoDistRows)
                {
                    bool IsAmountMisMatched = false;
                    string MergedBatchNo = null;
                    bool NothingToProcess = false; // This flag will be used to make sure that status is kept "Merged" is amount is not change
                    bool IsCountMisMatch = false;
                    bool IsPreparedRevenueRecordExist = false;
                    List<AdvanceNotice> AllRevIds = AllRows.Where(i => i.BatchNo == row.BatchNo).ToList();//Prepared Revenue Ids
                                                                                                          // List<AdvanceNotice> SpecificPreparedList = AllRows.Where(i => i.RevenueID == row.RevenueID  && i.Status == "Prepared").ToList();

                    AdvanceNotice ANMergedBatchNo = AllRows.Where(i => i.RevenueID == AllRevIds[0].RevenueID && i.Status == "Merged").FirstOrDefault();
                    if (ANMergedBatchNo != null)
                    {
                        List<AdvanceNotice> SpecificMergedList = AllRows.Where(i => i.BatchNo == ANMergedBatchNo.BatchNo).ToList();

                        if (AllRevIds.Count != SpecificMergedList.Count)
                        {
                            //Below flags will make sure that record is set to Merged and not Duplicate
                            IsAmountMisMatched = true;
                            NothingToProcess = false;
                            IsCountMisMatch = true;
                            continue;
                        }

                        foreach (AdvanceNotice datarow in AllRevIds)
                        {
                            IsPreparedRevenueRecordExist = SpecificMergedList.Exists(i => i.RevenueID == datarow.RevenueID);
                            if (!IsPreparedRevenueRecordExist)
                            {
                                //Below flags will make sure that record is set to Merged and not Duplicate
                                IsAmountMisMatched = true;
                                NothingToProcess = false;
                                break;
                            }
                        }
                    }


                    if (IsCountMisMatch != true || IsPreparedRevenueRecordExist == true)
                    {
                        foreach (AdvanceNotice data in AllRevIds)
                        {
                            List<AdvanceNotice> RevAmountList = AllRows.Where(i => i.RevenueID == data.RevenueID).ToList();
                            if (RevAmountList.Count() > 1)
                            {
                                AdvanceNotice PreparedRecord = RevAmountList.Where(i => i.Status == "Prepared").First();
                                AdvanceNotice MergedRecord = RevAmountList.Where(i => i.Status == "Merged").First();
                                MergedBatchNo = MergedRecord.BatchNo;
                                if (PreparedRecord.Amount != MergedRecord.Amount || PreparedRecord.CollectionDate != MergedRecord.CollectionDate)
                                {
                                    //Below flags will make sure that record is set to Merged and not Duplicate
                                    IsAmountMisMatched = true;
                                    NothingToProcess = false;
                                    break;
                                }
                            }
                            else
                            {
                                NothingToProcess = true;
                            }
                        }
                    }
                    if (!IsAmountMisMatched && NothingToProcess == false)
                    {
                        //set duplicate while AN batch
                        UpdateDuplicateStatusInANUsingBatchNo(MergedBatchNo);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in updateDuplicateStatusInAN: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

        }
        public void UpdateDuplicateStatusInANUsingBatchNo(string BatchNo)
        {
            appLogger.Info("Updating Duplicate status for BatchNo" + BatchNo);
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "UPDATE `AdvanceNoticeControl` SET Status = 'Duplicate' where BatchNo=" + BatchNo;
                appLogger.Info("Update query executed: " + sql);
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
                appLogger.Info("Duplicate status updated for BatchNo: " + BatchNo);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in Update UpdateDuplicateStatusInAdvanceNotice: " + e.Message + " for BatchNo" + BatchNo);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            finally
            {
                conn.Close();
            }
        }
        public List<AdvanceNotice> GetAllPreparedBatchNo()
        {
            List<AdvanceNotice> ANList = new List<AdvanceNotice>();
            try
            {
                string Query = "SELECT distinct(BatchNo) FROM AdvanceNoticeControl WHERE Status = 'Prepared'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {
                        AdvanceNotice AdObj = new AdvanceNotice();
                        AdObj.BatchNo = Reader["BatchNo"] != null ? Reader["BatchNo"].ToString() : null;
                        //AdObj.RevenueID = Reader["RevenueID"] != null ? Reader["RevenueID"].ToString() : null;
                        ANList.Add(AdObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetAllBatchNoPrepared: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);

            }
            return ANList;

        }
        public List<AdvanceNotice> GetAdvanceNoticeTable(string Type)
        {
            List<AdvanceNotice> sdList = new List<AdvanceNotice>();
            appLogger.Info("GetAdvanceNoticeTable with type " + Type + " process started...");
            try
            {
                string Query = "";
                if (Type == "All")
                {
                    Query = "SELECT RevenueID,LookupID,DirectDebitReferenceNo,DirectDebitAccountNo,TriggerType,Office,Frequency,CollectionDate,BatchNo,Status FROM  AdvanceNoticeControl";
                }
                else
                {
                    Query = "SELECT RevenueID,LookupID,DirectDebitReferenceNo,DirectDebitAccountNo,TriggerType,Office,Frequency,CollectionDate,BatchNo,Status FROM  AdvanceNoticeControl WHERE Status = 'Extracted' AND BatchNo is null";
                }
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {
                        AdvanceNotice AdObj = new AdvanceNotice();
                        AdObj.RevenueID = Reader["RevenueID"].ToString();
                        AdObj.LookupID = Reader["LookupID"] != null ? Reader["LookupID"].ToString() : null;
                        AdObj.DirectDebitReferenceNo = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : null;
                        AdObj.DirectDebitAccountNo = Reader["DirectDebitAccountNo"] != null ? Reader["DirectDebitAccountNo"].ToString() : null;
                        AdObj.TriggerType = Reader["TriggerType"] != null ? Reader["TriggerType"].ToString() : null;
                        AdObj.Frequency = Reader["Frequency"] != null ? Reader["Frequency"].ToString() : null;
                        AdObj.Office = Reader["Office"] != null ? Reader["Office"].ToString() : null;
                        AdObj.CollectionDate = !string.IsNullOrEmpty(Reader["CollectionDate"].ToString()) ? Convert.ToDateTime(Reader["CollectionDate"]).ToString("yyyy-MM-dd") : null;
                        AdObj.BatchNo = Reader["BatchNo"] != null ? Reader["BatchNo"].ToString() : null;
                        AdObj.Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                        sdList.Add(AdObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchAllRecords for advance notice: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Advance Notice process ended...");
            return sdList;
        }
        public void GenerateBatchNo()
        {
            List<AdvanceNotice> DupListFromDB = new List<AdvanceNotice>();
            List<AdvanceNotice> AllRows = new List<AdvanceNotice>();
            AllRows = GetAdvanceNoticeTable("All");
            List<AdvanceNotice> WithoutBatchIDRows = new List<AdvanceNotice>();
            WithoutBatchIDRows = GetAdvanceNoticeTable("WithoutBatchIDRows");

            //Case for Advance Notice record already present in DB
            List<AdvanceNotice> DuplicateRecordsList = (from ad1 in AllRows
                                                        from ad2 in WithoutBatchIDRows
                                                        where ad1.LookupID == ad2.LookupID && ad1.DirectDebitAccountNo == ad2.DirectDebitAccountNo && ad1.DirectDebitReferenceNo == ad2.DirectDebitReferenceNo && ad1.TriggerType == ad2.TriggerType && ad1.Office == ad2.Office && ad1.Frequency == ad2.Frequency && ad1.CollectionDate == ad2.CollectionDate
                                                        select ad1).ToList();
            List<AdvanceNotice> DuplicateWithBatchIDRows = DuplicateRecordsList.GroupBy(i => new { i.LookupID, i.TriggerType, i.DirectDebitReferenceNo, i.Office, i.Frequency, i.DirectDebitAccountNo, i.CollectionDate })
                    .Where(g => g.Count() > 1)
                    .Select(s => s.FirstOrDefault()).ToList();

            /*if (DuplicateWithBatchIDRows.Count() > 0)
            {
                foreach (AdvanceNotice advanceNotice in DuplicateWithBatchIDRows)
                {
                    int BatchId = !string.IsNullOrEmpty(advanceNotice.BatchNo) ? Convert.ToInt32(advanceNotice.BatchNo) : 0;
                    if (BatchId != 0)
                        UpdateBatchID(advanceNotice, BatchId);
                    else
                        appLogger.Info("BatchId is zero for AN Record already in DB please check this record" + advanceNotice.LookupID);

                }
            }*/


            if (WithoutBatchIDRows.Count > 0)
            {
                var duplicateRecords = WithoutBatchIDRows.GroupBy(i => new { i.LookupID, i.TriggerType, i.DirectDebitReferenceNo, i.Office, i.Frequency, i.DirectDebitAccountNo, i.CollectionDate })
                   .Where(g => g.Count() > 1)
                   .Select(s => s.First()).ToList();

                int BatchID = FetchNextTransectionID() + 1;
                foreach (AdvanceNotice adRow in duplicateRecords)
                {
                    UpdateBatchID(adRow, BatchID);// Update BatchID for duplicate records
                    BatchID++;
                }

                List<AdvanceNotice> DistinctRecords = GetDistinctRecords();

                foreach (AdvanceNotice adRow in DistinctRecords)
                {
                    UpdateBatchID(adRow, BatchID);// Update BatchID for distinct records
                    BatchID++;
                }
                UpdateProcessCounter(BatchID);//Update last Batch id in ProcessCounter
            }
        }
        public void UpdateProcessCounter(int LastTransectionCount)
        {
            appLogger.Info("Updating UpdateProcessCounter started.");
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "Update ProcessCounter set NextTransectionID=" + LastTransectionCount + " where ProcessName='AdvanceNotice'";
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
                appLogger.Info("ProcessCounter updated successfully with NextTransectionID :" + LastTransectionCount);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in Update UpdateProcessCounter" + e.Message);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Update UpdateProcessCounter for ended.");
        }
        public int FetchNextTransectionID()
        {
            int LastBatchID = 0;
            try
            {
                string Query = "SELECT * FROM `ProcessCounter` where ProcessName = 'AdvanceNotice'";

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    if (Reader.Read())
                    {
                        LastBatchID = Convert.ToInt32(Reader["NextTransectionID"]);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchNextTransectionID for advance notice" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return LastBatchID;
        }
        public List<AdvanceNotice> GetDistinctRecords()
        {
            List<AdvanceNotice> sdList = new List<AdvanceNotice>();
            try
            {
                string Query = "SELECT RevenueID,LookupID,DirectDebitReferenceNo,DirectDebitAccountNo,TriggerType,Office,Frequency,CollectionDate,BatchNo FROM  AdvanceNoticeControl where Status = 'Extracted' AND BatchNo is null";

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {
                        AdvanceNotice AdObj = new AdvanceNotice();
                        //AdObj.RecordID = Convert.ToInt32(Reader["ID"]);
                        AdObj.RevenueID = Reader["RevenueID"].ToString();
                        AdObj.LookupID = Reader["LookupID"] != null ? Reader["LookupID"].ToString() : null;
                        AdObj.DirectDebitReferenceNo = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : null;
                        AdObj.DirectDebitAccountNo = Reader["DirectDebitAccountNo"] != null ? Reader["DirectDebitAccountNo"].ToString() : null;
                        AdObj.TriggerType = Reader["TriggerType"] != null ? Reader["TriggerType"].ToString() : null;
                        AdObj.Frequency = Reader["Frequency"] != null ? Reader["Frequency"].ToString() : null;
                        AdObj.Office = Reader["Office"] != null ? Reader["Office"].ToString() : null;
                        AdObj.CollectionDate = Reader["CollectionDate"] != null ? Convert.ToDateTime(Reader["CollectionDate"]).ToString("yyyy-MM-dd") : null;
                        AdObj.BatchNo = Reader["BatchNo"] != null ? Reader["BatchNo"].ToString() : null;
                        sdList.Add(AdObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchAllRecords for advance notice" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return sdList;
        }
        #endregion
        public void CreateAdvanceNoticeEnquiries(long RecordId)
        {
            appLogger.Info("Create AN Enquiry Process started...");
            if (RecordId != 0)
            {
                UpdateANLog(RecordId, "Create ANs", "Start", "Oneview");
            }
            else
            {
                RecordId = UpdateANLog(RecordId, "Create ANs", "Start", "Service");
            }

            List<AdvanceNotice> rows = GetANsControlTableData(); // Orignal revenue data
            List<AdvanceNotice> DistinctRows = new List<AdvanceNotice>(); // assigned to new List to use later
            DistinctRows.AddRange(rows);
            List<AdvanceNotice> DuplicateRecords = rows.GroupBy(i => new { i.BatchNo })
               .Where(g => g.Count() > 1)
               .Select(s => s.First()).ToList();
            foreach (AdvanceNotice data in DuplicateRecords)
            {
                DistinctRows.RemoveAll(x => x.BatchNo == data.BatchNo);// did this to get remaining records which are no duplicated
            }
            foreach (AdvanceNotice SingleRow in DuplicateRecords)
            {
                if ((!string.IsNullOrEmpty(SingleRow.IncidentId) && SingleRow.Status == "Prepared") || SingleRow.Status == "Too Late" || SingleRow.Status == "No Action")
                {
                    continue;// if incident is already is created than skip
                }
                ANEnquiryOperation(SingleRow, rows);// create enquiry
            }

            foreach (AdvanceNotice SingleRow in DistinctRows)//create incident for single records
            {
                if ((!string.IsNullOrEmpty(SingleRow.IncidentId) && SingleRow.Status == "Prepared") || SingleRow.Status == "Too Late" || SingleRow.Status == "No Action")
                {
                    continue;// if incident is already is created than skip
                }
                ANEnquiryOperation(SingleRow, rows);// create enquiry
            }
            if (RecordId != 0)
            {
                UpdateANLog(RecordId, "Create ANs", "End", "Oneview");
            }
            else
            {
                UpdateANLog(RecordId, "Create ANs", "End", "Service");
            }
            appLogger.Info("Create AN Enquiry Process Ended...");
        }
        public void UpdateNoActionStatusInAN(string BatchNo)
        {
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "UPDATE `AdvanceNoticeControl` SET  Status = 'No Action' WHERE BatchNo=" + BatchNo;
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
                appLogger.Info("No Action status updated for BatchNo: " + BatchNo);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in updating incidentid " + e.Message + " for BatchNo: " + BatchNo);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
        }
        public OrganisationDetails GetPrimaryContactIDFromOrgBBID(string OrgLookupId)
        {
            OrganisationDetails OrgData = new OrganisationDetails();
            appLogger.Info("OrgLookupID :" + OrgLookupId + " GetPrimaryContactIDFromOrgBBID started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Supporter data";
                //string query = "SELECT SCBS_CM.Commitment.SupporterGroup.PrioritySupporterId,SCBS_CM.Commitment.Organisation.ID,SCBS_CM.Commitment.SupporterGroup.AddressSalutation FROM SCBS_CM.Commitment WHERE SCBS_CM.Commitment.SupporterGroup.BlackBaudConstituentId = '" + OrgLookupId + "' AND SCBS_CM.Commitment.EndDate is null and SCBS_CM.Commitment.Organisation.id is not null limit 0,1";

                string query = "SELECT SCBS_SUP.SupporterGroupLinks.SupporterGroupID.PrioritySupporterId,SCBS_SUP.SupporterGroupLinks.OrganisationID,SCBS_SUP.SupporterGroupLinks.SupporterGroupID.AddressSalutation FROM SCBS_SUP.SupporterGroupLinks WHERE SCBS_SUP.SupporterGroupLinks.SupporterGroupID.BlackBaudConstituentId = '" + OrgLookupId + "' AND SCBS_SUP.SupporterGroupLinks.OrganisationID is not null limit 0,1";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        OrgData.PrioritySupporterId = Convert.ToInt64(values[0]);
                        OrgData.OrgId = Convert.ToInt64(values[1]);
                        OrgData.SupporterGroupAddressSalutation = values[2];
                    }
                    else
                    {
                        appLogger.Info("No Priority Supporter found with given OrgLookupID: " + OrgLookupId);
                        return null;
                    }
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetPrimaryContactIDFromOrgBBID: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetPrimaryContactIDFromOrgBBID ended...");
            return OrgData;
        }
        public OrganisationDetails GetOrganisations(long OrgID)
        {
            appLogger.Info("OrgID " + OrgID + " GetOrganisations for advance notice process started...");
            OrganisationDetails Orgdata = new OrganisationDetails();
            try
            {

                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get Organisations";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string Query = "Select organization from organization O where organization.id=" + OrgID;

                Organization organisationTemplate = new Organization();
                organisationTemplate.CustomFields = new GenericObject() { };

                RNObject[] objectTemplates = new RNObject[] { organisationTemplate };

                QueryResultData[] result;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out result);

                foreach (QueryResultData fetchresult in result)
                {
                    foreach (RNObject RNorganisation in fetchresult.RNObjectsResult)
                    {

                        Organization organisation = (Organization)RNorganisation;
                        foreach (GenericField fetchchildfields in ((GenericObject)(organisation.CustomFields.GenericFields[3].DataValue.Items[0])).GenericFields)
                        {
                            switch (fetchchildfields.name)
                            {
                                case "add_street_line1":
                                    string add_street_line1 = fetchchilddata(fetchchildfields);
                                    if (add_street_line1 != "Null data")
                                    {
                                        Orgdata.street1 = add_street_line1;
                                    }
                                    break;
                                case "add_street_line2":
                                    string add_street_line2 = fetchchilddata(fetchchildfields);
                                    if (add_street_line2 != "Null data")
                                    {
                                        Orgdata.street2 = add_street_line2;
                                    }
                                    break;
                                case "add_street_line3":
                                    string add_street_line3 = fetchchilddata(fetchchildfields);
                                    if (add_street_line3 != "Null data")
                                    {
                                        Orgdata.street3 = add_street_line3;
                                    }
                                    break;
                                case "add_street_line4":
                                    string add_street_line4 = fetchchilddata(fetchchildfields);
                                    if (add_street_line4 != "Null data")
                                    {
                                        Orgdata.street4 = add_street_line4;
                                    }
                                    break;
                                case "add_street_line5":
                                    string add_street_line5 = fetchchilddata(fetchchildfields);
                                    if (add_street_line5 != "Null data")
                                    {
                                        Orgdata.street5 = add_street_line5;
                                    }
                                    break;
                                case "add_city":
                                    string add_city = fetchchilddata(fetchchildfields);
                                    if (add_city != "Null data")
                                    {
                                        Orgdata.city = add_city;
                                    }
                                    break;
                                case "add_county":
                                    string add_county = fetchchilddata(fetchchildfields);
                                    if (add_county != "Null data")
                                    {
                                        Orgdata.county = add_county;
                                    }
                                    break;
                                case "add_postal_code":
                                    string add_postal_code = fetchchilddata(fetchchildfields);
                                    if (add_postal_code != "Null data")
                                    {
                                        Orgdata.postcode = add_postal_code;
                                    }
                                    break;
                                case "undeliverable":
                                    string undeliverable = fetchchilddata(fetchchildfields);
                                    if (undeliverable != "Null data")
                                    {
                                        Orgdata.undeliverable = undeliverable;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Info("Error in getOrganisations: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("OrgID " + OrgID + " GetOrganisations for advance notice process ended...");
            return Orgdata;
        }
        public void ANEnquiryOperation(AdvanceNotice SingleRow, List<AdvanceNotice> rows)
        {
            string Template = null;
            string BoilerTemplateType = null;
            List<AdvanceNotice> SameRecords = rows.Where(i => i.BatchNo == SingleRow.BatchNo).ToList();
            AdvanceNoticeTemplate template = FetchAdvanceNoticeTemplate(SingleRow.TriggerType);
            AdvanceNoticeTemplate BoilerTemplate = GetBoilerplate();
            AdvanceNoticeContact contact = CheckEmailValidated(SingleRow.LookupID, false);
            if (contact == null)//Variation Story: Pulling through Group/Organisation IE40
            {

                OrganisationDetails SupOrgData = GetPrimaryContactIDFromOrgBBID(SingleRow.LookupID);
                if (SupOrgData != null)
                {
                    contact = CheckEmailValidated(SupOrgData.PrioritySupporterId.ToString(), true);
                    OrganisationDetails OrgData = GetOrganisations(SupOrgData.OrgId);
                    contact.street1 = OrgData.street1;
                    contact.street2 = OrgData.street2;
                    contact.street3 = OrgData.street3;
                    contact.street4 = OrgData.street4;
                    contact.street5 = OrgData.street5;
                    contact.town = OrgData.city;
                    contact.postcode = OrgData.postcode;
                    contact.county = OrgData.county;
                    contact.Undeliverable = OrgData.undeliverable;
                    contact.SupporterGroupAddressSalutation = SupOrgData.SupporterGroupAddressSalutation;
                }
            }
            string TodaysDate = DateTime.Now.ToString("dd MMMM yyyy");

            string CampaignFormType = "";
            string TemplateType = "";
            if (contact != null)
            {
                //contact.EmailValidated = ""; // Delete after done with testing
                #region postalAddress
                string FontFamily = "<span style=^font-family: GothamBook;^>";
                string postalAddress = "";
                if (!string.IsNullOrEmpty(contact.SupporterGroupAddressSalutation) && contact.SupporterGroupAddressSalutation != "Null data")
                {
                    postalAddress += "" + contact.SupporterGroupAddressSalutation + "<br>";//For OrgCase only
                }
                if (!string.IsNullOrWhiteSpace(contact.street1) && contact.street1 != "Null data")
                {
                    postalAddress += "" + FontFamily + contact.street1.Trim() + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.street2) && contact.street2 != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.street2 + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.street3) && contact.street3 != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.street3 + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.street4) && contact.street4 != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.street4 + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.street5) && contact.street5 != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.street5 + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.town) && contact.town != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.town + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.county) && contact.county != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.county + "</span></br>";
                }
                if (!string.IsNullOrWhiteSpace(contact.postcode) && contact.postcode != "Null data")
                {
                    postalAddress += "<br>" + FontFamily + contact.postcode + "</span></br>";
                }
                #endregion

                if (template.Action == "Manual")
                {
                    CampaignFormType = "Advanced Notice – Check and Send";//manual
                    Template = template.EmailTemplate;
                    TemplateType = "Email";
                    BoilerTemplateType = BoilerTemplate.EmailTemplate;
                }
                else
                {
                    if (contact.EmailValidated == "Email Validated")
                    {
                        if (template.Action == "Automated")
                        {
                            CampaignFormType = "Advanced Notice – Automated";
                            Template = template.EmailTemplate;
                            TemplateType = "Email";
                            BoilerTemplateType = BoilerTemplate.EmailTemplate;
                        }
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(contact.Undeliverable) && contact.Undeliverable != "Null data")
                        {
                            CampaignFormType = "Advanced Notice - Undeliverable";
                            Template = template.LetterTemplate;
                            TemplateType = "Letter";
                            BoilerTemplateType = BoilerTemplate.LetterTemplate;
                        }
                        else
                        {
                            CampaignFormType = "Advanced Notice – Print and Send";
                            Template = template.LetterTemplate;
                            TemplateType = "Letter";
                            BoilerTemplateType = BoilerTemplate.LetterTemplate;
                        }
                    }
                }
                /*
                CampaignFormType = "Advanced Notice – Print and Send";
                Template = template.LetterTemplate;
                TemplateType = "Letter";
                BoilerTemplateType = BoilerTemplate.LetterTemplate;
                */
                /*
                if (contact.EmailValidated == "Email Validated" && template.Action == "Automated")
                {
                    CampaignFormType = "Advanced Notice – Automated";
                    Template = template.EmailTemplate;
                    TemplateType = "Email";
                    BoilerTemplateType = BoilerTemplate.EmailTemplate;
                }
                else if (contact.EmailValidated == "Email Validated" && template.Action == "Manual")
                {
                    CampaignFormType = "Advanced Notice – Check and Send";
                    Template = template.EmailTemplate;
                    TemplateType = "Email";
                    BoilerTemplateType = BoilerTemplate.EmailTemplate;
                }
                else
                {
                    CampaignFormType = "Advanced Notice – Print and Send";
                    Template = template.LetterTemplate;
                    TemplateType = "Letter";
                    BoilerTemplateType = BoilerTemplate.LetterTemplate;
                }

                if (!string.IsNullOrEmpty(contact.Undeliverable) && contact.Undeliverable != "Null data")
                {
                    CampaignFormType = "Advanced Notice - Undeliverable";
                }
                */
                if (contact.ContactID != 0)
                {
                    AdvanceNoticeIncident incidentdata = new AdvanceNoticeIncident();
                    incidentdata.Type = SingleRow.TriggerType;
                    incidentdata.TemplateType = TemplateType;
                    incidentdata.ContactID = contact.ContactID;
                    decimal AggregateAmount = 0;
                    List<AdvanceNoticeDonationDetails> DonList = new List<AdvanceNoticeDonationDetails>();
                    foreach (AdvanceNotice advance in SameRecords)
                    {
                        AdvanceNoticeDonationDetails don = new AdvanceNoticeDonationDetails();
                        AggregateAmount += advance.Amount;
                        don.Amount = advance.Amount;
                        don.Designation = advance.Designation;
                        don.PreferredChildName = advance.PreferredChildName;
                        don.RecordId = advance.RecordID;
                        don.Currency = advance.Currency;
                        don.AdvanceNoticeDateSent = advance.AdvanceNoticeDateSent;
                        don.RevenueId = advance.RevenueID;
                        DonList.Add(don);
                    }

                    string NextCollectionDate = Convert.ToDateTime(SingleRow.CollectionDate).ToString("dd MMMM yyyy");
                    string CollectionDateOrdinal = AddOrdinal(Convert.ToDateTime(SingleRow.CollectionDate).Day);
                    string AccountNo = SingleRow.DirectDebitAccountNo;

                    Template = Template.Replace("{ADVANCE_NOTICE_DATE_STAMP}", FontFamily + TodaysDate + "</span>");
                    Template = Template.Replace("{PAYER_LETTER_SALUTATION}", contact.LetterSalutation);
                    Template = Template.Replace("{OFFICE}", SingleRow.Office);
                    Template = Template.Replace("{CURRENCY_SYMBOL}", SingleRow.Currency);
                    Template = Template.Replace("{AGGREGATED_AMOUNT}", AggregateAmount.ToString());
                    Template = Template.Replace("{NEXT_COLLECTION_DATE}", NextCollectionDate);
                    Template = Template.Replace("{COLLECTION_DATE_ORDINAL}", CollectionDateOrdinal);
                    Template = Template.Replace("{ACCOUNT_ENDING}", AccountNo.Substring(AccountNo.Length - 4));
                    Template = Template.Replace("{DD_REFERENCE_NUMBER}", SingleRow.DirectDebitReferenceNo);
                    Template = Template.Replace("{PAYER_ADDRESS_SALUTATION}", contact.AddressSalutation);
                    Template = Template.Replace("{PAYER_LETTER_ADDRESS}", postalAddress);
                    Template = Template.Replace("{DESIGNATION}", SingleRow.Designation);
                    Template = Template.Replace("{PREFERRED_CHILD_NAME}", SingleRow.PreferredChildName);
                    Template = Template.Replace("{CHANGE}", SingleRow.Frequency);
                    Template = Template.Replace("{CHANGE_DESC}", SingleRow.Frequency);
                    if (SingleRow.Frequency == "Annually")
                    {
                        Template = Template.Replace("{ADJUSTED_FREQUENCY}", "annual");
                    }
                    else
                    {
                        Template = Template.Replace("{ADJUSTED_FREQUENCY}", SingleRow.Frequency.ToLower());
                    }

                    Template = Template.Replace("{FREQUENCY}", SingleRow.Frequency.ToLower());
                    Template = Template.Replace("{SIGNATURE}", "<img src=^" + CukAutomationOperations.Model.Constant.SIGNATURE + "^ width=^90^ height=^35^ />");
                    incidentdata.DonationList = DonList;
                    BoilerTemplateType = BoilerTemplateType.Replace("{DIRECTDEBITLOGO}", "<img src=^" + CukAutomationOperations.Model.Constant.DIRECTDEBITLOGO + "^ width=^150^ height=^63^ />");
                    incidentdata.Template = Template.Replace("{DirectDebitGuarantee}", BoilerTemplateType);
                    incidentdata.CampaignFormType = CampaignFormType;
                    incidentdata.RecordId = SingleRow.RecordID;
                    incidentdata.lookupid = SingleRow.LookupID;
                    incidentdata.Office = SingleRow.Office;
                    incidentdata.DDRef = SingleRow.DirectDebitReferenceNo;
                    CreateIncidentAdvanceNotice(incidentdata);
                }
                else
                {
                    appLogger.Info("Incident not created as contact id not found with lookupid" + SingleRow.LookupID);
                }
            }
            else
            {
                appLogger.Info("Contact records not found in RN for lookupid: " + SingleRow.LookupID);
            }
        }
        public static string AddOrdinal(int num)
        {
            if (num <= 0) return num.ToString();

            switch (num % 100)
            {
                case 11:
                case 12:
                case 13:
                    return num + "th";
            }

            switch (num % 10)
            {
                case 1:
                    return num + "st";
                case 2:
                    return num + "nd";
                case 3:
                    return num + "rd";
                default:
                    return num + "th";
            }
        }
        public AdvanceNoticeTemplate GetBoilerplate()
        {
            appLogger.Info("Fetching GetBoilerplate started...");
            AdvanceNoticeTemplate AdObj = new AdvanceNoticeTemplate();
            try
            {
                string Query = "SELECT * FROM advance_notice_template_conf where EventType='DirectDebitGuarantee'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {

                        AdObj.Office = Reader["Office"] != null ? Reader["Office"].ToString() : null;
                        AdObj.TemplateID = Convert.ToInt32(Reader["TemplateID"]);
                        AdObj.ProcessType = Reader["ProcessType"] != null ? Reader["ProcessType"].ToString() : null;
                        AdObj.EventType = Reader["EventType"] != null ? Reader["EventType"].ToString() : null;
                        AdObj.EventDescription = Reader["EventDescription"] != null ? Reader["EventDescription"].ToString() : null;
                        AdObj.EmailTemplate = Reader["EmailTemplate"] != null ? Reader["EmailTemplate"].ToString() : null;
                        AdObj.LetterTemplate = Reader["LetterTemplate"] != null ? Reader["LetterTemplate"].ToString() : null;
                        AdObj.Action = Reader["Action"] != null ? Reader["Action"].ToString() : null;
                        AdObj.Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetBoilerplate for advance notice" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Fetching GetBoilerplate Ended...");
            return AdObj;
        }
        public AdvanceNoticeContact CheckEmailValidated(string ID, bool IsOrgLookup)
        {
            string email = null;
            AdvanceNoticeContact cObj = new AdvanceNoticeContact();
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader
                {
                    AppID = "Fetch Supporter Information"
                };
                string Query = null;
                if (IsOrgLookup)
                {
                    Query = "Select contact from contact where Contact.ID =" + ID;
                }
                else
                {
                    Query = "Select contact from contact where Contact.customFields.c.blackbaudid ='" + ID + "'";
                }
                Contact contactTemplate = new Contact();
                contactTemplate.CustomFields = new GenericObject() { };
                contactTemplate.Emails = new Email[] { };

                RNObject[] objectTemplates = new RNObject[] { contactTemplate };

                QueryResultData[] results;

                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out results);

                if (results[0].RNObjectsResult.Length == 0)
                {
                    return null;
                }
                Contact contact = (Contact)results[0].RNObjectsResult[0];
                cObj.ContactID = contact.ID.id;
                foreach (RNObject RNsupporter in results[0].RNObjectsResult)
                {
                    foreach (GenericField fetchchildfields in ((GenericObject)(contact.CustomFields.GenericFields[3].DataValue.Items[0])).GenericFields)
                    {
                        switch (fetchchildfields.name)
                        {
                            case "addresssalutation":
                                string AddressSalutation = fetchchilddata(fetchchildfields);
                                if (AddressSalutation != "Null data")
                                {
                                    cObj.AddressSalutation = AddressSalutation;
                                }
                                break;
                            case "salutationletter":
                                string salutationletter = fetchchilddata(fetchchildfields);
                                if (salutationletter != "Null data")
                                {
                                    cObj.LetterSalutation = salutationletter;
                                }
                                break;
                            case "street1":
                                cObj.street1 = fetchchilddata(fetchchildfields);
                                break;
                            case "street2":
                                cObj.street2 = fetchchilddata(fetchchildfields);
                                break;
                            case "street3":
                                cObj.street3 = fetchchilddata(fetchchildfields);
                                break;
                            case "street4":
                                cObj.street4 = fetchchilddata(fetchchildfields);
                                break;
                            case "street5":
                                cObj.street5 = fetchchilddata(fetchchildfields);
                                break;
                            case "town":
                                cObj.town = fetchchilddata(fetchchildfields);
                                break;
                            case "county":
                                cObj.county = fetchchilddata(fetchchildfields);
                                break;
                            case "postcode":
                                cObj.postcode = fetchchilddata(fetchchildfields);
                                break;
                            case "undeliverable":
                                cObj.Undeliverable = fetchchilddata(fetchchildfields);
                                break;
                        }
                    }
                }

                if (contact.Emails != null && contact.Emails[0].AddressType.ID.id == 0 && !string.IsNullOrEmpty(contact.Emails[0].Address) && contact.Emails[0].Invalid == false)
                {
                    cObj.EmailValidated = "Email Validated";
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error for Supporter : " + ID + " in CheckEmailValidated : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return cObj;
        }
        public void UpdateIncidentID(int Recordid, string IncidentID, string lookupid, string Type)
        {
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "UPDATE `AdvanceNoticeControl` SET IncidentID = '" + IncidentID + "',Type = '" + Type + "', Status = 'Prepared',EnquiryCreatedTime=NOW() WHERE ID=" + Recordid;
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
                appLogger.Info("Incidentid " + IncidentID + " Updated for lookupid:" + lookupid);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in updating incidentid " + IncidentID + " for lookupid:" + lookupid + e.Message);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
        }
        public void UpdateIncidentID(int Recordid, string IncidentID, string lookupid)
        {
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "UPDATE `AdvanceNoticeControl` SET IncidentID = '" + IncidentID + "', Status = 'Prepared',EnquiryCreatedTime=NOW() WHERE ID=" + Recordid;
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
                appLogger.Info("Incidentid " + IncidentID + " Updated for lookupid:" + lookupid);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in updating incidentid " + IncidentID + " for lookupid:" + lookupid + e.Message);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
        }
        public bool CreateIncidentAdvanceNotice(AdvanceNoticeIncident incidentdata)
        {

            int Queue = 104;
            switch (incidentdata.CampaignFormType)
            {
                case "Advanced Notice – Automated":
                    Queue = 106;
                    break;
                case "Advanced Notice – Check and Send":
                    Queue = 105;
                    break;
                case "Advanced Notice – Print and Send":
                    Queue = 107;
                    break;
                case "Advanced Notice - Undeliverable":
                    Queue = 104;
                    break;
            }

            int Category = 0;
            int MailBox = 0;
            int Disposition = 0;
            if (incidentdata.Office == "UK")
            {
                MailBox = 1;//1 - Compassion UK
                Category = 37; //37 - Direct Debit donations
            }
            else if (incidentdata.Office == "Ireland")
            {
                MailBox = 48; //48 - Compassion IE
                Category = 905; //905 - SEPA Direct Debit
            }

            appLogger.Info("Creating Incident for Advance Notice process");
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {
                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = incidentdata.ContactID,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = Queue,
                            idSpecified = true
                        }
                    },
                    Mailbox = new NamedID
                    {
                        ID = new ID
                        {
                            id = MailBox,
                            idSpecified = true
                        }
                    },
                    Product = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 443,
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 303, //Supporting Compassion / Donation
                                    idSpecified = true
                                }
                            }
                        }
                    },
                    Category = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 1177,//1177  - Advance Notice
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 685,//Tapiwa Ngoma
                                idSpecified = true
                            }
                        }
                    },
                    // Disposition is not added in RN dev
                    /*Disposition = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = Disposition,
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 1126, //
                                    idSpecified = true
                                }
                            }
                        }
                    },*/
                    Subject = "Information about your Direct Debit donation",//"Advance notice - " + incidentdata.Type + " - change requested on " + DateTime.Now.ToString("dd MM yyyy"),
                };
                RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];

                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                thrd[0].EntryType = new NamedID { ID = new ID { id = 2, idSpecified = true } }; // 1 for private note
                thrd[0].ContentType = new NamedID { ID = new ID { id = 2, idSpecified = true } }; //html type
                //thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                string DonationData = null;
                string DonationTable = null;
                string PdfDonationTable = null;
                string PdfDonationData = null;
                /*
                foreach (AdvanceNoticeDonationDetails data in incidentdata.DonationList)
                {
                    string Amount = !string.IsNullOrEmpty(data.Amount.ToString()) ? data.Amount.ToString() : "&nbsp";
                    string Designation = !string.IsNullOrEmpty(data.Designation) ? data.Designation : "&nbsp";
                    string PreferredChildName = !string.IsNullOrEmpty(data.PreferredChildName) ? " ("+data.PreferredChildName+")" : "&nbsp";
                    string Change = string.IsNullOrEmpty(data.AdvanceNoticeDateSent) ? "&#10003;" : "&nbsp";
                    DonationData += "<tr><th style=^border: 1px solid black;^>" + Designation + PreferredChildName + "</th><th style=^border: 1px solid black;^>" + data.Currency + Amount + ".00" + "</th><th style=^border: 1px solid black;^>" + Change + "</th></tr>";
                }
                DonationTable = "<table style=^border-collapse: collapse;border: 1px solid black;^><tr><th style=^border: 1px solid black;^>Purpose</th><th style=^border: 1px solid black;^>Amount</th><th style=^border: 1px solid black;^>Change</th></tr>" + DonationData + "</table>";
                */

                string border = "border: 1px solid black;";
                string BorderTopNone = "border-top:none;";
                string BorderLeftNone = "border-left:none;";
                string BorderRightNone = "border-right:none;";
                string BorderBottomNone = "border-bottom:none;";
                string HeaderFontFamily = "font-family: GothamMedium;";
                string FontFamily = "font-family: GothamBook;";
                string MiddleColumnBorder = "";
                int Counter = 0;
                int LastDonationRow = incidentdata.DonationList.Count - 1;

                string TableHead = "<tr><th style=^" + HeaderFontFamily + border + BorderLeftNone + BorderTopNone + "^><strong>Purpose</strong></th><th style=^" + border + BorderTopNone + "^><strong>Amount</strong></th><th style=^" + border + BorderRightNone + BorderTopNone + "^><strong>Change</strong></th></tr>";

                if (incidentdata.DonationList.Count == 1)
                {
                    foreach (AdvanceNoticeDonationDetails data in incidentdata.DonationList)
                    {
                        BorderLeftNone += BorderBottomNone;
                        MiddleColumnBorder = BorderBottomNone;
                        BorderRightNone += BorderBottomNone;

                        string Amount = !string.IsNullOrEmpty(data.Amount.ToString()) ? data.Amount.ToString() : " ";
                        string Designation = !string.IsNullOrEmpty(data.Designation) ? data.Designation : " ";
                        string PreferredChildName = !string.IsNullOrEmpty(data.PreferredChildName) ? " (" + data.PreferredChildName + ")" : "";
                        string Change = string.IsNullOrEmpty(data.AdvanceNoticeDateSent) ? "<img src=^" + CukAutomationOperations.Model.Constant.TICK + "^ width=^24^ height =^24^/>" : "&nbsp";
                        DonationData += "<tr style=^" + FontFamily + "^><td style=^" + border + BorderLeftNone + "^>" + Designation + PreferredChildName + "</td><td style=^" + border + MiddleColumnBorder + "^>" + data.Currency + Amount + "</td><td style=^" + border + BorderRightNone + "^>" + Change + "</td></tr>";
                    }
                }
                else
                {
                    foreach (AdvanceNoticeDonationDetails data in incidentdata.DonationList)
                    {
                        Counter++;
                        if (LastDonationRow == Counter)
                        {
                            BorderLeftNone += BorderBottomNone;
                            MiddleColumnBorder = BorderBottomNone;
                            BorderRightNone += BorderBottomNone;
                        }
                        string Amount = !string.IsNullOrEmpty(data.Amount.ToString()) ? data.Amount.ToString() : " ";
                        string Designation = !string.IsNullOrEmpty(data.Designation) ? data.Designation : " ";
                        string PreferredChildName = !string.IsNullOrEmpty(data.PreferredChildName) ? " (" + data.PreferredChildName + ")" : "";
                        string Change = string.IsNullOrEmpty(data.AdvanceNoticeDateSent) ? "<img src=^" + CukAutomationOperations.Model.Constant.TICK + "^ width=^24^ height =^24^/>" : "&nbsp";
                        DonationData += "<tr style=^" + FontFamily + "^><td style=^" + border + BorderLeftNone + "^>" + Designation + PreferredChildName + "</td><td style=^" + border + MiddleColumnBorder + "^>" + data.Currency + Amount + "</td><td style=^" + border + BorderRightNone + "^>" + Change + "</td></tr>";
                    }
                }

                DonationTable = "<table style=^text-align:center;border-collapse: collapse;^>" + TableHead + DonationData + "</table>";

                //incidentdata.TemplateType = "Letter";

                if (incidentdata.TemplateType == "Letter")//add pdf only for letter template
                {
                    foreach (AdvanceNoticeDonationDetails data in incidentdata.DonationList)
                    {
                        string Amount = !string.IsNullOrEmpty(data.Amount.ToString()) ? data.Amount.ToString() : " ";
                        string Designation = !string.IsNullOrEmpty(data.Designation) ? data.Designation : " ";
                        string PreferredChildName = !string.IsNullOrEmpty(data.PreferredChildName) ? " (" + data.PreferredChildName + ")" : "";
                        string Change = string.IsNullOrEmpty(data.AdvanceNoticeDateSent) ? "<div style=^margin:0 auto; width: 24px^><img src=^" + CukAutomationOperations.Model.Constant.TICK + "^ width =^24^ height =^24^ /></div>" : "<div style=^margin:0 auto; width: 24px^></div>";
                        PdfDonationData += "<tr style=^" + FontFamily + "^><td style=^border-right: 1px solid black;border-top: 1px solid black;^>" + Designation + PreferredChildName + "</td><td style=^border-right: 1px solid black;border-top: 1px solid black;^>" + data.Currency + Amount + "</td><td style=^border-top: 1px solid black;^>" + Change + "</td></tr>";
                    }
                    PdfDonationTable = "<table style=^" + HeaderFontFamily + "text-align: center; border-collapse: collapse;line-height:30px;^><tr><th style=^border-right: 1px solid black;^><strong>Purpose</strong></th><th style=^border-right: 1px solid black;^><strong>Amount</strong></th><th><strong>Change</strong></th></tr>" + PdfDonationData + "</table>";
                }

                string ThreadTxt = incidentdata.Template.Replace("{PAYMENTS_TABLE}", DonationTable).Replace('^', '"');


                
                if (incidentdata.TemplateType == "Letter")//add pdf only for letter template
                {
                    appLogger.Info("Creating Letter template for contactid: " + incidentdata.ContactID);
                    string PdfMessage = incidentdata.Template.Replace("<div>{PAYMENTS_TABLE}</div>", "{PAYMENTS_TABLE}").Replace("{PAYMENTS_TABLE}", PdfDonationTable).Replace('^', '"');
                    string PDFUrl = GeneratePdf(incidentdata.ContactID, PdfMessage);
                    appLogger.Info("Letter Pdf Url is: " + PDFUrl);
                    if (!string.IsNullOrEmpty(PDFUrl))
                    {
                        WebClient req = new WebClient();
                        byte[] pdfByteArray = req.DownloadData(PDFUrl);
                        FileAttachmentIncident[] fileAttachmentCommon1 = new FileAttachmentIncident[2];
                        fileAttachmentCommon1[0] = new FileAttachmentIncident();
                        fileAttachmentCommon1[0].action = ActionEnum.add;
                        fileAttachmentCommon1[0].actionSpecified = true;
                        fileAttachmentCommon1[0].Data = pdfByteArray;
                        fileAttachmentCommon1[0].FileName = incidentdata.ContactID + "_document.pdf";
                        incident.FileAttachments = fileAttachmentCommon1;
                    }
                    DeletePdf("AdvanceNotice_" + incidentdata.ContactID.ToString() + ".pdf", incidentdata.ContactID.ToString());//Delete Pdf file
                }


                thrd[0].Text = ThreadTxt.Replace("<div><table", "</br><div><table").Replace("</table></div>", "</table></div></br>");
                incident.Threads = thrd;
                GenericField campaignFormTypeField = null;
                GenericField internalSubjectField = null;
                //assignaccount 99
                internalSubjectField = createGenericfield("internalsubject", createStringdataValue("Advance notice - " + incidentdata.Type + " - change requested on " + DateTime.Now.ToString("dd MM yyyy")), DataTypeEnum.STRING);


                campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1701), DataTypeEnum.NAMED_ID);//ID 1666 (TST1) ID 1701 in Prod

                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { campaignFormTypeField, internalSubjectField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);
                string ReferenceNo = GetIncidentReferenceNo(createResult[0].ID.id.ToString());
                appLogger.Info("Advance Notice Incident Created with ID " + createResult[0].ID.id + " with Reference No " + ReferenceNo);
                List<string> revenueIds = new List<string>();
                foreach (AdvanceNoticeDonationDetails data in incidentdata.DonationList)
                {
                    string Type = incidentdata.TemplateType == "Letter" ? "WhiteMail" : "Email";
                    revenueIds.Add(data.RevenueId);
                    UpdateIncidentID(data.RecordId, ReferenceNo, incidentdata.lookupid, Type);//update incident for each record
                }

                if (Queue == 104)
                {
                    appLogger.Info($"Advance Notice Undeliverable process started with ReferenceNo: {ReferenceNo}");
                    RateChangeKingslineSuppressionList rcObj = new RateChangeKingslineSuppressionList();
                    rcObj.RNID = incidentdata.ContactID.ToString();
                    rcObj.RevIDs = string.Join(",", revenueIds);
                    rcObj.EnquiryNo = ReferenceNo;
                    rcObj.DDRef = incidentdata.DDRef;
                    rcObj.KingslineANListDate = DateTime.Now.ToString("dd MMMM yyyy");

                    if (rcObj != null)
                    {
                        InsertRateChangeKingslineSuppressionListRecord(rcObj);
                    }
                    appLogger.Info($"Advance Notice Undeliverable process ended");
                }
                return true;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in creating incident for CreateIncidentAdvanceNotice " + e.Message + " For lookupid" + incidentdata.lookupid);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                return false;
            }
        }

        public RateChangeKingslineSuppressionList GetRateChangeEnquiriesForKingslineRecords(long RNID)
        {
            RateChangeKingslineSuppressionList rateChange = new RateChangeKingslineSuppressionList();
            try
            {
                string Query = "SELECT * FROM `RateChangeEnquiriesForKingsline` where RNID =" + RNID;

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    if (Reader.Read())
                    {
                        rateChange.RNID = Reader["RNID"] != null ? Reader["RNID"].ToString() : "";
                        rateChange.RevIDs = Reader["RevenueIds"] != null ? Reader["RevenueIds"].ToString() : "";
                        rateChange.EnquiryNo = Reader["EnquiryRefNo"] != null ? Reader["EnquiryRefNo"].ToString() : "";
                        rateChange.DDRef = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : "";
                        rateChange.KingslineANListDate = Reader["CreatedDate"] != null ? Reader["CreatedDate"].ToString() : "";
                    }
                    else
                    {
                        rateChange = null;
                    }
                }

                if (rateChange == null)
                {
                    rateChange = new RateChangeKingslineSuppressionList();

                    string QueryArchive = "SELECT * FROM `RateChangeEnquiriesForKingslineArchieve` where RNID = " + RNID;

                    using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                    {
                        conn.Open();
                        MySqlCommand cmd = new MySqlCommand(QueryArchive, conn);
                        MySqlDataReader Reader;
                        Reader = cmd.ExecuteReader();
                        if (Reader.Read())
                        {
                            rateChange.RNID = Reader["RNID"] != null ? Reader["RNID"].ToString() : "";
                            rateChange.RevIDs = Reader["RevenueIds"] != null ? Reader["RevenueIds"].ToString() : "";
                            rateChange.EnquiryNo = Reader["EnquiryRefNo"] != null ? Reader["EnquiryRefNo"].ToString() : "";
                            rateChange.DDRef = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : "";
                            rateChange.KingslineANListDate = Reader["CreatedDate"] != null ? Reader["CreatedDate"].ToString() : "";
                        }
                        else
                        {
                            rateChange = null;
                        }
                    }
                }


            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetWhiteMailAdvanceNoticeData: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return rateChange;
        }
        public void InsertRateChangeKingslineSuppressionListRecord(RateChangeKingslineSuppressionList rateChange)
        {
            try
            {
                string KingslineANListDate = Convert.ToDateTime(rateChange.KingslineANListDate).ToString("yyyy-MM-dd");
                string Query = $"INSERT INTO `RateChangeKingslineSuppressionList`(`RNID`, `RevIDs`, `EnquiryNo`, `DDRef`, `KingslineANListDate`) VALUES ({rateChange.RNID},'{rateChange.RevIDs}','{rateChange.EnquiryNo}','{rateChange.DDRef}','{KingslineANListDate}')";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                    appLogger.Info("InsertRateChangeKingslineSuppressionListRecord record inserted in DB with id: " + cmd.LastInsertedId);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in InsertRateChangeKingslineSuppressionListRecord: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public string GetIncidentReferenceNo(string IncidentID)
        {
            string IncidentReferenceNo = "";
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Incident data";
                String query = "SELECT Incident.lookupName FROM Incident WHERE ID=" + IncidentID;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        IncidentReferenceNo = result.CSVTables[0].Rows[0];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error while fetching GetIncidentReferenceNo :" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentReferenceNo;
        }
        public AdvanceNoticeContact GetSupporterDetails(string Lookupid)
        {
            AdvanceNoticeContact contact = new AdvanceNoticeContact();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader()
                {
                    AppID = "Get Supporter Details"
                };

                string Query = "SELECT Contact.Id,Contact.customFields.c.email_validated.lookupname FROM Contact WHERE Contact.customFields.c.blackbaudid ='" + Lookupid + "'";//8-10121840
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteContent;
                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out byteContent);
                if (result.CSVTables.Length > 0)
                {
                    string[] values = result.CSVTables[0].Rows[0].Split('^');
                    contact.ContactID = Convert.ToInt64(values[0]);
                    contact.EmailValidated = values[1];//Email Validated

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterDetails:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return contact;
        }
        public List<AdvanceNotice> GetANsControlTableData()
        {
            List<AdvanceNotice> ANList = new List<AdvanceNotice>();
            try
            {
                string Query = "SELECT ID,LookupID,DirectDebitReferenceNo,DirectDebitAccountNo,TriggerType,Frequency,Office,Amount,Designation,PreferredChildName,BatchNo,Status,IncidentID,CurrencySymbol,CollectionDate,AdvanceNoticeSentDate FROM  AdvanceNoticeControl where Status !='' Order by BatchNo ASC";
                //string Query = "SELECT * FROM `AdvanceNoticeControl` WHERE `RevenueID` LIKE 'CTRB-307579'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {
                        AdvanceNotice AdObj = new AdvanceNotice();
                        AdObj.RecordID = Convert.ToInt32(Reader["ID"]);
                        AdObj.LookupID = Reader["LookupID"] != null ? Reader["LookupID"].ToString() : null;
                        AdObj.DirectDebitReferenceNo = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : null;
                        AdObj.DirectDebitAccountNo = Reader["DirectDebitAccountNo"] != null ? Reader["DirectDebitAccountNo"].ToString() : null;
                        AdObj.TriggerType = Reader["TriggerType"] != null ? Reader["TriggerType"].ToString() : null;
                        AdObj.Frequency = Reader["Frequency"] != null ? Reader["Frequency"].ToString() : null;
                        AdObj.Office = Reader["Office"] != null ? Reader["Office"].ToString() : null;
                        AdObj.Amount = Reader["Amount"] != null ? Convert.ToDecimal(Reader["Amount"]) : 0;
                        AdObj.Designation = Reader["Designation"] != null ? Reader["Designation"].ToString() : null;
                        AdObj.PreferredChildName = Reader["PreferredChildName"] != null ? Reader["PreferredChildName"].ToString() : null;
                        AdObj.BatchNo = Reader["BatchNo"] != null ? Reader["BatchNo"].ToString() : null;
                        AdObj.Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                        AdObj.IncidentId = Reader["IncidentID"] != null ? Reader["IncidentID"].ToString() : null;
                        AdObj.Currency = Reader["CurrencySymbol"] != null ? Reader["CurrencySymbol"].ToString() : null;
                        AdObj.CollectionDate = Reader["CollectionDate"] != null ? Reader["CollectionDate"].ToString() : null;
                        AdObj.AdvanceNoticeDateSent = Reader["AdvanceNoticeSentDate"] != null ? Reader["AdvanceNoticeSentDate"].ToString() : null;
                        ANList.Add(AdObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchAllRecords for advance notice" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return ANList;
        }
        public AdvanceNoticeTemplate FetchAdvanceNoticeTemplate(string EventType)
        {
            appLogger.Info("Fetching AdvanceNoticeTemplate started...");
            AdvanceNoticeTemplate AdObj = new AdvanceNoticeTemplate();
            try
            {
                string Query = "SELECT * FROM advance_notice_template_conf where EventType='" + EventType + "'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {

                        AdObj.Office = Reader["Office"] != null ? Reader["Office"].ToString() : null;
                        AdObj.TemplateID = Convert.ToInt32(Reader["TemplateID"]);
                        AdObj.ProcessType = Reader["ProcessType"] != null ? Reader["ProcessType"].ToString() : null;
                        AdObj.EventType = Reader["EventType"] != null ? Reader["EventType"].ToString() : null;
                        AdObj.EventDescription = Reader["EventDescription"] != null ? Reader["EventDescription"].ToString() : null;
                        AdObj.EmailTemplate = Reader["EmailTemplate"] != null ? Reader["EmailTemplate"].ToString() : null;
                        AdObj.LetterTemplate = Reader["LetterTemplate"] != null ? Reader["LetterTemplate"].ToString() : null;
                        AdObj.Action = Reader["Action"] != null ? Reader["Action"].ToString() : null;
                        AdObj.Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchAdvanceNoticeTemplate for advance notice" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Fetching AdvanceNoticeTemplate Ended...");
            return AdObj;
        }
        public void UpdateBatchID(AdvanceNotice AdRows, int BatchID)
        {
            appLogger.Info("Updating BatchID for WHERE LookupID=" + AdRows.LookupID + " AND DirectDebitReferenceNo=" + AdRows.DirectDebitReferenceNo + " AND DirectDebitAccountNo=" + AdRows.DirectDebitAccountNo + " AND TriggerType=" + AdRows.TriggerType + " AND Frequency = " + AdRows.Frequency + " AND CollectionDate=" + AdRows.CollectionDate + " for BatchID: " + BatchID);

            string LookupID = !string.IsNullOrEmpty(AdRows.LookupID) ? "LookupID='" + AdRows.LookupID + "'" : "LookupID is null";
            string DirectDebitReferenceNo = !string.IsNullOrEmpty(AdRows.DirectDebitReferenceNo) ? "DirectDebitReferenceNo='" + AdRows.DirectDebitReferenceNo + "'" : "DirectDebitReferenceNo is null";
            string DirectDebitAccountNo = !string.IsNullOrEmpty(AdRows.DirectDebitAccountNo) ? "DirectDebitAccountNo='" + AdRows.DirectDebitAccountNo + "'" : "DirectDebitAccountNo is null";
            string TriggerType = !string.IsNullOrEmpty(AdRows.TriggerType) ? "TriggerType='" + AdRows.TriggerType + "'" : "TriggerType is null";
            string Frequency = !string.IsNullOrEmpty(AdRows.Frequency) ? "Frequency='" + AdRows.Frequency + "'" : "Frequency is null";
            string CollectionDate = !string.IsNullOrEmpty(AdRows.CollectionDate) ? "CollectionDate='" + AdRows.CollectionDate + "'" : "CollectionDate is null";
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "UPDATE `AdvanceNoticeControl` SET BatchNo = " + BatchID + ", Status = 'Merged',MergedTime=NOW() WHERE " + LookupID + " AND " + DirectDebitReferenceNo + " AND " + DirectDebitAccountNo + " AND " + TriggerType + " AND " + Frequency + " AND " + CollectionDate + " AND BatchNo IS NULL";
                appLogger.Info("Update BatchID query executed: " + sql);
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in Update BatchID" + e.Message);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Update BatchID for ended.");
        }
        public string GenerateBatchID()
        {
            var chars = "1234567890ABCDEFGHJKLMNPQRTUVWXYZ";
            var stringChars = new char[8];
            var random = new Random();

            for (int i = 0; i < stringChars.Length; i++)
            {
                stringChars[i] = chars[random.Next(chars.Length)];
            }
            String finalString = new String(stringChars);
            return finalString;
        }
        public string GeneratePdf(long ContactId, string Message)
        {
            string content = null;
            string PdfUrl = null;
            try
            {
                System.Net.ServicePointManager.ServerCertificateValidationCallback +=
                 (se, cert, chain, sslerror) =>
                 {
                     return true;
                 };
                var restClient = new RestClient("https://cukwebsite.co.uk/oneview/CreateAdvanceNoticePdf.php");  
                var tokenRequest = new RestRequest(Method.POST);
                tokenRequest.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                tokenRequest.AddParameter("Message", Message);
                tokenRequest.AddParameter("ContactID", ContactId);

                appLogger.Info("Request Message: " + Message);

                IRestResponse tokenResponse = restClient.Execute(tokenRequest);
                content = tokenResponse.Content; // raw content as string
                appLogger.Info("Responce content:"+ content);
                PdfResponce pdfObj = RestSharp.SimpleJson.DeserializeObject<PdfResponce>(content);
                if (pdfObj.Status == 500)
                    appLogger.Info("Error in Generating pdf due to : " + pdfObj.Message + " with contactId: " + ContactId);
                else
                    PdfUrl = pdfObj.Url;
            }
            catch (Exception e)
            {

                appLogger.Error("Error in GeneratePdf for advance notice" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                if (content != null)
                {
                    appLogger.Error("Response content : " + content);
                }
            }
            return PdfUrl;
        }
        public void DeletePdf(string FileName, string ContactId)
        {
            string content = null;
            try
            {
                System.Net.ServicePointManager.ServerCertificateValidationCallback +=
                 (se, cert, chain, sslerror) =>
                 {
                     return true;
                 };
                var restClient = new RestClient("https://cukwebsite.co.uk/oneview/DeleteAdvanceNoticePdf.php");// Dev
                var tokenRequest = new RestRequest(Method.POST);
                tokenRequest.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                tokenRequest.AddParameter("FileName", FileName);
                IRestResponse tokenResponse = restClient.Execute(tokenRequest);
                content = tokenResponse.Content; // raw content as string
                PdfResponce pdfObj = RestSharp.SimpleJson.DeserializeObject<PdfResponce>(content);
                if (pdfObj.Status == 500)
                    appLogger.Info("Error in Deleting pdf due to : " + pdfObj.Message + " with contactId: " + ContactId);
            }
            catch (Exception e)
            {

                appLogger.Error("Error in Deleting pdf for advance notice" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                if (content != null)
                {
                    appLogger.Error("Response content : " + content);
                }
            }
        }
        #endregion

        #region Sync Advance Notice Tables 
        public void DoMergedToMergedNotPrepared()
        {
            appLogger.Info("DoMergedToMergedNotPrepared process started...");
            try
            {
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    string Query = "UPDATE AdvanceNoticeControl SET Status='Merged not prepared' WHERE Status='Merged'";
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    appLogger.Info("DoMergedToMergedNotPrepared Successfully.");
                }
            }
            catch (Exception e)
            {
                appLogger.Info("Error in DoMergedToMergedNotPrepared :" + e.Message);
                appLogger.Info(e.InnerException);
                appLogger.Info(e.StackTrace);
            }
        }
        public long UpdateANLog(long RecordId, string processName, string StartOrEnd, string Type)
        {
            MySqlConnection conn = new MySqlConnection();
            long Recordid = 0;
            try
            {
                string sql = "";
                if (Type == "Service")
                {
                    if (StartOrEnd == "Start")
                    {
                        sql = "Insert into AdvanceNoticeLog (ProcessName,User," + StartOrEnd + ") values ('" + processName + "','GC_2', NOW())";
                    }
                    else
                    {
                        sql = "UPDATE `AdvanceNoticeLog` SET " + StartOrEnd + "= NOW() WHERE ID=" + RecordId;
                    }
                }
                else
                {
                    if (StartOrEnd == "Start")//then set end null in db
                    {
                        sql = "UPDATE `AdvanceNoticeLog` SET " + StartOrEnd + "= NOW(),End = null WHERE ID=" + RecordId;
                    }
                    else
                    {
                        sql = "UPDATE `AdvanceNoticeLog` SET " + StartOrEnd + "= NOW() WHERE ID=" + RecordId;
                    }
                }

                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                if (Type == "Service" && StartOrEnd == "Start")
                {
                    Recordid = cmd.LastInsertedId;
                }
                conn.Close();
                appLogger.Info("AN Log updated for process" + processName + " for " + StartOrEnd + " with ID" + RecordId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in updating UpdateANLog" + e.Message + " for processName: " + processName);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            return Recordid;
        }
        public void SyncAdvanceNoticeMain(long RecordId)
        {
            if (RecordId != 0)
            {
                UpdateANLog(RecordId, "Sync BB Data", "Start", "Oneview");
            }
            else
            {
                RecordId = UpdateANLog(RecordId, "Sync BB Data", "Start", "Service");
            }
            appLogger.Info("Sync BB Data Started...");
            //Merged to Merged not prepared
            DoMergedToMergedNotPrepared();
            //archive records 
            bool IsRecordsArchive = AdvanceNoticeRecordsOperations("Archive");
            if (IsRecordsArchive)
            {
                //delete records 
                AdvanceNoticeRecordsOperations("Delete");

                RunExport("One_Off");
                DoExportMainProcessAndSyncData("One_Off");

                RunExport("RecurringGift");
                DoExportMainProcessAndSyncData("RecurringGift");

                GenerateBatchNo();
                //Set No Action status
                SetAN_NoActionStatus();

                //Update Duplicate status
                updateDuplicateStatusInAN();
            }

            if (RecordId != 0)
            {
                UpdateANLog(RecordId, "Sync BB Data", "End", "Oneview");
            }
            else
            {
                UpdateANLog(RecordId, "Sync BB Data", "End", "Service");
            }
            appLogger.Info("Sync BB Data Ended...");
        }
        public void SetAN_NoActionStatus()
        {
            appLogger.Info("SetAN_NoActionStatus Process started...");
            List<AdvanceNotice> rows = GetANsControlTableData(); // Orignal revenue data
            List<AdvanceNotice> DistinctRows = new List<AdvanceNotice>(); // assigned to new List to use later
            DistinctRows.AddRange(rows);
            List<AdvanceNotice> DuplicateRecords = rows.GroupBy(i => new { i.BatchNo })
               .Where(g => g.Count() > 1)
               .Select(s => s.First()).ToList();
            foreach (AdvanceNotice data in DuplicateRecords)
            {
                DistinctRows.RemoveAll(x => x.BatchNo == data.BatchNo);// did this to get remaining records which are no duplicated
            }
            foreach (AdvanceNotice SingleRow in DuplicateRecords)
            {
                if ((!string.IsNullOrEmpty(SingleRow.IncidentId) && SingleRow.Status == "Prepared") || SingleRow.Status == "Too Late" || SingleRow.Status == "No Action")
                {
                    continue;// if incident is already is created than skip
                }

                List<AdvanceNotice> SameRecords = rows.Where(i => i.BatchNo == SingleRow.BatchNo).ToList();
                bool AnyAdvanceNoticeDateSentIsNull = false;
                foreach (AdvanceNotice data in SameRecords)
                {
                    if (string.IsNullOrEmpty(data.AdvanceNoticeDateSent))
                    {
                        AnyAdvanceNoticeDateSentIsNull = true;
                        break;
                    }
                }
                if (!AnyAdvanceNoticeDateSentIsNull)
                {
                    UpdateNoActionStatusInAN(SingleRow.BatchNo);
                }
            }

            foreach (AdvanceNotice SingleRow in DistinctRows)//create incident for single records
            {
                if ((!string.IsNullOrEmpty(SingleRow.IncidentId) && SingleRow.Status == "Prepared") || SingleRow.Status == "Too Late" || SingleRow.Status == "No Action")
                {
                    continue;// if incident is already is created than skip
                }
                if (!string.IsNullOrEmpty(SingleRow.AdvanceNoticeDateSent))
                {
                    UpdateNoActionStatusInAN(SingleRow.BatchNo);
                }
            }
            appLogger.Info("SetAN_NoActionStatus Process Ended...");
        }
        public void UpSertAdvanceNotice(DBModel DBVal, string Type)
        {
            string Office = "";
            string CurrencySymbol = "";
            string Status = "Extracted";
            string TransactionDate = "";
            string CollectionDate = "";

            string Advancenoticesentdate = "";


            if (!string.IsNullOrEmpty(DBVal.ConstituentAssignedSecurityGroupsSecuritygroupname))
            {
                if (DBVal.ConstituentAssignedSecurityGroupsSecuritygroupname == "Irish constituents")
                {
                    Office = "Ireland";
                    CurrencySymbol = "€";
                }
                else
                {
                    Office = "UK";
                    CurrencySymbol = "£";
                }
            }
            else
            {
                Office = "null";
                CurrencySymbol = "null";
            }
            if (Type == "One-Off")
            {
                Advancenoticesentdate = DBVal.Advancenoticesentdate != null ? Convert.ToDateTime(DBVal.Advancenoticesentdate).ToString("yyyy-MM-dd HH:mm:ss") : "null";
                TransactionDate = DBVal.PledgeGrantawardfirstinstallmentdue != null ? Convert.ToDateTime(DBVal.PledgeGrantawardfirstinstallmentdue).ToString("yyyy-MM-dd") : "null";
                DateTime NextInstallmaneDate = GetOneviewcirlBatchNextInstallmaneDate("CUK", "Pledge");
                if (dbObj.PledgeGrantawardfirstinstallmentdue >= NextInstallmaneDate)
                {
                    //Pledge can be collected 
                    CollectionDate = dbObj.PledgeGrantawardfirstinstallmentdue != null ? Convert.ToDateTime(dbObj.PledgeGrantawardfirstinstallmentdue).ToString("yyyy-MM-dd") : "null";
                }
                else
                {
                    //Pledge cannot be collected.  Finance cancel, EC contact supporter
                    CollectionDate = "null";
                    Status = "Too Late";
                }
            }
            else
            {
                Advancenoticesentdate = DBVal.Recurringgiftnexttransactiondate != null ? Convert.ToDateTime(DBVal.Recurringgiftnexttransactiondate).ToString("yyyy-MM-dd HH:mm:ss") : "null";
                TransactionDate = DBVal.Recurringgiftnexttransactiondate != null ? Convert.ToDateTime(DBVal.Recurringgiftnexttransactiondate).ToString("yyyy-MM-dd") : "null";

                DateTime NextInstallmaneDate = GetOneviewcirlBatchNextInstallmaneDate("CUK", "Recurring Gifts Existing Mandate");

                if (dbObj.Recurringgiftnexttransactiondate >= NextInstallmaneDate)
                {
                    CollectionDate = dbObj.Recurringgiftnexttransactiondate != null ? Convert.ToDateTime(dbObj.Recurringgiftnexttransactiondate).ToString("yyyy-MM-dd") : "null";
                }
                else
                {
                    DateTime TempCollectionDate = Convert.ToDateTime(dbObj.Recurringgiftnexttransactiondate);
                    do
                    {
                        if (TempCollectionDate >= NextInstallmaneDate)
                        {
                            break;
                        }
                        switch (dbObj.Installmentfrequency)
                        {
                            case "Monthly":
                                TempCollectionDate = TempCollectionDate.AddMonths(1);
                                break;
                            case "Annually":
                                TempCollectionDate = TempCollectionDate.AddYears(1);
                                break;
                            case "Quarterly":
                                TempCollectionDate = TempCollectionDate.AddMonths(3);
                                break;
                            case "Weekly":
                                TempCollectionDate = TempCollectionDate.AddDays(7);
                                break;
                            case "Half-Yearly":
                                TempCollectionDate = TempCollectionDate.AddMonths(6);
                                break;
                        }

                    } while (true);

                    CollectionDate = TempCollectionDate.ToString("yyyy-MM-dd");
                }
            }
            string ChildPreferredName = null;
            if (!string.IsNullOrEmpty(DBVal.ChildChildFirstname))
            {
                ChildPreferredName = GetChildPreferredName(dbObj.ChildChildFirstname);
            }
            try
            {


                string Update = "UPDATE `AdvanceNoticeControl` SET `AdvanceNoticeSentDate`='" + Advancenoticesentdate + "',`InboundChannel`='" + DBVal.Inboundchannel + "',`LookupID`='" + DBVal.ConstituentLookupID + "',`Amount`='" + DBVal.Amount + "',`TransactionDate`='" + TransactionDate + "',`DirectDebitReferenceNo`='" + DBVal.Directdebitreferencenumber + "',`Designation`='" + DBVal.ApplicationDetailsDesignationPublicname + "',`PreferredChildName`='" + ChildPreferredName + "',`Office`='" + Office + "',`CurrencySymbol`='" + CurrencySymbol + "',`NeedKey`='" + DBVal.ChildChildFirstname + "',`Frequency`='" + DBVal.Installmentfrequency + "',CollectionDate = '" + CollectionDate + "',Status ='" + Status + "',DirectDebitAccountNo='" + DBVal.DirectDebitAccountAccountnumber.Replace("*", "") + "' WHERE RevenueID= '" + DBVal.RevenueID + "'";//`DirectDebitAccountNo`='" + DBVal.DirectDebitAccountAccountnumber + "'
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    MySqlCommand cmd = new MySqlCommand(Update.Replace("'null'", "null"), conn); ;
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                appLogger.Info("Advance Notice Data Upserted for revenueid: " + DBVal.RevenueID);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UPSERT advance notice data: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public string CheckIfRevenueIdAlreadyExist_Old(string Revenueid)
        {
            string Status = "";
            try
            {
                string Query = "SELECT Status FROM  AdvanceNoticeControl where RevenueID = '" + Revenueid + "'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    if (Reader.Read())
                    {
                        Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfRevenueIdAlreadyExist for Sync date in advance notice :" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Status;
        }
        public string CheckRevenueRecordsStatus(string Revenueid)
        {
            string Status = "";
            try
            {
                string Query = "SELECT Status FROM  AdvanceNoticeControl where RevenueID = '" + Revenueid + "'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    if (Reader.Read())
                    {
                        Status = Reader["Status"] != null ? Reader["Status"].ToString() : "";
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfRevenueIdAlreadyExist for Sync date in advance notice :" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Status;
        }
        public bool AdvanceNoticeRecordsOperations(string OperationType)
        {
            bool IsSuccess = false;
            try
            {
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    string Query = null;
                    if (OperationType == "Archive")
                    {
                        //archive
                        Query = "insert into ArchiveAdvanceNoticeControlTable SELECT * FROM `AdvanceNoticeControl` WHERE Status = 'Completed' OR Status = 'No Action' OR Status = 'Merged not prepared' OR Status = 'Duplicate' OR Status = 'Too Late'";
                    }
                    else
                    {
                        //delete
                        Query = "delete from AdvanceNoticeControl where Status = 'Completed' OR Status = 'No Action' OR Status = 'Merged not prepared' OR Status = 'Duplicate' OR Status = 'Too Late'";
                    }

                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    conn.Open();
                    cmd.ExecuteNonQuery();
                    IsSuccess = true;
                    appLogger.Info("Advance notice records " + OperationType + " Successfully.");
                }
            }
            catch (Exception e)
            {
                appLogger.Info("Error in AdvanceNoticeRecordsOperations :" + e.Message + " with operation type: " + OperationType);
                appLogger.Info(e.InnerException);
                appLogger.Info(e.StackTrace);
            }
            return IsSuccess;
        }
        public void UpdateDirectDebitAccountNoAdvanceNotice(string Type)
        {
            appLogger.Info("Updating " + Type + " Direct Debit Account No Process Started...");
            string RecordID = null;
            if (Type == "One-Off")
            {
                RecordID = "080b2dbc-af64-424c-a8cd-526cc72d14cb";//Data List: One Off Advance Notices from constituents who need an advanc
            }
            else
            {
                RecordID = "d6f1637f-942a-4017-9b02-6c58bc2df287";//Data List: Recurring Advance Notices from constituents who need an adva
            }

            try
            {
                MySql.Data.MySqlClient.MySqlConnection mConnection;
                mConnection = new MySql.Data.MySqlClient.MySqlConnection();
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid(RecordID);
                req.IncludeMetaData = true;
                var dfi = new DataFormItem();
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                int Total = 0;
                if (result.TotalRowsInReply > 0)
                {
                    appLogger.Info("Updating " + result.TotalAvailableRows + " " + Type + " Advance notice using Adhoc records...");
                    mConnection.ConnectionString = mycuk_tcpt4ConnectionString;
                    StringBuilder sCommand = new StringBuilder(" ");
                    List<DataListResultRow> row = new List<DataListResultRow>();
                    List<string> stringRow = new List<string>();
                    string[] rows = new string[2];
                    for (int i = 0; i < result.TotalAvailableRows; i++)
                    {
                        rows = result.Rows[i].Values;
                        string Status = CheckRevenueRecordsStatus(rows[0]);
                        if (!string.IsNullOrEmpty(Status) && (Status == "Prepared" || Status == "Merged" || Status == "InProgress"))
                        {
                            continue;
                        }
                        string singleRow = "Update AdvanceNoticeControl SET DirectDebitAccountNo= '" + rows[1] + "',Status='Extracted' WHERE RevenueID='" + rows[0] + "'";
                        stringRow.Add(string.Format("{0}", string.Join("','", singleRow)));
                    }
                    sCommand.Append(string.Join(";", stringRow));
                    mConnection.Open();
                    if (!string.IsNullOrWhiteSpace(sCommand.ToString()))
                    {
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery(); Total += result.TotalRowsInReply;
                        }
                        appLogger.Info(result.TotalAvailableRows + " " + Type + " Advance notice using Adhoc records updated successfully");
                    }
                    else
                    {
                        appLogger.Info(result.TotalAvailableRows + " " + Type + " Advance notice using Adhoc records is already inserted.");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in Updating " + Type + " " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public string GetDirectDebitAccountNoFromRevenueId(string Revenueid, string Type)
        {
            string DirectDebitAccountNo = "";
            try
            {
                string RecordID = "";
                if (Type == "One-Off")
                {
                    RecordID = "080b2dbc-af64-424c-a8cd-526cc72d14cb";//Data List: One Off Advance Notices from constituents who need an advanc
                }
                else
                {
                    RecordID = "d6f1637f-942a-4017-9b02-6c58bc2df287";//Data List: Recurring Advance Notices from constituents who need an adva
                }
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid(RecordID);
                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("REVENUEID", Revenueid);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                if (result.TotalRowsInReply > 0)
                {
                    DirectDebitAccountNo = result.Rows[0].Values[1];
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDirectDebitAccountNoFromRevenueId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return DirectDebitAccountNo;
        }

        public RevenuePayment GetAdvanceNotice()
        {
            string content = "";
            RevenuePayment payobj = new RevenuePayment();
            BBTargetRepository.Model.Constant obj = new BBTargetRepository.Model.Constant();
            try
            {
                var client = new RestClient("https://s01t2bisweb003.blackbaud.net/64156d_d9c4f582-10c9-4fa2-9f96-508d8545f918/ODataQuery.ashx?databasename=64156d&AdHocQueryID=d5866dbd-0ae1-460c-af98-2f14b9096070");//One Off Advance Notices from constituents who need an advance notice
                client.Authenticator = new HttpBasicAuthenticator(obj.ODATA_USERNAME, obj.ODATA_PASSWORD);
                //client.Timeout = 300000;
                var request = new RestRequest(Method.GET);
                System.Net.ServicePointManager.Expect100Continue = false;
                IRestResponse response = client.Execute(request);
                content = response.Content;
                payobj = SimpleJson.DeserializeObject<RevenuePayment>(content);
                return payobj;
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in fetching Revenue Payment from Odata " + ex.Message);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
                if (content != null)
                {
                    appLogger.Error("Response content : " + content);
                }
                return null;
            }
        }
        public void SyncOneOffAdvanceNotices()
        {
            appLogger.Info("AdvanceNotice Sync Started...");
            int rowCounter = 0;
            try
            {
                string command = "INSERT INTO `AdvanceNoticeControl`(`RevenueID`, `AdvanceNoticeSentDate`, `InboundChannel`, `LookupID`, `Amount`, `TransactionDate`, `DirectDebitReferenceNo`, `Designation`, `PreferredChildName`, `Office`, `NeedKey`,`CurrencySymbol`,`TriggerType`,`Status`,`CollectionDate`,`DirectDebitAccountNo`) VALUES (?RevenueID,?AdvanceNoticeSentDate,?InboundChannel,?LookupID,?Amount,?TransactionDate,?DirectDebitReferenceNo,?Designation,?PreferredChildName,?Office,?NeedKey,?CurrencySymbol,?TriggerType,?Status,?CollectionDate,?DirectDebitAccountNo) ON DUPLICATE KEY UPDATE RevenueID= Values(RevenueID),AdvanceNoticeSentDate= Values(AdvanceNoticeSentDate),InboundChannel= Values(InboundChannel),LookupID= Values(LookupID),Amount= Values(Amount),TransactionDate= Values(TransactionDate),DirectDebitReferenceNo= Values(DirectDebitReferenceNo),Designation= Values(Designation),PreferredChildName= Values(PreferredChildName),Office= Values(Office),NeedKey= Values(NeedKey),CurrencySymbol= Values(CurrencySymbol),TriggerType= Values(TriggerType),Status=Values(Status),CollectionDate=Values(CollectionDate),DirectDebitAccountNo=Values(DirectDebitAccountNo)";

                RevenuePayment records = GetAdvanceNotice();
                rowCounter = 1;
                if (records != null && records.value.Count() > 0)
                {
                    appLogger.Info("Total: " + records.value.Count() + " Found To Sync in DB");
                    foreach (Value row in records.value)
                    {
                        try
                        {
                            dbObj = createFromRowAdvanceNotice(row);
                            //Check if Revenue details is already exist
                            string status = "";//CheckIfRevenueIdAlreadyExist(dbObj.RevenueID);
                            if (!string.IsNullOrEmpty(status) && (status == "Extracted" || status == "Merged"))
                            {
                                appLogger.Info("Upserting Advance Notice record as its status is :" + status);
                                UpSertAdvanceNotice(dbObj, "One-Off");
                                continue;
                            }

                            // DB Upsert
                            using (MySqlConnection mConnection = new MySqlConnection(mycuk_tcpt4ConnectionString))
                            using (MySqlCommand myCmd = new MySqlCommand(command, mConnection))
                            {
                                mConnection.Open();
                                myCmd.Parameters.Add("?RevenueID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.RevenueID) ? dbObj.RevenueID : null;
                                myCmd.Parameters.Add("?AdvanceNoticeSentDate", MySqlDbType.DateTime).Value = dbObj.Advancenoticesentdate;
                                myCmd.Parameters.Add("?InboundChannel", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.InboundChannel) ? dbObj.InboundChannel : null;
                                myCmd.Parameters.Add("?LookupID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ConstituentLookupID) ? dbObj.ConstituentLookupID : null;
                                myCmd.Parameters.Add("?Amount", MySqlDbType.Decimal).Value = dbObj.Amount;
                                myCmd.Parameters.Add("?DirectDebitReferenceNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Directdebitreferencenumber) ? dbObj.Directdebitreferencenumber : null;
                                myCmd.Parameters.Add("?Designation", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ApplicationDetailsDesignationPublicname) ? dbObj.ApplicationDetailsDesignationPublicname : null;
                                myCmd.Parameters.Add("?PreferredChildName", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ChildChildPreferredChildNameAttributeValue) ? dbObj.ChildChildPreferredChildNameAttributeValue : null;
                                myCmd.Parameters.Add("?NeedKey", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ChildChildFirstname) ? dbObj.ChildChildFirstname : null;
                                appLogger.Info("Before get DirectDebitAccountNo");
                                string AccountNo = GetDirectDebitAccountNoFromRevenueId(dbObj.RevenueID, "One-Off");
                                myCmd.Parameters.Add("?DirectDebitAccountNo", MySqlDbType.VarChar).Value = AccountNo.Substring(AccountNo.Length - 4);
                                appLogger.Info("After get DirectDebitAccountNo");
                                myCmd.Parameters.Add("?TransactionDate", MySqlDbType.DateTime).Value = dbObj.PledgeGrantawardfirstinstallmentdue;
                                DateTime NextInstallmaneDate = GetOneviewcirlBatchNextInstallmaneDate("CUK", "Pledge");
                                if (dbObj.PledgeGrantawardfirstinstallmentdue >= NextInstallmaneDate)
                                {
                                    //Pledge can be collected 
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = dbObj.PledgeGrantawardfirstinstallmentdue;
                                    myCmd.Parameters.Add("?Status", MySqlDbType.VarChar).Value = "Extracted";//"Incomplete";
                                }
                                else
                                {
                                    //Pledge cannot be collected.  Finance cancel, EC contact supporter
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = null;
                                    myCmd.Parameters.Add("?Status", MySqlDbType.VarChar).Value = "Too Late";
                                }

                                myCmd.Parameters.Add("?TriggerType", MySqlDbType.VarChar).Value = "One-Off";
                                if (!string.IsNullOrEmpty(dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname))
                                {
                                    if (dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname == "Irish constituents")
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "Ireland";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "€";
                                    }
                                    else
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "UK";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "£";
                                    }
                                }
                                else
                                {
                                    myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = null;
                                    myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = null;
                                }

                                myCmd.ExecuteNonQuery();
                                appLogger.Info(rowCounter + " One-Off AdvanceNotice records inserted successfully");
                            }
                            rowCounter++;
                            if (rowCounter % 1000 == 0)
                            {
                                appLogger.Info(rowCounter + " AdvanceNotice records inserted successfully");
                            }
                        }
                        catch (Exception e)
                        {
                            appLogger.Error("Error in AdvanceNotice for row " + rowCounter + ", RevenueID " + dbObj.RevenueID);
                            appLogger.Error("Error Message - " + e.Message);
                            appLogger.Error("Stack Trace - " + e.StackTrace);
                        }
                    }
                    if (rowCounter < 1000)
                    {
                        appLogger.Info(rowCounter + " AdvanceNotice records inserted successfully.");
                    }
                }
                else
                {
                    appLogger.Info("AdvanceNotice No Records found for Sync Revenue Payment");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Main - AdvanceNotice Error in sync revenue payment from Odata: " + e.Message);
                appLogger.Error("Main - Error for row " + rowCounter);
                appLogger.Error("Main - Error Message - " + e.Message);
                appLogger.Error("Main - Stack Trace - " + e.StackTrace);
            }
            appLogger.Info("AdvanceNotice Sync Ended...");
        }
        public RevenuePayment GetRecurringAdvanceNotice()
        {
            string content = "";
            RevenuePayment payobj = new RevenuePayment();
            BBTargetRepository.Model.Constant obj = new BBTargetRepository.Model.Constant();
            try
            {
                var client = new RestClient("https://s01t2bisweb003.blackbaud.net/64156d_d9c4f582-10c9-4fa2-9f96-508d8545f918/ODataQuery.ashx?databasename=64156d&AdHocQueryID=87de565e-184f-4044-8fff-5ba6225a3c96");//Recurring Advance Notices from constituents who need an advance notice
                client.Authenticator = new HttpBasicAuthenticator(obj.ODATA_USERNAME, obj.ODATA_PASSWORD);
                //client.Timeout = 300000;
                var request = new RestRequest(Method.GET);
                System.Net.ServicePointManager.Expect100Continue = false;
                IRestResponse response = client.Execute(request);
                content = response.Content;
                payobj = SimpleJson.DeserializeObject<RevenuePayment>(content);
                return payobj;
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in fetching Revenue Payment from Odata " + ex.Message);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
                if (content != null)
                {
                    appLogger.Error("Response content : " + content);
                }
                return null;
            }
        }
        public void SyncRecurringAdvanceNotice()
        {
            appLogger.Info("Recurring Advance Notice Sync Started...");
            int rowCounter = 0;
            try
            {
                string command = "INSERT INTO `AdvanceNoticeControl`(`RevenueID`, `AdvanceNoticeSentDate`, `InboundChannel`, `LookupID`, `Amount`, `TransactionDate`, `DirectDebitReferenceNo`, `Designation`, `PreferredChildName`, `NeedKey`,`Frequency`,`Office`,`TriggerType`,`CurrencySymbol`,`CollectionDate`,`Status`,`DirectDebitAccountNo`) VALUES (?RevenueID,?AdvanceNoticeSentDate,?InboundChannel,?LookupID,?Amount,?TransactionDate,?DirectDebitReferenceNo,?Designation,?PreferredChildName,?NeedKey,?Frequency,?Office,?TriggerType,?CurrencySymbol,?CollectionDate,?Status,?DirectDebitAccountNo)ON DUPLICATE KEY UPDATE RevenueID= Values(RevenueID),AdvanceNoticeSentDate= Values(AdvanceNoticeSentDate),InboundChannel= Values(InboundChannel),LookupID= Values(LookupID),Amount= Values(Amount),TransactionDate= Values(TransactionDate),DirectDebitReferenceNo= Values(DirectDebitReferenceNo),Designation= Values(Designation),PreferredChildName= Values(PreferredChildName),NeedKey= Values(NeedKey),Frequency=Values(Frequency),Office=Values(Office),TriggerType=Values(TriggerType),CurrencySymbol=Values(CurrencySymbol),CollectionDate=Values(CollectionDate),Status=Values(Status),DirectDebitAccountNo=Values(DirectDebitAccountNo)";

                RevenuePayment records = GetRecurringAdvanceNotice();
                rowCounter = 1;
                if (records != null && records.value.Count() > 0)
                {
                    appLogger.Info("Total: " + records.value.Count() + " Found To Sync in DB");
                    foreach (Value row in records.value)
                    {
                        try
                        {
                            dbObj = createFromRowAdvanceNotice(row);
                            //Check if Revenue details is already exist
                            string status = "";// CheckIfRevenueIdAlreadyExist(dbObj.RevenueID);
                            if (!string.IsNullOrEmpty(status) && (status == "Extracted" || status == "Merged"))
                            {
                                appLogger.Info("Upserting Advance Notice record as its status is :" + status);
                                UpSertAdvanceNotice(dbObj, "RecurringGift");
                                continue;
                            }
                            // DB Upsert
                            using (MySqlConnection mConnection = new MySqlConnection(mycuk_tcpt4ConnectionString))
                            using (MySqlCommand myCmd = new MySqlCommand(command, mConnection))
                            {
                                mConnection.Open();
                                myCmd.Parameters.Add("?RevenueID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.RevenueID) ? dbObj.RevenueID : null;
                                myCmd.Parameters.Add("?AdvanceNoticeSentDate", MySqlDbType.DateTime).Value = dbObj.Advancenoticesentdate;
                                myCmd.Parameters.Add("?InboundChannel", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Inboundchannel) ? dbObj.Inboundchannel : null;
                                myCmd.Parameters.Add("?LookupID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ConstituentLookupID) ? dbObj.ConstituentLookupID : null;
                                myCmd.Parameters.Add("?Amount", MySqlDbType.Decimal).Value = dbObj.Amount;
                                myCmd.Parameters.Add("?TransactionDate", MySqlDbType.DateTime).Value = dbObj.Recurringgiftnexttransactiondate;

                                string AccountNo = GetDirectDebitAccountNoFromRevenueId(dbObj.RevenueID, "RecurringGift");
                                myCmd.Parameters.Add("?DirectDebitAccountNo", MySqlDbType.VarChar).Value = AccountNo.Substring(AccountNo.Length - 4);

                                DateTime NextInstallmaneDate = GetOneviewcirlBatchNextInstallmaneDate("CUK", "Recurring Gifts Existing Mandate");

                                if (dbObj.Recurringgiftnexttransactiondate >= NextInstallmaneDate)
                                {
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = dbObj.Recurringgiftnexttransactiondate;
                                }
                                else
                                {
                                    DateTime CollectionDate = Convert.ToDateTime(dbObj.Recurringgiftnexttransactiondate);
                                    do
                                    {
                                        if (CollectionDate >= NextInstallmaneDate)
                                        {
                                            break;
                                        }
                                        switch (dbObj.Installmentfrequency)
                                        {
                                            case "Monthly":
                                                CollectionDate = CollectionDate.AddMonths(1);
                                                break;
                                            case "Annually":
                                                CollectionDate = CollectionDate.AddYears(1);
                                                break;
                                            case "Quarterly":
                                                CollectionDate = CollectionDate.AddMonths(3);
                                                break;
                                            case "Weekly":
                                                CollectionDate = CollectionDate.AddDays(7);
                                                break;
                                            case "Half-Yearly":
                                                CollectionDate = CollectionDate.AddMonths(6);
                                                break;
                                        }

                                    } while (true);
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = CollectionDate.ToString("yyyy-MM-dd");
                                }
                                myCmd.Parameters.Add("?DirectDebitReferenceNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Directdebitreferencenumber) ? dbObj.Directdebitreferencenumber : null;
                                myCmd.Parameters.Add("?Designation", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ApplicationDetailsDesignationPublicname) ? dbObj.ApplicationDetailsDesignationPublicname : null;
                                myCmd.Parameters.Add("?PreferredChildName", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ChildChildPreferredChildNameAttributeValue) ? dbObj.ChildChildPreferredChildNameAttributeValue : null;
                                myCmd.Parameters.Add("?NeedKey", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ChildChildFirstname) ? dbObj.ChildChildFirstname : null;
                                myCmd.Parameters.Add("?Frequency", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Installmentfrequency) ? dbObj.Installmentfrequency : null;
                                //myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname) ? dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname : null;
                                myCmd.Parameters.Add("?TriggerType", MySqlDbType.VarChar).Value = "RecurringGift";

                                if (!string.IsNullOrEmpty(dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname))
                                {
                                    if (dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname == "Irish constituents")
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "Ireland";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "€";
                                    }
                                    else
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "UK";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "£";
                                    }
                                }
                                else
                                {
                                    myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = null;
                                    myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = null;
                                }
                                myCmd.Parameters.Add("?Status", MySqlDbType.VarChar).Value = "Extracted";//"Incomplete";
                                myCmd.ExecuteNonQuery();
                                appLogger.Info(rowCounter + " RecurringGift AdvanceNotice records inserted successfully");
                            }
                            rowCounter++;
                            if (rowCounter % 1000 == 0)
                            {
                                appLogger.Info(rowCounter + " Recurring Advance Notice records inserted successfully");
                            }
                        }
                        catch (Exception e)
                        {
                            appLogger.Error("Error in Recurring Advance Notice for row " + rowCounter + ", RevenueID " + dbObj.RevenueID);
                            appLogger.Error("Error Message - " + e.Message);
                            appLogger.Error("Stack Trace - " + e.StackTrace);
                        }
                    }
                    if (rowCounter < 1000)
                    {
                        appLogger.Info(rowCounter + " Recurring Advance Notice records inserted successfully.");
                    }
                }
                else
                {
                    appLogger.Info("Recurring Advance Notice No Records found for Sync Revenue Payment");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Main - Recurring Advance Notice error in from Odata: " + e.Message);
                appLogger.Error("Main - Error for row " + rowCounter);
                appLogger.Error("Main - Error Message - " + e.Message);
                appLogger.Error("Main - Stack Trace - " + e.StackTrace);
            }
            appLogger.Info("Recurring Advance Notice Sync Ended...");
        }
        static int DaysBetween(DateTime d1, DateTime d2)
        {
            TimeSpan span = d2.Subtract(d1);
            return (int)span.TotalDays;
        }
        public static DBModel createFromRowAdvanceNotice(Value row)
        {
            DBModel dbObj = new DBModel();
            dbObj.RevenueID = row.RevenueID;
            dbObj.Advancenoticesentdate = stringToDateTime(row.Advancenoticesentdate);
            dbObj.Inboundchannel = row.Inboundchannel;
            dbObj.ConstituentLookupID = row.ConstituentLookupID;
            dbObj.Amount = stringToDecimal(row.Amount);
            dbObj.Recurringgiftnexttransactiondate = stringToDateTime(row.Recurringgiftnexttransactiondate);
            dbObj.Directdebitreferencenumber = row.Directdebitreferencenumber;
            dbObj.DirectDebitAccountAccountnumber = row.DirectDebitAccountAccountnumber;
            dbObj.ApplicationDetailsDesignationPublicname = row.ApplicationDetailsDesignationPublicname;
            dbObj.ChildChildPreferredChildNameAttributeValue = row.ChildChildPreferredChildNameAttributeValue;
            dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname = row.ConstituentAssignedSecurityGroupsSecuritygroupname;
            dbObj.ChildChildFirstname = row.ChildChildFirstname;
            dbObj.Installmentfrequency = row.Installmentfrequency;
            dbObj.PledgeGrantawardfirstinstallmentdue = stringToDateTime(row.PledgeGrantawardfirstinstallmentdue);
            return dbObj;
        }
        public static DBModel createRowAdvanceNoticeOneOff(OneOff row)
        {
            DBModel dbObj = new DBModel();
            dbObj.RevenueID = row.RevenueID;
            dbObj.Advancenoticesentdate = stringToDateTime(row.Advancenoticesentdate);
            dbObj.Inboundchannel = row.Inboundchannel;
            dbObj.ConstituentLookupID = row.ConstituentLookupID;
            dbObj.Amount = stringToDecimal(row.Amount);
            dbObj.Directdebitreferencenumber = row.Directdebitreferencenumber;
            dbObj.DirectDebitAccountAccountnumber = row.DirectDebitAccountAccountnumbermasked;
            dbObj.ApplicationDetailsDesignationPublicname = row.ApplicationDetailsDesignationPublicname;
            dbObj.ChildPreferredName = row.ChildPreferredName;
            dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname = row.ConstituentAssignedSecurityGroupsSecuritygroupname;
            dbObj.ChildChildFirstname = row.ChildChildFirstname;
            dbObj.PledgeGrantawardfirstinstallmentdue = stringToDateTime(row.PledgeGrantawardfirstinstallmentdue);
            dbObj.PaymentMethod = row.PaymentMethod;
            dbObj.RevenueRecordID = row.RevenueRecordID;
            return dbObj;
        }

        public static DBModel createRowAdvanceNoticeRecurringGift(RecurringGift row)
        {
            DBModel dbObj = new DBModel();
            dbObj.RevenueID = row.RevenueID;
            dbObj.Advancenoticesentdate = stringToDateTime(row.Advancenoticesentdate);
            dbObj.Inboundchannel = row.Inboundchannel;
            dbObj.ConstituentLookupID = row.ConstituentLookupID;
            dbObj.Amount = stringToDecimal(row.Amount);
            dbObj.Recurringgiftnexttransactiondate = stringToDateTime(row.Recurringgiftnexttransactiondate);
            dbObj.Directdebitreferencenumber = row.Directdebitreferencenumber;
            dbObj.DirectDebitAccountAccountnumber = row.DirectDebitAccountAccountnumbermasked;
            dbObj.ApplicationDetailsDesignationPublicname = row.ApplicationDetailsDesignationPublicname;
            dbObj.ChildPreferredName = row.ChildPreferredName;
            dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname = row.ConstituentAssignedSecurityGroupsSecuritygroupname;
            dbObj.ChildChildFirstname = row.ChildChildFirstname;
            dbObj.Installmentfrequency = row.Installmentfrequency;
            dbObj.PaymentMethod = row.PaymentMethod;
            dbObj.RevenueRecordID = row.RevenueRecordID;
            return dbObj;
        }
        public static decimal stringToDecimal(string strVal)
        {
            // Example - £1,006.29 / €360.00
            if (!string.IsNullOrWhiteSpace(strVal))
            {
                strVal = strVal.Replace("£", "").Replace("€", "");
                return Convert.ToDecimal(strVal);
            }
            return 0;
        }
        public static DateTime? stringToDateTime(string strVal)
        {
            if (string.IsNullOrWhiteSpace(strVal) || strVal.Equals("0/0/2000"))
            {
                return null;
            }

            // Example - 3/26/2020 05:46 AM
            // Format - M/d/yyyy hh:mm tt
            try
            {
                DateTime? dateTime = DateTime.ParseExact(strVal, "M/d/yyyy hh:mm tt", CultureInfo.InvariantCulture);
                return dateTime;
            }
            catch (FormatException e1)
            {
                // Example - 3/16/2020
                // Format - M/d/yyyy
                try
                {
                    DateTime dateTime = DateTime.ParseExact(strVal, "M/d/yyyy", CultureInfo.InvariantCulture);
                    return dateTime;
                }
                catch (FormatException e2)
                {

                    try
                    {
                        DateTime dt = DateTime.Parse(strVal);
                        return dt;
                    }
                    catch (FormatException e3)
                    {
                        throw e3;
                    }

                }
            }
        }
        public string GetExportData(string Type)
        {
            string ProcessRecordID = "";
            try
            {
                DataListLoadRequest request = new DataListLoadRequest();
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("e97f53c6-2db3-4ddf-b93d-bf343daccf90");
                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SITEFILTERMODE", "0");
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                string RecordType = Type == "RecurringGift" ? "Recurring Advance Notices from constituents who need an advance notice" : "One Off Advance Notices from constituents who need an advance notice";
                if (result.TotalRowsInReply > 0)
                {
                    foreach (var res in result.Rows)
                    {
                        if (res.Values[1] == RecordType)
                        {
                            ProcessRecordID = res.Values[0];
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetExportData :" + e.Message);
            }
            return ProcessRecordID;
        }
        public List<DataListResultRow> GetExportProcessStatusList(string contextRecordId)
        {

            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("dbabe3a1-8ee1-4009-b4ca-4d7e1a8ecc80");
                req.IncludeMetaData = true;
                req.ContextRecordID = contextRecordId;

                List<DataListResultRow> row = new List<DataListResultRow>();
                var result = _service.DataListLoad(req);


                if (result.TotalRowsInReply > 0)
                {
                    foreach (var res in result.Rows)
                    {
                        responseList.Add(res);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetExportProcessStatusList :" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return responseList;
        }
        public void DownloadExportFile(string RecordID, string Type)
        {
            try
            {
                string url = "https://crm64156p.sky.blackbaud.com/64156p/Download/CustomFileDownload.ashx?DBName=64156p&AssemblyName=Blackbaud.AppFx.Platform.Catalog&ClassName=Blackbaud.AppFx.Platform.Catalog.BusinessProcessExport&UseCompression=false&FileName=Recurring%20Advance%20Notices%20from%20constituents%20who%20need%20an%20advance%20notice.csv&ExportFormat=csv&ColumnsToSuppress=&RecordIdField={RECORDIDFIELD}&TableKey=Output&BusinessProcessCatalogId=64faa344-9c75-4c98-afe3-a40ec2df9249&ParameterSetId=53a8046a-9e7b-4481-96e0-f88b28fabef6&RecordId={RECORDID}&errorMode=plaintext";

                url = url.Replace("{RECORDIDFIELD}", RecordID);
                url = url.Replace("{RECORDID}", RecordID);
                WebClient req = new WebClient();
                req.Credentials = provider().Credentials;
                req.DownloadFile(url, @"" + settings["RECURRINGGIFT_EXPORTEDCSV_PATH"] + Type + "_" + DateTime.Now.ToString("ddMMyyyyHHmmss") + ".csv");
            }
            catch (Exception e)
            {
                appLogger.Error("Error in DownloadExportFile: " + e.Message + ", for record id: " + RecordID + ", Type: " + Type);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void removeRecentFiles()
        {
            appLogger.Info("Deleting recent file process started.");
            try
            {
                DirectoryInfo DirectoryInfo = new DirectoryInfo(settings["RECURRINGGIFT_EXPORTEDCSV_PATH"]);
                FileInfo[] files = DirectoryInfo.GetFiles();
                foreach (FileInfo file in files)
                {
                    file.Delete();
                    appLogger.Info("File deleted from server successfully with file: " + file.FullName);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in deleting files from OneOffOrRecurringGiftExportCsv: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

        }
        public void RunExport(string Type)
        {
            string ReportRecordID = Type == "RecurringGift" ? GetExportData("RecurringGift") : GetExportData("OneOff");
            BusinessProcessLaunchRequest request = new BusinessProcessLaunchRequest();
            BusinessProcessLaunchReply reply = new BusinessProcessLaunchReply();

            request.BusinessProcessID = new Guid("64faa344-9c75-4c98-afe3-a40ec2df9249");
            request.ParameterSetID = new Guid(ReportRecordID);//Export RecordID
            request.ClientAppInfo = GetRequestHeader();
            request.DataItem = new DataFormItem();

            try
            {
                _service.BusinessProcessLaunch(request);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in RunExport: " + e.Message + " for type: " + Type);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void DoExportMainProcessAndSyncData(string Type)
        {
            appLogger.Info("DoExportMainProcess started...");
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();
            bool IsExportProcessRunning = false;
            string ExportRecordID = GetExportData(Type);
            CheckAgain:
            List<DataListResultRow> ExportProcessList = GetExportProcessStatusList(ExportRecordID);
            List<ExportModel> eList = new List<ExportModel>();
            if (ExportProcessList.Count > 0)
            {
                foreach (var res in ExportProcessList)
                {
                    if (res.Values[2] != "Running")
                    {
                        IsExportProcessRunning = false;
                        ExportModel export = new ExportModel();
                        export.RecordID = res.Values[0];
                        export.ProcessStartTime = DateTime.Parse(res.Values[5]);
                        export.ProcessEndTime = DateTime.Parse(res.Values[6]);
                        export.NumberOfRecordsProcessed = Convert.ToInt64(res.Values[8]);
                        eList.Add(export);
                    }
                    else
                    {
                        IsExportProcessRunning = true;
                        appLogger.Info(Type + " process is still running and taking 30 sec break with StopWatchTime:" + stopwatch.ElapsedMilliseconds);
                        System.Threading.Thread.Sleep(30000);//30 sec wait

                        if (stopwatch.ElapsedMilliseconds >= 300000)// check only for 5 min
                        {
                            appLogger.Info("Terminating process as time is exceeded 5 min: " + stopwatch.ElapsedMilliseconds + " for type: " + Type);
                            stopwatch.Stop();
                            break;
                        }
                        goto CheckAgain;
                    }
                }
            }

            if (eList.Count > 0 && IsExportProcessRunning == false)
            {
                appLogger.Info("Export process status is Completed so download process started for Type: " + Type);
                ExportModel LatestExportedRecord = eList.OrderBy(i => i.ProcessEndTime).Last();
                if (LatestExportedRecord.NumberOfRecordsProcessed != 0)
                {
                    DownloadExportFile(LatestExportedRecord.RecordID, Type);
                    appLogger.Info("Export process csv file download process is ended for Type: " + Type);
                    if (Type == "RecurringGift")
                    {
                        SyncAdvanceNotice_RecurringGift();
                    }
                    else
                    {
                        SyncAdvanceNotice_OneOff();
                    }
                }
                else
                {
                    appLogger.Info("No Record found to insert in " + Type);
                }
                removeRecentFiles();
            }

            appLogger.Info("DoExportMainProcess ended...");
        }
        public void SyncAdvanceNotice_RecurringGift()
        {
            appLogger.Info("Recurring Gift Advance Notice Sync Started...");
            int rowCounter = 0;
            try
            {
                string command = "INSERT INTO `AdvanceNoticeControl`(`RevenueID`, `AdvanceNoticeSentDate`, `InboundChannel`, `LookupID`, `Amount`, `TransactionDate`, `DirectDebitReferenceNo`, `Designation`, `PreferredChildName`, `NeedKey`,`Frequency`,`Office`,`TriggerType`,`CurrencySymbol`,`CollectionDate`,`Status`,`DirectDebitAccountNo`,`RevenueRecordID`,`PaymentMethod`) VALUES (?RevenueID,?AdvanceNoticeSentDate,?InboundChannel,?LookupID,?Amount,?TransactionDate,?DirectDebitReferenceNo,?Designation,?PreferredChildName,?NeedKey,?Frequency,?Office,?TriggerType,?CurrencySymbol,?CollectionDate,?Status,?DirectDebitAccountNo,?RevenueRecordID,?PaymentMethod)ON DUPLICATE KEY UPDATE RevenueID= Values(RevenueID),AdvanceNoticeSentDate= Values(AdvanceNoticeSentDate),InboundChannel= Values(InboundChannel),LookupID= Values(LookupID),Amount= Values(Amount),TransactionDate= Values(TransactionDate),DirectDebitReferenceNo= Values(DirectDebitReferenceNo),Designation= Values(Designation),PreferredChildName= Values(PreferredChildName),NeedKey= Values(NeedKey),Frequency=Values(Frequency),Office=Values(Office),TriggerType=Values(TriggerType),CurrencySymbol=Values(CurrencySymbol),CollectionDate=Values(CollectionDate),Status=Values(Status),DirectDebitAccountNo=Values(DirectDebitAccountNo),RevenueRecordID=Values(RevenueRecordID),PaymentMethod=Values(PaymentMethod)";

                rowCounter = 1;
                DirectoryInfo DirectoryInfo = new DirectoryInfo(settings["RECURRINGGIFT_EXPORTEDCSV_PATH"]);
                FileInfo[] files = DirectoryInfo.GetFiles();
                var LatestOneOffRecord = files.Where(i => i.Name.Contains("RecurringGift")).OrderBy(j => j.LastWriteTime).Last();
                using (var reader = new StreamReader(LatestOneOffRecord.FullName))
                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    var records = csv.GetRecords<RecurringGift>();
                    foreach (RecurringGift row in records)
                    {
                        try
                        {
                            dbObj = createRowAdvanceNoticeRecurringGift(row);
                            //Check if Revenue details is already exist
                            AdvanceNoticeControlTableData anObj = CheckIfRevenueIdAlreadyExist(dbObj.RevenueID);
                            string NeedKey = dbObj.ChildChildFirstname;
                            if (string.IsNullOrEmpty(dbObj.ChildChildFirstname))
                            {
                                dbObj.ChildChildFirstname = dbObj.ChildPreferredName;
                                NeedKey = dbObj.ChildPreferredName;
                            }
                            if (anObj.status == "Prepared")
                            {
                                appLogger.Info("Inserting Advance Notice record as its status is :" + anObj.status);
                            }
                            else if (anObj.status == "Merged")
                            {
                                appLogger.Info("Skipping Advance Notice record as its status is :" + anObj.status);
                                continue;
                            }
                            if (!string.IsNullOrEmpty(anObj.status) && anObj.status == "Extracted" && anObj.NeedKey == NeedKey)
                            {
                                appLogger.Info("Upserting Advance Notice record as its status is :" + anObj.status);
                                UpSertAdvanceNotice(dbObj, "RecurringGift");
                                continue;
                            }
                            // DB Upsert
                            using (MySqlConnection mConnection = new MySqlConnection(mycuk_tcpt4ConnectionString))
                            using (MySqlCommand myCmd = new MySqlCommand(command, mConnection))
                            {
                                mConnection.Open();
                                myCmd.Parameters.Add("?RevenueID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.RevenueID) ? dbObj.RevenueID : null;
                                myCmd.Parameters.Add("?RevenueRecordID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.RevenueRecordID) ? dbObj.RevenueRecordID : null;
                                myCmd.Parameters.Add("?PaymentMethod", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.PaymentMethod) ? dbObj.PaymentMethod : null;
                                myCmd.Parameters.Add("?AdvanceNoticeSentDate", MySqlDbType.DateTime).Value = dbObj.Advancenoticesentdate;
                                myCmd.Parameters.Add("?InboundChannel", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Inboundchannel) ? dbObj.Inboundchannel : null;
                                myCmd.Parameters.Add("?LookupID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ConstituentLookupID) ? dbObj.ConstituentLookupID : null;
                                myCmd.Parameters.Add("?Amount", MySqlDbType.Decimal).Value = dbObj.Amount;
                                myCmd.Parameters.Add("?TransactionDate", MySqlDbType.DateTime).Value = dbObj.Recurringgiftnexttransactiondate;
                                myCmd.Parameters.Add("?DirectDebitAccountNo", MySqlDbType.VarChar).Value = dbObj.DirectDebitAccountAccountnumber.Replace("*", "");

                                DateTime NextInstallmaneDate = GetOneviewcirlBatchNextInstallmaneDate("CUK", "Recurring Gifts Existing Mandate");

                                if (dbObj.Recurringgiftnexttransactiondate >= NextInstallmaneDate)
                                {
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = dbObj.Recurringgiftnexttransactiondate;
                                }
                                else
                                {
                                    DateTime CollectionDate = Convert.ToDateTime(dbObj.Recurringgiftnexttransactiondate);
                                    do
                                    {
                                        if (CollectionDate >= NextInstallmaneDate)
                                        {
                                            break;
                                        }
                                        switch (dbObj.Installmentfrequency)
                                        {
                                            case "Monthly":
                                                CollectionDate = CollectionDate.AddMonths(1);
                                                break;
                                            case "Annually":
                                                CollectionDate = CollectionDate.AddYears(1);
                                                break;
                                            case "Quarterly":
                                                CollectionDate = CollectionDate.AddMonths(3);
                                                break;
                                            case "Weekly":
                                                CollectionDate = CollectionDate.AddDays(7);
                                                break;
                                            case "Half-Yearly":
                                                CollectionDate = CollectionDate.AddMonths(6);
                                                break;
                                        }

                                    } while (true);
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = CollectionDate.ToString("yyyy-MM-dd");
                                }
                                myCmd.Parameters.Add("?DirectDebitReferenceNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Directdebitreferencenumber) ? dbObj.Directdebitreferencenumber : null;
                                myCmd.Parameters.Add("?Designation", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ApplicationDetailsDesignationPublicname) ? dbObj.ApplicationDetailsDesignationPublicname : null;
                                myCmd.Parameters.Add("?NeedKey", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ChildChildFirstname) ? dbObj.ChildChildFirstname : null;

                                if (!string.IsNullOrEmpty(dbObj.ChildChildFirstname))
                                {
                                    myCmd.Parameters.Add("?PreferredChildName", MySqlDbType.VarChar).Value = GetChildPreferredName(dbObj.ChildChildFirstname);
                                }
                                else
                                {
                                    myCmd.Parameters.Add("?PreferredChildName", MySqlDbType.VarChar).Value = null;
                                }
                                myCmd.Parameters.Add("?Frequency", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Installmentfrequency) ? dbObj.Installmentfrequency : null;
                                myCmd.Parameters.Add("?TriggerType", MySqlDbType.VarChar).Value = "RecurringGift";
                                if (!string.IsNullOrEmpty(dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname))
                                {
                                    if (dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname == "Irish constituents")
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "Ireland";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "€";
                                    }
                                    else
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "UK";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "£";
                                    }
                                }
                                else
                                {
                                    myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = null;
                                    myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = null;
                                }
                                myCmd.Parameters.Add("?Status", MySqlDbType.VarChar).Value = "Extracted";


                                myCmd.ExecuteNonQuery();
                                appLogger.Info(rowCounter + " RecurringGift AdvanceNotice records inserted successfully");
                            }
                            rowCounter++;
                            if (rowCounter % 1000 == 0)
                            {
                                appLogger.Info(rowCounter + " Recurring Advance Notice records inserted successfully");
                            }
                        }
                        catch (Exception e)
                        {
                            appLogger.Error("Error in Recurring Advance Notice for row " + rowCounter + ", RevenueID " + dbObj.RevenueID);
                            appLogger.Error("Error Message - " + e.Message);
                            appLogger.Error("Stack Trace - " + e.StackTrace);
                        }
                    }
                    if (rowCounter < 1000)
                    {
                        appLogger.Info(rowCounter + " Recurring Advance Notice records inserted successfully.");
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Main - RecurringGift AdvanceNotice Error in getting data from CSV " + e.Message);
                appLogger.Error("Main - Error for row " + rowCounter);
                appLogger.Error("Main - Error Message - " + e.Message);
                appLogger.Error("Main - Stack Trace - " + e.StackTrace);
            }
            appLogger.Info("Recurring Advance Notice Sync Ended...");
        }
        public void SyncAdvanceNotice_OneOff()
        {
            appLogger.Info("SyncAdvanceNotice_OneOff Sync Started...");
            int rowCounter = 0;
            try
            {
                string command = "INSERT INTO `AdvanceNoticeControl`(`RevenueID`, `AdvanceNoticeSentDate`, `InboundChannel`, `LookupID`, `Amount`, `TransactionDate`, `DirectDebitReferenceNo`, `Designation`, `PreferredChildName`, `Office`, `NeedKey`,`CurrencySymbol`,`TriggerType`,`Status`,`CollectionDate`,`DirectDebitAccountNo`,`RevenueRecordID`,`PaymentMethod`) VALUES (?RevenueID,?AdvanceNoticeSentDate,?InboundChannel,?LookupID,?Amount,?TransactionDate,?DirectDebitReferenceNo,?Designation,?PreferredChildName,?Office,?NeedKey,?CurrencySymbol,?TriggerType,?Status,?CollectionDate,?DirectDebitAccountNo,?RevenueRecordID,?PaymentMethod) ON DUPLICATE KEY UPDATE RevenueID= Values(RevenueID),AdvanceNoticeSentDate= Values(AdvanceNoticeSentDate),InboundChannel= Values(InboundChannel),LookupID= Values(LookupID),Amount= Values(Amount),TransactionDate= Values(TransactionDate),DirectDebitReferenceNo= Values(DirectDebitReferenceNo),Designation= Values(Designation),PreferredChildName= Values(PreferredChildName),Office= Values(Office),NeedKey= Values(NeedKey),CurrencySymbol= Values(CurrencySymbol),TriggerType= Values(TriggerType),Status=Values(Status),CollectionDate=Values(CollectionDate),DirectDebitAccountNo=Values(DirectDebitAccountNo),RevenueRecordID=Values(RevenueRecordID),PaymentMethod=Values(PaymentMethod)";

                DirectoryInfo DirectoryInfo = new DirectoryInfo(settings["RECURRINGGIFT_EXPORTEDCSV_PATH"]);
                FileInfo[] files = DirectoryInfo.GetFiles();
                var LatestOneOffRecord = files.Where(i => i.Name.Contains("One_Off")).OrderBy(j => j.LastWriteTime).Last();
                using (var reader = new StreamReader(LatestOneOffRecord.FullName))
                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    var records = csv.GetRecords<OneOff>();
                    foreach (OneOff row in records)
                    {
                        try
                        {
                            dbObj = createRowAdvanceNoticeOneOff(row);
                            //Check if Revenue details is already exist
                            AdvanceNoticeControlTableData anObj = CheckIfRevenueIdAlreadyExist(dbObj.RevenueID);
                            if (anObj.status == "Prepared")
                            {
                                appLogger.Info("Inserting Advance Notice record as its status is :" + anObj.status);
                            }
                            else if (anObj.status == "Merged")
                            {
                                appLogger.Info("Skipping Advance Notice record as its status is :" + anObj.status);
                                continue;
                            }

                            if (!string.IsNullOrEmpty(anObj.status) && (anObj.status == "Extracted" || anObj.status == "Too Late"))
                            {
                                appLogger.Info("Upserting Advance Notice record as its status is :" + anObj.status);
                                UpSertAdvanceNotice(dbObj, "One-Off");
                                continue;
                            }

                            // DB Upsert
                            using (MySqlConnection mConnection = new MySqlConnection(mycuk_tcpt4ConnectionString))
                            using (MySqlCommand myCmd = new MySqlCommand(command, mConnection))
                            {
                                mConnection.Open();
                                myCmd.Parameters.Add("?RevenueID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.RevenueID) ? dbObj.RevenueID : null;
                                myCmd.Parameters.Add("?RevenueRecordID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.RevenueRecordID) ? dbObj.RevenueRecordID : null;
                                myCmd.Parameters.Add("?PaymentMethod", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.PaymentMethod) ? dbObj.PaymentMethod : null;
                                myCmd.Parameters.Add("?AdvanceNoticeSentDate", MySqlDbType.DateTime).Value = dbObj.Advancenoticesentdate;
                                myCmd.Parameters.Add("?InboundChannel", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.InboundChannel) ? dbObj.InboundChannel : null;
                                myCmd.Parameters.Add("?LookupID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ConstituentLookupID) ? dbObj.ConstituentLookupID : null;
                                myCmd.Parameters.Add("?Amount", MySqlDbType.Decimal).Value = dbObj.Amount;
                                myCmd.Parameters.Add("?DirectDebitReferenceNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.Directdebitreferencenumber) ? dbObj.Directdebitreferencenumber : null;
                                myCmd.Parameters.Add("?Designation", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ApplicationDetailsDesignationPublicname) ? dbObj.ApplicationDetailsDesignationPublicname : null;

                                //GetChildPreferredName
                                myCmd.Parameters.Add("?NeedKey", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(dbObj.ChildChildFirstname) ? dbObj.ChildChildFirstname : null;

                                if (!string.IsNullOrEmpty(dbObj.ChildChildFirstname))
                                {
                                    myCmd.Parameters.Add("?PreferredChildName", MySqlDbType.VarChar).Value = GetChildPreferredName(dbObj.ChildChildFirstname);
                                }
                                else
                                {
                                    myCmd.Parameters.Add("?PreferredChildName", MySqlDbType.VarChar).Value = null;
                                }
                                myCmd.Parameters.Add("?DirectDebitAccountNo", MySqlDbType.VarChar).Value = dbObj.DirectDebitAccountAccountnumber.Replace("*", "");
                                myCmd.Parameters.Add("?TransactionDate", MySqlDbType.DateTime).Value = dbObj.PledgeGrantawardfirstinstallmentdue;
                                DateTime NextInstallmaneDate = GetOneviewcirlBatchNextInstallmaneDate("CUK", "Pledge (AdvanceNotice)");
                                if (dbObj.PledgeGrantawardfirstinstallmentdue >= NextInstallmaneDate)
                                {
                                    //Pledge can be collected 
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = dbObj.PledgeGrantawardfirstinstallmentdue;
                                    myCmd.Parameters.Add("?Status", MySqlDbType.VarChar).Value = "Extracted";
                                }
                                else
                                {
                                    //Pledge cannot be collected.  Finance cancel, EC contact supporter
                                    myCmd.Parameters.Add("?CollectionDate", MySqlDbType.DateTime).Value = null;
                                    myCmd.Parameters.Add("?Status", MySqlDbType.VarChar).Value = "Too Late";//"Incomplete";

                                }

                                myCmd.Parameters.Add("?TriggerType", MySqlDbType.VarChar).Value = "One-Off";
                                if (!string.IsNullOrEmpty(dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname))
                                {
                                    if (dbObj.ConstituentAssignedSecurityGroupsSecuritygroupname == "Irish constituents")
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "Ireland";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "€";
                                    }
                                    else
                                    {
                                        myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = "UK";
                                        myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = "£";
                                    }
                                }
                                else
                                {
                                    myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = null;
                                    myCmd.Parameters.Add("?Office", MySqlDbType.VarChar).Value = null;
                                }

                                myCmd.ExecuteNonQuery();
                                appLogger.Info(rowCounter + " One-Off AdvanceNotice records inserted successfully");
                            }
                            rowCounter++;
                            if (rowCounter % 1000 == 0)
                            {
                                appLogger.Info(rowCounter + " AdvanceNotice records inserted successfully");
                            }
                        }
                        catch (Exception e)
                        {
                            appLogger.Error("Error in AdvanceNotice for row " + rowCounter + ", RevenueID " + dbObj.RevenueID);
                            appLogger.Error("Error Message - " + e.Message);
                            appLogger.Error("Stack Trace - " + e.StackTrace);
                        }
                    }
                    if (rowCounter < 1000)
                    {
                        appLogger.Info(rowCounter + " One-Off AdvanceNotice records inserted successfully.");
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Main - OneOff AdvanceNotice Error in getting data from CSV : " + e.Message);
                appLogger.Error("Main - Error for row " + rowCounter);
                appLogger.Error("Main - Error Message - " + e.Message);
                appLogger.Error("Main - Stack Trace - " + e.StackTrace);
            }
            appLogger.Info("SyncAdvanceNotice_OneOff Sync Ended...");
        }
        public AdvanceNoticeControlTableData CheckIfRevenueIdAlreadyExist(string Revenueid)
        {
            AdvanceNoticeControlTableData advanceNotice = new AdvanceNoticeControlTableData();
            try
            {
                string Query = "SELECT Status,Amount,NeedKey FROM  AdvanceNoticeControl where RevenueID = '" + Revenueid + "'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    if (Reader.Read())
                    {
                        advanceNotice.status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                        advanceNotice.Amount = Reader["Amount"] != null ? Reader["Amount"].ToString() : null;
                        advanceNotice.NeedKey = Reader["NeedKey"] != null ? Reader["NeedKey"].ToString() : null;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfRevenueIdAlreadyExist for Sync date in advance notice :" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return advanceNotice;
        }
        public DateTime GetOneviewcirlBatchNextInstallmaneDate(string Office, string MandateType)
        {
            DateTime NextInstalmentDate = new DateTime();
            try
            {
                string Query = "SELECT * FROM cirlBatch WHERE Office='" + Office + "' AND MandateType='" + MandateType + "'";
                using (MySqlConnection conn = new MySqlConnection(MyConnectionString))
                {
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader reader = null;
                    conn.Open();
                    reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        NextInstalmentDate = Convert.ToDateTime(reader["NextInstallmaneDate"]);
                    }

                }

            }
            catch (Exception e)
            {
                appLogger.Info("Error in GetcirlBatchNextInstallmaneDate: " + e.Message);
                appLogger.Info(e.StackTrace);
                appLogger.Info(e.InnerException);
            }
            return NextInstalmentDate;
        }
        public string GetChildPreferredName(string NeedKey)
        {
            string ChildPreferredName = "";
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch Need Name";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "select SCBS_CHILD.Need.AbbreviatedName from SCBS_CHILD.Need where SCBS_CHILD.Need.NeedKey = '" + NeedKey + "'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        if (!string.IsNullOrEmpty(result.CSVTables[0].Rows[0]))
                        {
                            ChildPreferredName = result.CSVTables[0].Rows[0];
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetChildPreferredName: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                Console.WriteLine(e.Message);
            }
            return ChildPreferredName;
        }
        #endregion

        #region Update Advance Notice sent date in BB
        /*
        - Read enquiry id from control table check if its resolved 
        - Change status in progress than set advance notice sent date to today
        */
        public void UpdateAdNoticeSentDateInBBMainMethod(long RecordId)
        {
            try
            {
                if (RecordId != 0)
                {
                    UpdateANLog(RecordId, "Update BB", "Start", "Oneview");
                }
                else
                {
                    RecordId = UpdateANLog(RecordId, "Update BB", "Start", "Service");
                }
                appLogger.Info("UpdateAdNoticeSentDateInBBMainMethod process started...");
                Stopwatch stopwatch = new Stopwatch();
                stopwatch.Start();
                List<AdvanceNotice> AdRows = GetAdvanceNoticeRecords();
                appLogger.Info("Time taken to fetch all records: " + stopwatch.ElapsedMilliseconds + " ms");
                stopwatch.Stop();
                foreach (AdvanceNotice row in AdRows)
                {
                    stopwatch = Stopwatch.StartNew();
                    string status = CheckIncidentStatus(row.IncidentId);
                    appLogger.Info("Time taken to get incident status from RN: " + stopwatch.ElapsedMilliseconds + " ms");
                    stopwatch.Stop();
                    if (status == "Resolved" || status == "Resolved (Automated)")
                    {
                        //Update status to InProgress
                        stopwatch = Stopwatch.StartNew();
                        UpdateAdRecordStatus(row.RecordID, "InProgress");
                        stopwatch.Stop();
                        appLogger.Info("Time taken to Update InProgress Status in AN Table : " + stopwatch.ElapsedMilliseconds + " ms");
                        stopwatch = Stopwatch.StartNew();
                        bool IsSuccess = UpdateAdvanceNoticeSendDate(row.RevenueID, row.TriggerType, row.RevenueRecordID, row.PaymentMethod, row.RecordID);
                        stopwatch.Stop();
                        appLogger.Info("Total Time taken to Update Advance Notice Send Date in BB : " + stopwatch.ElapsedMilliseconds + " ms");
                        if (IsSuccess)
                        {
                            stopwatch = Stopwatch.StartNew();
                            UpdateAdRecordStatus(row.RecordID, "Completed");
                            stopwatch.Stop();
                            appLogger.Info("Time taken to Update Completed Status in AN Table : " + stopwatch.ElapsedMilliseconds + " ms");
                        }
                    }
                    else
                    {
                        appLogger.Info("No Updating Advance Notice Send Date in BB as Enquiry Status is :" + status);
                    }
                }
                appLogger.Info("UpdateAdNoticeSentDateInBBMainMethod process ended...");
                if (RecordId != 0)
                {
                    UpdateANLog(RecordId, "Update BB", "End", "Oneview");
                }
                else
                {
                    UpdateANLog(RecordId, "Update BB", "End", "Service");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateAdNoticeSentDateInBBMainMethod: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public bool UpdateAdvanceNoticeSendDate(string RevenueId, string Type)
        {
            bool IsSaved = false;
            ReveneuData rvobj = GetRevenueRecordID(RevenueId);
            if (!string.IsNullOrEmpty(rvobj.RecordID))
            {
                if (Type == "One-Off")
                {
                    PledgePaymentDetailsEditForm2Data PledgeeditForm2 = new PledgePaymentDetailsEditForm2Data();
                    PledgeeditForm2.RecordID = rvobj.RecordID;
                    PledgeeditForm2.PMADVANCENOTICESENTDATE = DateTime.Now;
                    switch (rvobj.PaymentMethod)
                    {
                        case "Direct debit":
                            PledgeeditForm2.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.PledgePaymentDetailsEditForm2Enums.PAYMENTMETHODCODE.Direct_Debit;
                            break;
                        case "Credit card":
                            PledgeeditForm2.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.PledgePaymentDetailsEditForm2Enums.PAYMENTMETHODCODE.Credit_Card;
                            break;
                        case "Standing order":
                            PledgeeditForm2.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.PledgePaymentDetailsEditForm2Enums.PAYMENTMETHODCODE.Standing_Order;
                            break;
                    }
                    try
                    {
                        string payDetails = PledgeeditForm2.Save(provider());
                        appLogger.Info("AdvanceNoticeSentDate Set Successfully with recordid: " + payDetails + " for Transaction Type:  " + Type);
                        IsSaved = true;
                    }
                    catch (AppFxWebServiceException e)
                    {
                        appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for set AdvanceNoticeSentDate : " + e.Message + " with Transaction Type: " + Type);
                        appLogger.Error(e.StackTrace);
                        appLogger.Error(e.InnerException);
                    }
                }
                else
                {
                    RecurringGiftPaymentDetailsEditForm3Data editPaymentFormData = new RecurringGiftPaymentDetailsEditForm3Data();
                    editPaymentFormData.RecordID = rvobj.RecordID;
                    editPaymentFormData.PMADVANCENOTICESENTDATE = DateTime.Now;
                    switch (rvobj.PaymentMethod)
                    {
                        case "Direct debit":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Direct_Debit;
                            break;
                        case "Cash":
                            //editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Cash;
                            break;
                        case "Credit card":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Credit_Card;
                            break;
                        case "Standing order":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Standing_Order;
                            break;
                        case "Other":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Other;
                            break;
                        case "None":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.None;
                            break;
                    }
                    try
                    {
                        string payDetails = editPaymentFormData.Save(provider());
                        appLogger.Info("AdvanceNoticeSentDate Set Successfully with recordid: " + payDetails + " for Transaction Type: " + Type);
                        IsSaved = true;
                    }
                    catch (AppFxWebServiceException e)
                    {
                        appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for AdvanceNoticeSentDate  : " + e.Message + " for Transaction Type: " + Type);
                        appLogger.Error(e.StackTrace);
                        appLogger.Error(e.InnerException);
                    }
                }
            }
            else
            {
                appLogger.Info("No Record Revenue found with given revenue Id :" + RevenueId);
            }
            return IsSaved;
        }
        public List<AdvanceNotice> GetAdvanceNoticeRecords()
        {
            List<AdvanceNotice> sdList = new List<AdvanceNotice>();
            appLogger.Info("GetAdvanceNoticeRecords for update in BB Advance Notice process started...");
            try
            {
                string Query = "SELECT * FROM  AdvanceNoticeControl where Status='Prepared' Order by BatchNo ASC";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {
                        AdvanceNotice AdObj = new AdvanceNotice();
                        AdObj.RecordID = Convert.ToInt32(Reader["ID"]);
                        AdObj.RevenueID = Reader["RevenueID"].ToString();
                        AdObj.LookupID = Reader["LookupID"] != null ? Reader["LookupID"].ToString() : null;
                        AdObj.DirectDebitReferenceNo = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : null;
                        AdObj.DirectDebitAccountNo = Reader["DirectDebitAccountNo"] != null ? Reader["DirectDebitAccountNo"].ToString() : null;
                        AdObj.TriggerType = Reader["TriggerType"] != null ? Reader["TriggerType"].ToString() : null;
                        AdObj.Frequency = Reader["Frequency"] != null ? Reader["Frequency"].ToString() : null;
                        AdObj.IncidentId = Reader["IncidentID"] != null ? Reader["IncidentID"].ToString() : null;
                        AdObj.Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                        AdObj.RevenueRecordID = Reader["RevenueRecordID"] != null ? Reader["RevenueRecordID"].ToString() : null;
                        AdObj.PaymentMethod = Reader["PaymentMethod"] != null ? Reader["PaymentMethod"].ToString() : null;
                        sdList.Add(AdObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetAdvanceNoticeRecords for 26B  advance notice" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetAdvanceNoticeRecords for update in BB Advance Notice process ended...");
            return sdList;
        }
        public string CheckIncidentStatus(string IncidentReferenceId)
        {
            string IncidentStatus = "";
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch SupGrpPreferredName";
                String query = "SELECT Incident.statusWithType.status.lookupName FROM Incident WHERE lookupName ='" + IncidentReferenceId + "'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        IncidentStatus = result.CSVTables[0].Rows[0];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error while fetching SupporterPreferredGroupName :" + e.Message + " with incident reference no:" + IncidentReferenceId);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentStatus;
        }
        public void UpdateAdRecordStatus(int Recordid, string Status)
        {
            MySqlConnection conn = new MySqlConnection();
            try
            {
                string sql = "UPDATE `AdvanceNoticeControl` SET Status = '" + Status + "',UpdatedTime=NOW() WHERE ID=" + Recordid;
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(sql, conn);
                cmd.ExecuteNonQuery();
                conn.Close();
                appLogger.Info("Recordid " + Recordid + " Updated for status:" + Status);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in updating Recordid " + Recordid + " for status:" + Status + e.Message);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }

        }
        public ReveneuData GetRevenueRecordID(string RevenueID)
        {
            ReveneuData rvObj = new ReveneuData();
            string RecordId = null;
            DataListLoadRequest req = new DataListLoadRequest();
            req.ClientAppInfo = GetRequestHeader();
            req.DataListID = new Guid("445d0cc1-d229-4fff-ba73-3fd9853b9a7f");//Data List: Get Revenue RecordID From Revenue ID
            req.IncludeMetaData = true;
            var fvSet = new DataFormFieldValueSet();

            fvSet.Add("REVENUEID", RevenueID);
            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            req.Parameters = dfi;
            var result = _service.DataListLoad(req);
            if (result.Rows.Length > 0)
            {
                rvObj.RecordID = result.Rows[0].Values[0];
                rvObj.PaymentMethod = result.Rows[0].Values[1];
            }
            return rvObj;
        }
        public bool UpdateAdvanceNoticeSendDate(string RevenueId, string Type, string RevenueRecordID, string PaymentMethod, int RecordID)
        {
            bool IsSaved = false;
            Stopwatch stopwatch = new Stopwatch();
            /*
            stopwatch = Stopwatch.StartNew();
            ReveneuData rvobj = GetRevenueRecordID(RevenueId);
            stopwatch.Stop();
            appLogger.Info("Time taken to get Revenue RecordId and payment method: " + stopwatch.ElapsedMilliseconds + " ms");
            */
            stopwatch = Stopwatch.StartNew();
            if (!string.IsNullOrEmpty(RevenueRecordID))
            {
                if (Type == "One-Off")
                {
                    PledgePaymentDetailsEditForm2Data PledgeeditForm2 = new PledgePaymentDetailsEditForm2Data();
                    PledgeeditForm2.RecordID = RevenueRecordID;
                    PledgeeditForm2.PMADVANCENOTICESENTDATE = DateTime.Now;
                    switch (PaymentMethod)
                    {
                        case "Direct debit":
                            PledgeeditForm2.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.PledgePaymentDetailsEditForm2Enums.PAYMENTMETHODCODE.Direct_Debit;
                            break;
                        case "Credit card":
                            PledgeeditForm2.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.PledgePaymentDetailsEditForm2Enums.PAYMENTMETHODCODE.Credit_Card;
                            break;
                        case "Standing order":
                            PledgeeditForm2.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.PledgePaymentDetailsEditForm2Enums.PAYMENTMETHODCODE.Standing_Order;
                            break;
                    }
                    /*try
                    {
                        string payDetails = PledgeeditForm2.Save(provider());
                        stopwatch.Stop();
                        appLogger.Info("Time taken to Update AdvanceNoticeSentDate in BB for One-Off: " + stopwatch.ElapsedMilliseconds + " ms");
                        appLogger.Info("AdvanceNoticeSentDate Set Successfully with recordid: " + payDetails + " for Transaction Type:  " + Type);
                        IsSaved = true;
                    }
                    catch (AppFxWebServiceException e)
                    {
                        UpdateAdRecordStatus(RecordID, "Failed");//Set status to Failed
                        appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for set AdvanceNoticeSentDate : " + e.Message + " with Transaction Type: " + Type);
                        appLogger.Error(e.StackTrace);
                        appLogger.Error(e.InnerException);
                        if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                        {
                            appLogger.Info("Retrying...");
                            return UpdateAdvanceNoticeSendDate(RevenueId, Type, RevenueRecordID, PaymentMethod, RecordID);
                        }
                    }*/

                    int retryCount = 0;
                    while (retryCount < 4)
                    {
                        retryCount++;
                        try
                        {
                            string payDetails = PledgeeditForm2.Save(provider());
                            stopwatch.Stop();
                            appLogger.Info("Time taken to Update AdvanceNoticeSentDate in BB for One-Off: " + stopwatch.ElapsedMilliseconds + " ms");
                            appLogger.Info("AdvanceNoticeSentDate Set Successfully with recordid: " + payDetails + " for Transaction Type:  " + Type);
                            IsSaved = true;
                            break;
                        }
                        catch (Exception e)
                        {

                            if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                            {

                                if (retryCount == 4)
                                {
                                    UpdateAdRecordStatus(RecordID, "Failed");//Set status to Failed
                                    appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for set AdvanceNoticeSentDate : " + e.Message + " with Transaction Type: " + Type);
                                    appLogger.Error(e.InnerException);
                                    appLogger.Error(e.StackTrace);
                                    throw e;
                                }
                                else
                                {
                                    appLogger.Info("Retrying in UpdateAdvanceNoticeSendDate...");
                                }
                            }
                            else
                            {
                                UpdateAdRecordStatus(RecordID, "Failed");//Set status to Failed
                                appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for set AdvanceNoticeSentDate : " + e.Message + " with Transaction Type: " + Type);
                                appLogger.Error(e.InnerException);
                                appLogger.Error(e.StackTrace);
                                throw e;
                            }
                        }
                    }

                }
                else
                {
                    RecurringGiftPaymentDetailsEditForm3Data editPaymentFormData = new RecurringGiftPaymentDetailsEditForm3Data();
                    editPaymentFormData.RecordID = RevenueRecordID;
                    editPaymentFormData.PMADVANCENOTICESENTDATE = DateTime.Now;
                    switch (PaymentMethod)
                    {
                        case "Direct debit":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Direct_Debit;
                            break;
                        /*case "Cash":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.ca;
                            break;*/
                        case "Credit card":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Credit_Card;
                            break;
                        case "Standing order":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Standing_Order;
                            break;
                        case "Other":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Other;
                            break;
                        case "None":
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.None;
                            break;
                    }
                    /*try
                    {
                        string payDetails = editPaymentFormData.Save(provider());
                        stopwatch.Stop();
                        appLogger.Info("Time taken to Update AdvanceNoticeSentDate in BB for RecurringGift: " + stopwatch.ElapsedMilliseconds + " ms");
                        appLogger.Info("AdvanceNoticeSentDate Set Successfully with recordid: " + payDetails + " for Transaction Type: " + Type);
                        IsSaved = true;
                    }
                    catch (AppFxWebServiceException e)
                    {
                        UpdateAdRecordStatus(RecordID, "Failed");//Set status to Failed
                        appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for AdvanceNoticeSentDate  : " + e.Message + " for Transaction Type: " + Type);
                        appLogger.Error(e.StackTrace);
                        appLogger.Error(e.InnerException);
                        if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                        {
                            appLogger.Info("Retrying...");
                            return UpdateAdvanceNoticeSendDate(RevenueId, Type, RevenueRecordID, PaymentMethod, RecordID);
                        }
                    }*/

                    int retryCount = 0;
                    while (retryCount < 4)
                    {
                        retryCount++;
                        try
                        {
                            string payDetails = editPaymentFormData.Save(provider());
                            stopwatch.Stop();
                            appLogger.Info("Time taken to Update AdvanceNoticeSentDate in BB for RecurringGift: " + stopwatch.ElapsedMilliseconds + " ms");
                            appLogger.Info("AdvanceNoticeSentDate Set Successfully with recordid: " + payDetails + " for Transaction Type: " + Type);
                            IsSaved = true;
                            break;
                        }
                        catch (Exception e)
                        {

                            if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                            {

                                if (retryCount == 4)
                                {
                                    UpdateAdRecordStatus(RecordID, "Failed");//Set status to Failed
                                    appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for AdvanceNoticeSentDate  : " + e.Message + " for Transaction Type: " + Type);
                                    appLogger.Error(e.InnerException);
                                    appLogger.Error(e.StackTrace);
                                    throw e;
                                }
                                else
                                {
                                    appLogger.Info("Retrying in UpdateAdvanceNoticeSendDate...");
                                }
                            }
                            else
                            {
                                UpdateAdRecordStatus(RecordID, "Failed");//Set status to Failed
                                appLogger.Error("Error in SetAdvanceNoticeSentDateInBB for AdvanceNoticeSentDate  : " + e.Message + " for Transaction Type: " + Type);
                                appLogger.Error(e.InnerException);
                                appLogger.Error(e.StackTrace);
                                throw e;
                            }
                        }
                    }



                }
            }
            else
            {
                appLogger.Info("No Record Revenue found with given revenue Id :" + RevenueId);
            }
            return IsSaved;
        }
        #endregion

        #region DX112 Resolve Bot Process

        public void FindResolveBotRecords(long IncidentId)
        {
            try
            {
                appLogger.Info("ResolveBot process started...");

                #region DailyScheduler 
                UpdateDailySchedulerStatus("TriggerResolveBot", "In Progress", "UPDATE_STATUS");
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                string LastSuccessfulRunTime = GetDailySchedulerLastSuccessfullRunTime("TriggerResolveBot");
                if (!string.IsNullOrEmpty(LastSuccessfulRunTime))
                {
                    DateTime LastSuccessfulRunTime_GMT = DateTime.ParseExact(LastSuccessfulRunTime, "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'", CultureInfo.InvariantCulture);
                    LastSuccessfulRunTime = LastSuccessfulRunTime_GMT.ToUniversalTime().ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                }
                string Last15Minutes = Now.AddMinutes(-15).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                string fromTime = string.IsNullOrEmpty(LastSuccessfulRunTime) ? Last15Minutes : LastSuccessfulRunTime;
                #endregion

                string updatedRecordsFilter = " AND (Incident.CreatedTime >= '" + fromTime + "' OR Incident.UpdatedTime>= '" + fromTime + "')";
                ClientInfoHeader info = new ClientInfoHeader();

                info.AppID = "Get Incident Data";

                string Query = "SELECT Incident FROM Incident WHERE Incident.customFields.c.setupstatus.lookupName = 'Succeeded' AND Incident.statusWithType.status.lookupName = 'For Processing' AND Incident.disposition.lookupName = 'Commitment [set up]'" + updatedRecordsFilter +"'";

                Incident contactTemplate = new Incident();
                RNObject[] objectTemplates = new RNObject[] { contactTemplate };
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);
                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;
                if (rnObjects != null && rnObjects.Length > 0)
                {
                    appLogger.Info("Total Records : " + rnObjects.Length + " for ResolveBot process with date range between :" + Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'") + " To " + fromTime);
                    foreach (QueryResultData queryResultData in queryObjects)
                    {
                        foreach (RNObject data in queryResultData.RNObjectsResult)
                        {
                            Incident incident = (Incident)data;
                            appLogger.Info("Starting ResolveBot ");
                            if (incident.ID.id != 0)
                            {
                                TriggerResolveBot(incident.ID.id);
                            }
                        }
                    }
                }
                else
                {
                    appLogger.Info("No records found for ResolveBot with date range between :" + DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'") + " To " + fromTime);
                }

                UpdateDailySchedulerStatus("TriggerResolveBot", "Completed", "UPDATE_STATUS_FINAL");
                appLogger.Info("ResolveBot process ended...");
            }
            catch (Exception e)
            {
                UpdateDailySchedulerStatus("TriggerResolveBot", "Completed", "UPDATE_STATUS_FINAL");
                appLogger.Error("Error in FindResolveBotRecords: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void TriggerResolveBot(long IncidentID)
        {
            appLogger.Info("GetResolveBotRecords process started...");
            string Incident = null;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Incident details";


                string query = "SELECT Incident.ID,Incident.threads.text,Incident.customFields.c.bankaccountnumber,Incident.customFields.c.banksortcode,Incident.Customfields.c.supportertype.lookupName,Incident.category.lookupName,Incident.Customfields.c.sponsorchildref,Incident.Customfields.c.sponsorshipplus.lookupname,Incident.primaryContact.contact,Incident.Customfields.c.newsupporter.lookupname,Incident.Customfields.c.automatedresponse.lookupname,Incident.customFields.c.setupguid FROM Incident WHERE Incident.ID = " + IncidentID + " order by Incident.threads.createdTime ASC limit 0,1";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    appLogger.Info("Total GetResolveBotRecords found :" + result.CSVTables[0].Rows.Count());
                    foreach (string IncidentDataRow in result.CSVTables[0].Rows)
                    {

                        string[] values = IncidentDataRow.Split('^');
                        IncidentThreadText ThreadData = new IncidentThreadText();
                        string IncidentId = values[0];
                        UpdateResolveStartEndDateTime(Convert.ToInt64(IncidentId), "Start");
                        Incident = IncidentId;
                        if (!string.IsNullOrEmpty(values[1]))
                        {
                            List<string> Columns = new List<string>();
                            string ThreadText = values[1].Trim('\"');
                            Columns.AddRange(ThreadText.Split('\n'));
                            Dictionary<string, string> ThreadTextDic = new Dictionary<string, string>();
                            foreach (string data in Columns)
                            {
                                if (data.Contains(":"))
                                {
                                    string[] value = data.Split(':');
                                    ThreadTextDic.Add(value[0].Replace(" ", ""), value[1].TrimStart(' '));
                                }
                            }
                            ThreadData = GetObject<IncidentThreadText>(ThreadTextDic, "IncidentThreadText");
                        }
                        ThreadData.AccountNo = values[2];
                        ThreadData.SortCode = values[3];
                        ThreadData.SupporterType = values[4];
                        ThreadData.Category = values[5];
                        string sponsorchildref = values[6];
                        string sponsorshipplus = values[7] == "No" ? "No" : "Yes";
                        string ContactID = values[8];
                        ThreadData.NewSupporter = values[9];//DX105 change
                        string automatedresponse = values[10];
                        string sefguid = values[11];

                        InsertSEFOperationResponse(sefguid, "ResolveBot Process Started...", "ResolveBot", true);
                        string AnnualGifts = ThreadData.Birthday == "0" && ThreadData.Christmas == "0" ? "No" : "Yes";
                        UpdateResolveBotSetStatus(Convert.ToInt64(IncidentId), "Resolving");//Set SetupStatus as 'Resolving'
                        bool IsSuccess = CompareResolveBotCapabilities(ThreadData, sefguid);
                        if (IsSuccess)
                        {
                            ResolveBotSupporterData ReObj = new ResolveBotSupporterData();
                            ReObj.IncidentID = Convert.ToInt64(IncidentId);
                            ReObj.NeedKey = sponsorchildref;
                            ReObj.Email = ThreadData.SupporterEmail;
                            bool SupporterDataNeededToResolveIsNotEmpty = CheckSupporterDataNeededToResolveEnquiry(ReObj, sefguid);
                            if (SupporterDataNeededToResolveIsNotEmpty)
                            {
                                SupporterPreferences spObj = FetchSupporterPreferences(Convert.ToInt64(ContactID));
                                string DigitalChoice = "Unclear";
                                if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && (spObj.Comments == "No Pack" || spObj.Comments == "I don't want a physical pack in the post" || string.IsNullOrEmpty(spObj.Comments))) { DigitalChoice = "Digital"; }
                                if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && (spObj.Comments == "Welcome Pack" || spObj.Comments == "I do want a physical pack in the post")) { DigitalChoice = "Hybrid Welcome Pack"; }
                                if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && spObj.Comments == "Photo Only") { DigitalChoice = "Hybrid Photo Pack"; }
                                if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-In") { DigitalChoice = "Traditional"; }

                                appLogger.Info("The value DigitalChoice for ResolveBot is :" + DigitalChoice);
                                if (DigitalChoice == "Unclear")
                                {
                                    appLogger.Info("ResolveBot Failed as DigitalChoice is: " + DigitalChoice + " with incidentId: " + IncidentId);
                                    UpdateResolveBotSetStatus(Convert.ToInt64(IncidentId), "Failed");
                                    continue;
                                }
                                bool IsUpdated = false;
                                //DX174.13 Change start
                                if (automatedresponse == "Email")
                                {
                                    //DX181 - Automating multiple sponsorship applications start
                                    int OpenSponsorshipAppCount = GetSupporterOpenSponsorshipApplicationCount(Convert.ToInt64(ContactID));
                                    if (OpenSponsorshipAppCount > 1)
                                    {
                                        UpdateResolveBotSetStatus(Convert.ToInt64(IncidentId), "Failed to Resolve");
                                        UpdateSponsorshipAppThread(null, Convert.ToInt64(IncidentId), "Advance notice not sent due to multiple applications.  Ops to complete each enquiry.");
                                        InsertSEFOperationResponse(sefguid, "Advance notice not sent due to multiple applications", "ResolveBot", false);
                                        continue;
                                    }
                                    else
                                    {
                                        IsUpdated = UpdateResolveBotThread(Convert.ToInt64(IncidentId), Convert.ToInt64(ContactID));//Generate Advance Notice
                                        InsertSEFOperationResponse(sefguid, "Advance notice is created successfully", "ResolveBot", true);
                                    }
                                    //DX181 - Automating multiple sponsorship applications end
                                }
                                else
                                {
                                    IsUpdated = true;
                                    appLogger.Info("Advance notice cannot be generated as automatedresponse is:" + automatedresponse);
                                    InsertSEFOperationResponse(sefguid, "Advance notice cannot be generated as automatedresponse is" + automatedresponse, "ResolveBot", true);
                                }
                                //DX174.13 Change start

                                if (DigitalChoice == "Traditional" && sponsorshipplus == "No" && AnnualGifts == "No")
                                {
                                    appLogger.Info("DigitalChoice is Traditional ,no sponsorshipplus and no annual gifts.");
                                    if (IsUpdated)
                                    {
                                        UpdateResolveBotFinalStatus(Convert.ToInt64(IncidentId), ThreadData.NewSupporter);//DX105
                                    }

                                }
                                else if ((DigitalChoice == "Hybrid Welcome Pack" || DigitalChoice == "Hybrid Photo Pack") && (sponsorshipplus == "Yes" || AnnualGifts == "Yes"))
                                {
                                    CreateIncidentResolveBotHybrideCase(ContactID, IncidentId, DigitalChoice);
                                    if (IsUpdated)
                                    {
                                        UpdateResolveBotFinalStatus(Convert.ToInt64(IncidentId), ThreadData.NewSupporter);//DX105
                                    }
                                }
                                else if ((DigitalChoice == "Traditional" && (sponsorshipplus == "Yes" || AnnualGifts == "Yes")) || DigitalChoice == "Digital")
                                {
                                    if (IsUpdated)
                                    {
                                        UpdateResolveBotFinalStatus(Convert.ToInt64(IncidentId), ThreadData.NewSupporter);//DX105
                                    }
                                }
                                else if (DigitalChoice == "Hybrid Welcome Pack" || DigitalChoice == "Hybrid Photo Pack")
                                {
                                    CreateIncidentResolveBotHybrideCase(ContactID, IncidentId, DigitalChoice);
                                    if (IsUpdated)
                                    {
                                        UpdateResolveBotFinalStatus(Convert.ToInt64(IncidentId), ThreadData.NewSupporter);//DX105
                                    }
                                }
                            }
                        }
                        else
                        {
                            UpdateResolveBotSetStatus(Convert.ToInt64(IncidentId), "Unable");//Set SetupStatus as ''Unable to Resolve'
                        }
                        UpdateResolveStartEndDateTime(Convert.ToInt64(IncidentId), "End");
                        InsertSEFOperationResponse(sefguid, "ResolveBot Process Ended...", "ResolveBot", true);
                    }
                }
                else
                {
                    appLogger.Info("No Incident Records Found To Resolve.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetResolveBotRecords: " + e.Message + " With incidentID: " + Incident);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetResolveBotRecords process ended...");
        }
        public void InsertSEFOperationResponse(string sefGUID, string Message, string msgHeader, bool responseType)
        {
            MySqlConnection conn;
            string Query = "";
            conn = new MySqlConnection();
            try
            {
                if (!string.IsNullOrWhiteSpace(sefGUID) && !string.IsNullOrWhiteSpace(Message))
                {

                    conn.ConnectionString = mycuk_tcpt4ConnectionString;
                    conn.Open();

                    int responsetype = ((responseType == true) ? 1 : 0);
                    Query = "INSERT INTO `SEF_Operation_Data` (messageType, messageHeader, message, guid, responseType) VALUES (@messageType, @messageHeader, @message, @guid, @responseType)";

                    using (var insertCommand = new MySqlCommand(Query, conn))
                    {
                        //('Response', '" + msgHeader + "','" + Message + "', '" + sefGUID + "', " + responsetype + ")";
                        insertCommand.Parameters.AddWithValue("@messageType", "Response");
                        insertCommand.Parameters.AddWithValue("@messageHeader", msgHeader.ToString());
                        insertCommand.Parameters.AddWithValue("@message", Message);
                        insertCommand.Parameters.AddWithValue("@guid", sefGUID);
                        insertCommand.Parameters.AddWithValue("@responseType", responsetype);

                        insertCommand.ExecuteNonQuery();
                    }
                    conn.Close();
                }
            }
            catch (Exception e)
            {
                if (conn.State == System.Data.ConnectionState.Open)
                {
                    conn.Close();
                }
                Console.WriteLine("Error in inserting record in DB : " + e.Message);
                appLogger.Error("Error in inserting record in DB : " + e.Message);
            }
        }
        public void UpdateResolveBotFinalStatus(long IncidentId, string NewSupporter)
        {
            appLogger.Info("UpdateResolveBotFinalStatus started with incident id: " + IncidentId + " for resolve bot process");
            try
            {
                int Category = 264;//264 - Sponsoring for the first time
                if (NewSupporter == "No")
                {
                    Category = 65;//65 - Sponsorship additional child
                }

                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                    Category = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = Category,
                            idSpecified = true
                        }
                    },
                    StatusWithType = new StatusWithType
                    {
                        Status = new NamedID
                        {
                            ID = new ID
                            {
                                id = 107,//Resolved (Automated)
                                idSpecified = true
                            }
                        }
                    },
                    Disposition = new NamedIDHierarchy// DX174 change
                    {
                        ID = new ID
                        {
                            id = 12,//Commitment [set up]
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 1134, // New Commitments
                                    idSpecified = true
                                }
                            }
                        }
                    },
                };

                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1707), DataTypeEnum.NAMED_ID);//Resolved

                GenericField feedbackstatusField = null;
                feedbackstatusField = createGenericfield("feedbackstatus", createNamedIdDataValue(1646), DataTypeEnum.NAMED_ID); // 1646(TST1) Enquiry – Neutral

                //ResolveEnded: DateTime(Now) this need to add in RightNow

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField, feedbackstatusField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("ResolveBot Final Status Updated Successfully with incidentid " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateResolveBotFinalStatus: " + ex.Message + " for IncidentId: " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
            appLogger.Info("UpdateResolveBotFinalStatus ended...");
        }
        public bool CompareResolveBotCapabilities(IncidentThreadText ThreadObj, string sefguid)
        {
            bool IsSuccess = false;
            try
            {
                ResolveBot resolveBot = new ResolveBot();
                resolveBot.PaymentMethod = !string.IsNullOrEmpty(ThreadObj.AccountNo) && !string.IsNullOrEmpty(ThreadObj.SortCode) ? "Direct Debit Monthly" : "Other";
                resolveBot.CountryOffice = !string.IsNullOrEmpty(ThreadObj.Country) && ThreadObj.Country == "UNITED KINGDOM" ? "UK" : "Other";
                resolveBot.ApplicationSource = !string.IsNullOrEmpty(ThreadObj.Category) && (ThreadObj.Category == "Web Sponsorship" || ThreadObj.Category == "SMS Application") ? "Web" : "Other";
                resolveBot.SupporterType = ThreadObj.SupporterType;
                resolveBot.NewSupporter = ThreadObj.NewSupporter;

                ResolveBot ResolveBotCondition = new ResolveBot()
                {
                    PaymentMethod = "Direct Debit Monthly",
                    CountryOffice = "UK",
                    ApplicationSource = "Web",
                    SupporterType = "Individual",
                    NewSupporter = "Yes"
                };
                if (resolveBot.NewSupporter == "No")
                {
                    ResolveBotCondition.NewSupporter = "No";
                }
                string ResolveBotJson = SimpleJson.SerializeObject(resolveBot);
                string ResolveBotConditionJson = SimpleJson.SerializeObject(ResolveBotCondition);
                if (ResolveBotJson.Equals(ResolveBotConditionJson))
                {
                    IsSuccess = true;
                    InsertSEFOperationResponse(sefguid, "Thread Fields match with ResolveBot Capabilities Condition", "ResolveBot", true);
                }
                else
                {
                    appLogger.Info("ResolveBot Fields: " + ResolveBotJson + " Does not match with ResolveBot Capabilities Condition: " + ResolveBotConditionJson);
                    InsertSEFOperationResponse(sefguid, "Thread Fields: " + ResolveBotJson + " Does not match with ResolveBot Capabilities Condition", "ResolveBot", false);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CompareResolveBotCapabilities: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                InsertSEFOperationResponse(sefguid, "Error in Compare ResolveBot Capabilities", "ResolveBot", false);
            }
            return IsSuccess;
        }
        public bool CheckSupporterDataNeededToResolveEnquiry(ResolveBotSupporterData ReObj, string sefguid)
        {
            bool IsSuccess = false;
            appLogger.Info("CheckSupporterDataNeededToResolveEnquiry Process Started.");
            try
            {
                List<string> SupporterFields = new List<string>();
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Commitment details";
                string query = "SELECT C.SupporterGroup.PrioritySupporterId,C.SupporterGroup.PrioritySupporterId.customFields.c.blackbaudid,C.SupporterGroup.PrioritySupporterId.customFields.c.globalid,C.SupporterGroup.GlobalID,C.SupporterGroup.CompassConID FROM SCBS_CM.Commitment C WHERE C.Need.NeedKey = '" + ReObj.NeedKey + "' AND C.EndDate IS NULL";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    appLogger.Info("CheckSupporterDataNeededToResolveEnquiry found :" + result.CSVTables[0].Rows.Count());
                    if (result.CSVTables[0].Rows.Count() == 1)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        bool IsAnyContactFieldEmpty = false;
                        bool IsResolveBotFailed = false;
                        string Msg = "";
                        IsAnyContactFieldEmpty = !string.IsNullOrEmpty(values[0]) ? false : true;
                        if (IsAnyContactFieldEmpty) { Msg += "ResolveBot Failed as SupporterID is empty. "; IsResolveBotFailed = true; SupporterFields.Add("SupporterID"); }
                        IsAnyContactFieldEmpty = !string.IsNullOrEmpty(values[1]) ? false : true;
                        if (IsAnyContactFieldEmpty) { Msg += "ResolveBot Failed as BlackBaudID is empty. "; IsResolveBotFailed = true; SupporterFields.Add("BlackBaudID"); }
                        IsAnyContactFieldEmpty = !string.IsNullOrEmpty(values[2]) ? false : true;
                        if (IsAnyContactFieldEmpty) { Msg += "ResolveBot Failed as SupporterGlobalID is empty. "; IsResolveBotFailed = true; SupporterFields.Add("SupporterGlobalID"); }
                        IsAnyContactFieldEmpty = !string.IsNullOrEmpty(values[3]) ? false : true;
                        if (IsAnyContactFieldEmpty) { Msg += "ResolveBot Failed as SupporterGroupGlobalID is empty. "; IsResolveBotFailed = true; SupporterFields.Add("SupporterGroupGlobalID"); }
                        IsAnyContactFieldEmpty = !string.IsNullOrEmpty(values[4]) ? false : true;
                        if (IsAnyContactFieldEmpty) { Msg += "ResolveBot Failed as CompassConID is empty. "; IsResolveBotFailed = true; SupporterFields.Add("CompassConID"); }
                        var Email = new MailAddress(ReObj.Email);
                        if (!Email.Host.Contains(".")) { Msg += " InValid Email:" + ReObj.Email; IsResolveBotFailed = true; SupporterFields.Add("InValid Email"); }

                        if (IsResolveBotFailed)
                        {
                            appLogger.Info("ResolveBot failed as one the required field is empty. (" + string.Join(",", SupporterFields) + ") for NeedKey :" + ReObj.NeedKey + " Incident ID: " + ReObj.IncidentID);
                            UpdateResolveBotSetStatus(ReObj.IncidentID, "Failed");
                            InsertSEFOperationResponse(sefguid, "ResolveBot failed as one the required field is empty. (" + string.Join(",", SupporterFields) + ")", "ResolveBot", false);
                            //Failed
                        }
                        else
                        {
                            IsSuccess = true;
                            InsertSEFOperationResponse(sefguid, "ResolveBot Supporter Data Check-Up Process Completed", "ResolveBot", true);
                        }
                    }
                    else
                    {
                        appLogger.Info("Resolve failed as Total Commitment records to linked Child is: " + result.CSVTables[0].Rows.Count() + " which is more than 1 for Incident ID: " + ReObj.IncidentID);
                        UpdateResolveBotSetStatus(ReObj.IncidentID, "Failed");
                        InsertSEFOperationResponse(sefguid, "Total Commitment records to linked Child is: " + result.CSVTables[0].Rows.Count(), "ResolveBot", false);
                        //Failed
                    }
                }
                else
                {
                    appLogger.Info("No Commitment records found to linked with given SponsorChildRef: " + ReObj.NeedKey + " Incident ID: " + ReObj.IncidentID);
                    UpdateResolveBotSetStatus(ReObj.IncidentID, "Failed");
                    InsertSEFOperationResponse(sefguid, "No Commitment records found to linked with given needkey: " + ReObj.NeedKey, "ResolveBot", false);
                    //Failed
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckSupporterDataNeededToResolveEnquiry: " + e.Message + " with NeedKey" + ReObj.NeedKey + " Incident ID: " + ReObj.IncidentID);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                UpdateResolveBotSetStatus(ReObj.IncidentID, "Failed");
                InsertSEFOperationResponse(sefguid, "Error in Supporter Data Check-Up", "ResolveBot", false);
            }
            appLogger.Info("CheckSupporterDataNeededToResolveEnquiry Process Ended.");
            return IsSuccess;
        }
        public void UpdateResolveBotSetStatus(long IncidentId, string SetupStatus)
        {
            /*
             Not Started - 352
               In Progress - 355
               Held - 1690
               Released - 1691
               Succeeded - 1692
               Failed - 1693
               Retry - 1694
               Resolving - 1704
               Unable to Resolve - - 1705 
               Failed to Resolve - 1706
               Resolved - 1707
               Check - 1718
               No match - 1719
               Manual - 1720
                        */
            appLogger.Info("Updating Incident SetupStatus: " + SetupStatus + " with incident id: " + IncidentId + " for resolve bot process");
            int SetupStatusVal = 0;
            switch (SetupStatus)
            {
                case "Resolving":
                    SetupStatusVal = 1704;
                    break;
                case "Unable":
                    SetupStatusVal = 1705;
                    break;
                case "Failed":
                    SetupStatusVal = 1706;
                    break;
                case "Resolved":
                    SetupStatusVal = 1707;
                    break;
            }
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusVal), DataTypeEnum.NAMED_ID);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("SetupStatus : " + SetupStatus + " Updated Successfully with incidentid " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateResolveBotSetStatus: " + ex.Message + " with incident id " + IncidentId + "for setupstatus :" + SetupStatus);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public void CreateIncidentResolveBotHybrideCase(string SupporterID, string EnquiryIncidentID, string DigitalChoice)
        {
            appLogger.Info("CreateIncidentResolveBotHybrideCase Started with supporterID: " + SupporterID);
            //long incidentId = 0;
            string subject = null;
            string internalSubject = null;
            int CategoryID = 710; //710 - Welcome Pack Re-Ordered
            subject = "Welcome Pack Re-ordered";
            internalSubject = "Welcome Pack Re-ordered";
            if (DigitalChoice == "Hybrid Photo Pack")
            {
                CategoryID = 1179;//1179 - Welcome Photo Pack Re-Ordered
                subject = "Welcome Photo Pack Re-Ordered";
                internalSubject = "Welcome Photo Pack Re-Ordered";
            }
            int StatusTypeID = 107; //107 - Resolved (Automated)

            try
            {
                Incident incident = new Incident
                {
                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = Convert.ToInt64(SupporterID),
                                idSpecified = true
                            }
                        }
                    },
                    Subject = subject,
                    Category = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = CategoryID,
                            idSpecified = true
                        }
                    },
                    StatusWithType = new StatusWithType
                    {
                        Status = new NamedID
                        {
                            ID = new ID
                            {
                                id = StatusTypeID,
                                idSpecified = true
                            }
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 546,
                                idSpecified = true
                            }
                        }
                    },
                    Product = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 440,//440  - Sponsorship
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 303, //Supporting Compassion
                                    idSpecified = true
                                }
                            }
                        }
                    },
                };

                GenericField feedbackstatusField = null;
                feedbackstatusField = createGenericfield("feedbackstatus", createNamedIdDataValue(1646), DataTypeEnum.NAMED_ID); // 1646(TST1)

                GenericField internalSubjectField = null;
                if (internalSubject != null && !string.IsNullOrWhiteSpace(internalSubject))
                {
                    internalSubjectField = createGenericfield("internalsubject", createStringdataValue(internalSubject), DataTypeEnum.STRING);
                }

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { feedbackstatusField, internalSubjectField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                /*Thread[] thrd = new Thread[1];

                thrd[0] = new Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                thrd[0].EntryType = new NamedID { ID = new ID { id = 3, idSpecified = true } };
                thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };

                thrd[0].Text = " ";

                incident.Threads = thrd; 
                */
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                RNObject[] createContact = new RNObject[] { incident };
                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                            new RNObject[] { incident },
                                            new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("Incident created successfully with id: " + createResult[0].ID.id + " for resolve bot hybride case for supporterid: " + SupporterID);
                UpdateResolveBotFinalStatus(Convert.ToInt64(EnquiryIncidentID));
            }
            catch (Exception e)
            {
                UpdateResolveBotSetStatus(Convert.ToInt64(EnquiryIncidentID), "Failed");
                appLogger.Error("Error in CreateIncidentResolveBotHybrideCase: " + e.Message + " with SupporterID: " + SupporterID);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void UpdateResolveBotFinalStatus(long IncidentId)
        {
            appLogger.Info("Updating ResolveBot Final Status with incident id: " + IncidentId + " for resolve bot process");
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                    Category = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 264,//264 - Sponsoring for the first time
                            idSpecified = true
                        }
                    },
                    StatusWithType = new StatusWithType
                    {
                        Status = new NamedID
                        {
                            ID = new ID
                            {
                                id = 107,//Resolved (Automated)
                                idSpecified = true
                            }
                        }
                    },
                };

                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1707), DataTypeEnum.NAMED_ID);//Resolved

                GenericField feedbackstatusField = null;
                feedbackstatusField = createGenericfield("feedbackstatus", createNamedIdDataValue(1646), DataTypeEnum.NAMED_ID); // 1646(TST1) Enquiry – Neutral

                //ResolveEnded: DateTime(Now) this need to add in RightNow

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField, feedbackstatusField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("ResolveBot Final Status Updated Successfully with incidentid " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateResolveBotFinalStatus: " + ex.Message + " for IncidentId: " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public string GenerateAdvanceNoticeResolveBot(long ContactId, long IncidentId)
        {
            string content = null;
            string Message = null;
            try
            {
                System.Net.ServicePointManager.ServerCertificateValidationCallback +=
                 (se, cert, chain, sslerror) =>
                 {
                     return true;
                 };
                var restClient = new RestClient("https://oneview.org.uk/manage_supporter/Generate_advance_notice_message.php?id=" + ContactId);
                var tokenRequest = new RestRequest(Method.GET);
                tokenRequest.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                IRestResponse tokenResponse = restClient.Execute(tokenRequest);
                content = tokenResponse.Content; // raw content as string
                ResolveBotAdvanceNotice adObj = RestSharp.SimpleJson.DeserializeObject<ResolveBotAdvanceNotice>(content);
                if (adObj.error == true)
                    appLogger.Info("Error in Generating pdf due to : " + adObj.message + " for contactId: " + ContactId);
                else
                    Message = adObj.message;
            }
            catch (Exception e)
            {
                UpdateAdvanceNoticeThread(IncidentId, "Unable to generate advance notice text");
                UpdateResolveBotSetStatus(IncidentId, "Failed");
                appLogger.Error("Error in GeneratePdf for advance notice" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                if (content != null)
                {
                    appLogger.Error("Response content : " + content);
                }
            }
            return Message;
        }
        public void CreateIncidentResolveBotAN(long SupporterID, long IncidentId)
        {
            appLogger.Info("Creating Incident for ResolveBot Advance Notice process with supporterid: " + SupporterID + " and incident id: " + IncidentId);
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {
                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = Convert.ToInt64(SupporterID),
                                idSpecified = true
                            }
                        }
                    },

                    Subject = "Confirming your life changing donations to Compassion UK"
                };
                RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];

                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                //thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                //thrd[0].ContentType = new NamedID { ID = new ID { id = 2, idSpecified = true } }; //html type
                thrd[0].EntryType = new NamedID { ID = new ID { id = 3, idSpecified = true } };
                thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };

                string ThreadTxt = GenerateAdvanceNoticeResolveBot(SupporterID, IncidentId);

                thrd[0].Text = ThreadTxt;
                incident.Threads = thrd;
                GenericField campaignFormTypeField = null;
                GenericField internalSubjectField = null;
                //assignaccount 99
                /*internalSubjectField = createGenericfield("internalsubject", createStringdataValue("Advance notice - " + incidentdata.Type + " - change requested on " + DateTime.Now.ToString("dd MM yyyy")), DataTypeEnum.STRING);


                campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1666), DataTypeEnum.NAMED_ID);//ID 1666 
                */
                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { campaignFormTypeField, internalSubjectField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);
                appLogger.Info("ResolveBot Advance Notice Incident Created with ID " + createResult[0].ID.id + " with Supporterid " + SupporterID);
                UpdateResolveBotFinalStatus(IncidentId);
            }
            catch (Exception e)
            {
                UpdateResolveBotSetStatus(IncidentId, "Failed");
                appLogger.Error("Error in creating incident for ResolveBot Advance Notice Incident: " + e.Message + " For supporterId: " + SupporterID);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void UpdateResolveStartEndDateTime(long IncidentId, string Type)
        {
            appLogger.Info("Updating ResolveBot : " + Type + "DateTime with incident id: " + IncidentId + " for resolve bot process");
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                GenericField ResolveStartedGenericField = null;
                GenericField ResolveEndedGenericField = null;
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                if (Type == "Start")
                {
                    ResolveStartedGenericField = createGenericfield("resolvestarted", createdatetimedataValue(Now), DataTypeEnum.DATETIME);
                }
                else
                {
                    ResolveEndedGenericField = createGenericfield("resolveended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);
                }

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { ResolveStartedGenericField, ResolveEndedGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("Updating Resolve : " + Type + "DateTime Updated Successfully with incidentid " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateResolveStartEndDateTime: " + ex.Message + " with incident id " + IncidentId + " for " + Type);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public bool UpdateResolveBotThreadOld(long IncidentId, long SupporterID)
        {
            bool IsSuccess = true;
            appLogger.Info("UpdateResolveBotThread started with incidentid: " + IncidentId + " and contactID: " + SupporterID);

            try
            {
                string ThreadTxt = GenerateAdvanceNoticeResolveBot(SupporterID, IncidentId);
                if (ThreadTxt != "Advance Notice can not be generated as supporter has other RG")
                {
                    Incident incident = new Incident
                    {
                        ID = new ID
                        {
                            id = IncidentId,
                            idSpecified = true
                        },
                    };


                    RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];
                    thrd[0] = new RightNowServices.Thread();
                    thrd[0].action = ActionEnum.add;
                    thrd[0].actionSpecified = true;
                    //thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                    //thrd[0].ContentType = new NamedID { ID = new ID { id = 2, idSpecified = true } }; //html type
                    thrd[0].EntryType = new NamedID { ID = new ID { id = 2, idSpecified = true } };
                    thrd[0].Channel = new NamedID { ID = new ID { id = 1, idSpecified = true } };

                    thrd[0].Text = ThreadTxt;
                    incident.Threads = thrd;

                    GenericObject genericObject = new GenericObject();
                    genericObject.GenericFields = new GenericField[] { };
                    genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                    GenericField customFieldsPackage = new GenericField();
                    customFieldsPackage.name = "c";
                    customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                    customFieldsPackage.dataTypeSpecified = true;
                    customFieldsPackage.DataValue = new DataValue();
                    customFieldsPackage.DataValue.Items = new[] { genericObject };
                    customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                    incident.CustomFields = new GenericObject();
                    incident.CustomFields.GenericFields = new GenericField[1];
                    incident.CustomFields.GenericFields[0] = customFieldsPackage;
                    incident.CustomFields.ObjectType = new RNObjectType();
                    incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                    RNObject[] createContact = new RNObject[] { incident };
                    rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                    new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                    appLogger.Info("UpdateResolveBotThread Updated Successfully with incidentid: " + IncidentId + " and supporterID: " + SupporterID);
                }
                else
                {
                    appLogger.Info("Advance Notice can not be generated as supporter has other RGs for Supporter: " + SupporterID);
                    UpdateResolveBotSetStatus(IncidentId, "Failed");
                    IsSuccess = false;
                }
            }
            catch (Exception ex)
            {
                UpdateResolveBotSetStatus(IncidentId, "Failed");
                appLogger.Error("Error in UpdateResolveBotThread: " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
            return IsSuccess;
        }
        public bool UpdateResolveBotThread(long IncidentId, long SupporterID)
        {
            bool IsSuccess = true;
            appLogger.Info("UpdateResolveBotThread started with incidentid: " + IncidentId + " and contactID: " + SupporterID);

            try
            {
                string ThreadTxt = GenerateAdvanceNoticeResolveBot(SupporterID, IncidentId);
                if (!string.IsNullOrEmpty(ThreadTxt) && ThreadTxt == "Advance Notice can not be generated as supporter has other RG")
                {
                    ThreadTxt = "Unable to generate advance notice text";
                    appLogger.Info("Advance Notice can not be generated as supporter has other RGs for Supporter: " + SupporterID);
                    UpdateResolveBotSetStatus(IncidentId, "Failed");
                    IsSuccess = false;
                }
                else if (!string.IsNullOrEmpty(ThreadTxt) && ThreadTxt.Contains("Advance notice is too complex to generate"))
                {
                    ThreadTxt = "Advance notice is too complex to generate";
                    appLogger.Info("Advance Notice can not be generated as Advance notice is too complex to generate for Supporter: " + SupporterID);
                    UpdateResolveBotSetStatus(IncidentId, "Failed");
                    IsSuccess = false;
                }


                if (!string.IsNullOrEmpty(ThreadTxt))
                    UpdateAdvanceNoticeThread(IncidentId, ThreadTxt);
                else
                    IsSuccess = false;
            }
            catch (Exception ex)
            {
                UpdateResolveBotSetStatus(IncidentId, "Failed");
                IsSuccess = false;
                appLogger.Error("Error in UpdateResolveBotThread: " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
            return IsSuccess;
        }
        public void UpdateAdvanceNoticeThread(long IncidentId, string ThreadText)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };


                RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];
                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                //thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };

                thrd[0].ContentType = new NamedID { ID = new ID { id = 2, idSpecified = true } }; //html type
                thrd[0].EntryType = new NamedID { ID = new ID { id = 2, idSpecified = true } };//Email
                thrd[0].Channel = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                if (ThreadText == "Unable to generate advance notice text")
                {
                    thrd[0].EntryType = new NamedID { ID = new ID { id = 3, idSpecified = true } };//Web
                    thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                }
                else if (ThreadText == "Advance notice is too complex to generate")
                {
                    //add in private note
                    thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                    thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                }

                thrd[0].Text = ThreadText;
                incident.Threads = thrd;

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("AdvanceNotice message updated successfully with incidentid: " + IncidentId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateAdvanceNoticeThread:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        #endregion

        public string GetDepartureReasonGUID()
        {
            string Guid = null;
            var Row = GetSponsorshipprogramReasonlist();
            for (int i = 0; i < Row.Rows.Length; i++)
            {
                if (Row.Rows[i].Values[1].ToString() == "Departure")
                {
                    Guid = Row.Rows[i].Values[0].ToString();
                    break;
                }
            }
            return Guid;
        }
        public void DepartureInfo()
        {
            string Guid = GetDepartureReasonGUID();
        }

        private DataListLoadReply GetSponsorshipprogramReasonlist()
        {
            var req = new Blackbaud.AppFx.WebAPI.ServiceProxy.DataListLoadRequest();
            req.ClientAppInfo = GetRequestHeader();
            req.DataListID = new Guid("10c9e6e4-3520-4f95-85d8-d249d3d71661");
            req.IncludeMetaData = true;
            return _service.DataListLoad(req);

        }

        public List<Notes> GetNotesCount()
        {
            List<Notes> nList = new List<Notes>();
            try
            {

                ClientInfoHeader info = new ClientInfoHeader
                {
                    AppID = "Get Sup Notes",
                };
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string Query = "SELECT Contact.notes.id FROM Contact WHERE ID=" + 296;
                byte[] contents;
                CSVTableSet Result;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out Result, out contents);
                if (Result.CSVTables[0].Rows.Length > 0)
                {
                    for (int i = 0; i < Result.CSVTables[0].Rows.Length; i++)
                    {
                        long NoteID = Convert.ToInt64(Result.CSVTables[0].Rows[i]);
                        nList.Add(new Notes { NoteID = NoteID });
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Info("Error in GetSupNotes:" + e.Message);
                appLogger.Info(e.InnerException);
                appLogger.Info(e.StackTrace);
            }
            return nList;
        }
        public void DeleteSupNotes()
        {
            string ObjectType = "Notes";
            try
            {
                ClientInfoHeader clientInfoHeaderROQL = new ClientInfoHeader();
                clientInfoHeaderROQL.AppID = "Update Supporter";
                UpdateProcessingOptions options = new UpdateProcessingOptions();
                options.SuppressExternalEvents = false;
                options.SuppressRules = false;

                Contact updateContact = new Contact();
                updateContact.Notes = new Note[] { };
                ID contactID = new ID();
                contactID.id = 229207;

                updateContact.ID = contactID;
                updateContact.ID.idSpecified = true;
                List<GenericField> genFieldsList = new List<GenericField>();
                GenericField genericFieldFirstLogin = new GenericField();
                genericFieldFirstLogin.dataType = DataTypeEnum.STRING;
                genericFieldFirstLogin.dataTypeSpecified = true;
                genericFieldFirstLogin.name = "appfirstloggedin";
                genericFieldFirstLogin.DataValue = null;

                GenericField genericFieldFirstLoginAndroid = new GenericField();
                genericFieldFirstLoginAndroid.dataType = DataTypeEnum.STRING;
                genericFieldFirstLoginAndroid.dataTypeSpecified = true;
                genericFieldFirstLoginAndroid.name = "appfirstloggedin_android";
                genericFieldFirstLoginAndroid.DataValue = null;

                genFieldsList.Add(genericFieldFirstLogin);
                genFieldsList.Add(genericFieldFirstLoginAndroid);
                /*
                  dataType = DataTypeEnum.STRING,
                  dataTypeSpecified = true,
                  name = dynamicModels[i].ColumnName.Trim(),
                  DataValue = null

                 */

                /*
                PersonName updatePersonName = new PersonName();
                PersonNameNullFields valobj = new PersonNameNullFields();

                    valobj.First = true;

                updatePersonName.ValidNullFields = valobj;
                updateContact.Name = updatePersonName;
                */

                /*List<Notes> TotalNotes = GetNotesCount();
                if (TotalNotes.Count > 0)
                {
                    Note[] SupporterNotes = new Note[TotalNotes.Count];
                    for (int i = 0; i < TotalNotes.Count; i++)
                    {
                        SupporterNotes[i] = new Note();
                        SupporterNotes[i].action = ActionEnum.remove;
                        SupporterNotes[i].actionSpecified = true;
                        SupporterNotes[i].Text = null;
                        ID Noteid = new ID();
                        Noteid.id = TotalNotes[i].NoteID;
                        Noteid.idSpecified = true;
                        SupporterNotes[i].ID = Noteid;
                    }
                    updateContact.Notes = SupporterNotes;
                }*/
                GenericObject genericObject1 = new GenericObject();
                genericObject1.GenericFields = genFieldsList.ToArray();
                genericObject1.ObjectType = new RNObjectType() { TypeName = "CustomContacts" };

                GenericField updateCustomFieldsPackage = new GenericField();
                updateCustomFieldsPackage.name = "c";
                updateCustomFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                updateCustomFieldsPackage.dataTypeSpecified = true;
                updateCustomFieldsPackage.DataValue = new DataValue();
                updateCustomFieldsPackage.DataValue.Items = new[] { genericObject1 };
                updateCustomFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                updateContact.CustomFields = new GenericObject();
                updateContact.CustomFields.GenericFields = new GenericField[1];
                updateContact.CustomFields.GenericFields[0] = updateCustomFieldsPackage;
                updateContact.CustomFields.ObjectType = new RNObjectType();
                updateContact.CustomFields.ObjectType.TypeName = "ContactCustomFields";

                ClientInfoHeader updateClientInfoHeader = new ClientInfoHeader();
                updateClientInfoHeader.AppID = "Supporter Update";

                RNObject[] updateObject = new RNObject[] { updateContact };
                rightNowSyncPortClient.Update(updateClientInfoHeader, api, updateObject, options);

            }
            catch (Exception e)
            {

            }
        }


        #region Compassion Celebration Services V2 - Datapoint (23/07/2021)
        public void SyncCelebrationServicesData(int OrgID)
        {
            appLogger.Info("Sync Celebration Services V2 process started for OrgID : (" + OrgID + ")");
            if (OrgID == null || OrgID == 0)
            {
                appLogger.Info("Sync Celebration Services V2 process parameter is empty ...");
            }
            else
            {
                //SyncLatestCommitmentsInOrg(OrgID);
                //SyncWorthyCommitmentInOrg(Convert.ToInt64(OrgID));
                //SyncOrganisationActiveSponsorshipData(OrgID);
                WorthyCommitmentOperation(OrgID, 0);
                SyncOrganisationData(OrgID);
                SyncCommunityDataV2(OrgID, 0);
                SyncCampaignData(OrgID);
                CreateSponosoredChildImageForSlider(OrgID, 0);
                UpdatePPT_TypeOfAllOrg(Convert.ToInt64(OrgID));
                FinacialDataInsertMain(Convert.ToInt64(OrgID), 0);
                UpdateFinancialSupportAndNoOfGiftInOrgTable(Convert.ToInt64(OrgID), 0);
                UpdateOrgLastSyncTime(Convert.ToInt64(OrgID));
            }
            appLogger.Info("Sync Celebration Services V2 process ended for OrgID : (" + OrgID + ")");
        }

        public void RunEntityOperation(EntityData entityObj)
        {
            appLogger.Info("Run Entity Operation Started For Entity Id : " + entityObj.Entity_Id);
            List<EntityData> Org_Ids = GetAllOrgLinkedWithMenuItemID(entityObj);
            AddingOrgIIntoEntityMapper(entityObj, Org_Ids);
            foreach (EntityData rowdata in Org_Ids)
            {
                SyncCelebrationServicesData(Convert.ToInt32(rowdata.Org_Id));
            }
            UpdateEntityOperationStatusInEnityTable(entityObj, Org_Ids);
            appLogger.Info("Run Entity Operation Ended For Entity Id : " + entityObj.Entity_Id);
        }

        public void RunEventOperation(EntityData entityObj)
        {
            appLogger.Info("Run Event Operation Started For Entity Id : " + entityObj.Entity_Id);
            List<EntityData> Event_Ids = GetAllEventLinkedWithMenuItemID(entityObj);
            AddingEventIdIntoEntityMapper(entityObj, Event_Ids);
            foreach (EntityData rowdata in Event_Ids)
            {
                appLogger.Info("Sync Celebration Services Event process started for Event Id : (" + rowdata.Event_Id + ")");
                if (rowdata.Event_Id == 0)
                {
                    appLogger.Info("Sync Celebration Services Event process parameter is empty ...");
                }
                else
                {
                    WorthyCommitmentOperation(0, Convert.ToInt64(rowdata.Event_Id));
                    SyncEventData(Convert.ToInt64(rowdata.Event_Id));
                    SyncCommunityDataV2(0, Convert.ToInt64(rowdata.Event_Id));
                    CreateSponosoredChildImageForSlider(0, Convert.ToInt64(rowdata.Event_Id));
                    UpdatePPT_TypeOfEvent(Convert.ToInt64(rowdata.Event_Id));
                    FinacialDataInsertMain(0, Convert.ToInt64(rowdata.Event_Id));
                    UpdateFinancialSupportAndNoOfGiftInOrgTable(0, Convert.ToInt64(rowdata.Event_Id));
                    UpdateEventLastSyncTime(Convert.ToInt64(rowdata.Event_Id));
                }
                appLogger.Info("Sync Celebration Services Event process ended for Event Id : (" + rowdata.Event_Id + ")");
            }
            UpdateEventOperationStatusInEnityTable(entityObj, Event_Ids);
            appLogger.Info("Run Event Operation Ended For Entity Id : " + entityObj.Entity_Id);
        }

        public List<EntityData> GetAllEventLinkedWithMenuItemID(EntityData entityObj)
        {
            List<EntityData> entityData = new List<EntityData>();
            appLogger.Info("Get All Event Linked With Parameter " + SimpleJson.SerializeObject(entityObj) + " started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch EventId";
                bool hasParameter = false;
                string query = "SELECT OP.id from opportunity as OP WHERE ";
                if (entityObj.Event_Series_Id != 0)
                {
                    query += " OP.customFields.Standard.EventSeries.ID = " + entityObj.Event_Series_Id;
                    hasParameter = true;
                }
                if (entityObj.Event_Ambassador_Id != 0)
                {
                    if (hasParameter) { query += " AND"; }
                    //query += " OP.customFields.Standard.EventAmbassador.ID = " + entityObj.Event_Ambassador_Id;
                    query += " OP.primaryContact.contact.id = " + entityObj.Event_Ambassador_Id;
                    hasParameter = true;
                }

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            EntityData enData = new EntityData();
                            string[] Values = data.Split('^');
                            enData.Event_Id = Convert.ToInt32(Values[0]);
                            entityData.Add(enData);
                        }
                    }
                    else
                    {
                        appLogger.Info("No Event Linked with Entity : " + SimpleJson.SerializeObject(entityObj));
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetAllEventLinkedWithMenuItemID: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Get All Event Linked With Parameter " + SimpleJson.SerializeObject(entityObj) + " ended...");
            return entityData;

        }

        public void AddingEventIdIntoEntityMapper(EntityData entityObj, List<EntityData> Event_Ids)
        {
            var count = Event_Ids.Count;
            try
            {
                if (count > 0)
                {
                    appLogger.Info("Inserting " + count + " Event Record in ENTITY_MAPPER table for " + entityObj.Entity_Id);
                    StringBuilder sCommand = new StringBuilder("DELETE FROM `ENTITY_MAPPER` WHERE `ENTITY_ID` = " + entityObj.Entity_Id + ";INSERT INTO `ENTITY_MAPPER` (`ENTITY_ID`, `EVENT_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (EntityData row in Event_Ids)
                        {
                            //string[] values = row.Replace("'", "").Split('^');
                            long Event_Id = row.Event_Id;
                            string singleRow = "'" + entityObj.Entity_Id + "', " + Event_Id + "";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ENTITY_ID = values(ENTITY_ID), EVENT_ID = Values(EVENT_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started for table ENTITY_MAPPER. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Successfully Inserted query for table ENTITY_MAPPER. ");
                        }
                        appLogger.Info(count + "Record in ENTITY_MAPPER table Inserted successfully");
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in AddingEventIdIntoEntityMapper: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public void UpdateEventOperationStatusInEnityTable(EntityData entityObj, List<EntityData> Event_Ids)
        {
            appLogger.Info("Updating Enity table with data for Entity Id : " + entityObj.Entity_Id);
            try
            {
                long Count_Org_Linked_With_Denomination = GetNoOfOrgWithActiveChildLinkedWithMenuItemId(entityObj.Entity_Id);
                OrgData OrgObj = new OrgData();
                OrgObj = GetSumOfEventBasedOnMenuItemId(Event_Ids);
                
                String timeStamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string Update_Query = "UPDATE ENTITY SET SYNC_STATUS = 'Success'";

                Update_Query += ", NUMBER_OF_CHILD = " + OrgObj.NumberOfChild;
                Update_Query += ", B2S_LETTERS_SENT_LAST_YEAR = " + OrgObj.B2S_Letters_Sent_Last_Year;
                Update_Query += ", S2B_LETTERS_SENT_LAST_YEAR = " + OrgObj.S2B_Letters_Sent_Last_Year;
                Update_Query += ", B2S_LETTERS_SENT_PREVIOUS_YEAR = " + OrgObj.B2S_Letters_Sent_Previous_Year;
                Update_Query += ", S2B_LETTERS_SENT_PREVIOUS_YEAR = " + OrgObj.S2B_Letters_Sent_Previous_Year;
                if (Count_Org_Linked_With_Denomination != 0)
                {
                    Update_Query += ", CHANGED_IN_B2S_LETTERS = " + (OrgObj.Changed_In_B2S_Letters) / Count_Org_Linked_With_Denomination;
                    Update_Query += ", CHANGED_IN_S2B_LETTERS = " + (OrgObj.Changed_In_S2B_Letters) / Count_Org_Linked_With_Denomination;
                }
                else
                {
                    Update_Query += ", CHANGED_IN_B2S_LETTERS = 0";
                    Update_Query += ", CHANGED_IN_S2B_LETTERS = 0";
                }

                string B2S_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";
                string S2B_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";

                if (OrgObj.B2S_Letters_Sent_Last_Year != 0 && OrgObj.B2S_Letters_Sent_Previous_Year != 0)
                {
                    if (OrgObj.B2S_Letters_Sent_Last_Year == OrgObj.B2S_Letters_Sent_Previous_Year)
                    {
                        // Do nothing
                    }
                    else if (OrgObj.B2S_Letters_Sent_Last_Year > OrgObj.B2S_Letters_Sent_Previous_Year) // Greater than
                    {
                        B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow
                    }
                    else
                    {
                        B2S_Arrow_URL = Host_Website_Url + "celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                    }
                }

                if (OrgObj.S2B_Letters_Sent_Last_Year != 0 && OrgObj.S2B_Letters_Sent_Previous_Year != 0)
                {
                    if (OrgObj.S2B_Letters_Sent_Last_Year == OrgObj.S2B_Letters_Sent_Previous_Year)
                    {
                        // Do nothing
                    }
                    else if (OrgObj.S2B_Letters_Sent_Last_Year > OrgObj.S2B_Letters_Sent_Previous_Year) // Greater than
                    {
                        S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow
                    }
                    else
                    {
                        S2B_Arrow_URL = Host_Website_Url + "celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                    }
                }

                Update_Query += ", B2S_UP_DOWN_IMAGE = '" + B2S_Arrow_URL + "'";
                Update_Query += ", S2B_UP_DOWN_IMAGE = '" + S2B_Arrow_URL + "'";

                Update_Query += ", TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = " + OrgObj.Total_Of_Financial_Supp_In_Last_Year;
                Update_Query += ", NO_OF_GIFTS_IN_LAST_YEAR = " + OrgObj.No_Of_Gifts_In_Last_Year;
                Update_Query += ", TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = " + OrgObj.Total_Of_Financial_Supp_In_Previous_Year;
                Update_Query += ", NO_OF_GIFTS_IN_PREVIOUS_YEAR = " + OrgObj.No_Of_Gifts_In_Previous_Year;

                string Financial_Support_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";
                string No_Of_Gift_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";

                if (OrgObj.Total_Of_Financial_Supp_In_Last_Year != 0 && OrgObj.Total_Of_Financial_Supp_In_Previous_Year != 0)
                {
                    if (OrgObj.Total_Of_Financial_Supp_In_Last_Year >= OrgObj.Total_Of_Financial_Supp_In_Previous_Year)
                    {
                        if (OrgObj.Changed_In_Financial_Support != 0)
                        {
                            Financial_Support_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                        }
                        if (Count_Org_Linked_With_Denomination != 0)
                        {
                            Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = " + (OrgObj.Changed_In_Financial_Support) / Count_Org_Linked_With_Denomination;
                        }
                        else
                        {
                            Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                        }
                    }
                    else
                    {
                        Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                    }
                }
                else
                {
                    Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                }

                if (OrgObj.No_Of_Gifts_In_Last_Year != 0 && OrgObj.No_Of_Gifts_In_Previous_Year != 0)
                {
                    if (OrgObj.No_Of_Gifts_In_Last_Year >= OrgObj.No_Of_Gifts_In_Previous_Year)
                    {
                        if (OrgObj.Changed_In_No_Of_Gift != 0)
                        {
                            No_Of_Gift_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                        }
                        if (Count_Org_Linked_With_Denomination != 0)
                        {
                            Update_Query += ", CHANGE_IN_NO_OF_GIFT = " + (OrgObj.Changed_In_No_Of_Gift) / Count_Org_Linked_With_Denomination;
                        }
                        else
                        {
                            Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                        }
                    }
                    else
                    {
                        Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                    }
                }
                else
                {
                    Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                }

                Update_Query += ", FINANCIAL_SUPPORT_UP_DOWN_IMAGE = '" + Financial_Support_Arrow_URL + "'";
                Update_Query += ", NO_OF_GIFT_UP_DOWN_IMAGE = '" + No_Of_Gift_Arrow_URL + "'";

                string multiple_EventIds = "";
                int event_count = 0;
                foreach (EntityData eventdata in Event_Ids)
                {
                    if (event_count > 0)
                    {
                        multiple_EventIds += ", " + eventdata.Event_Id + "";
                    }
                    else
                    {
                        multiple_EventIds += eventdata.Event_Id + "";
                    }
                    event_count++;
                }

                try
                {
                    //string create_image_url = Host_Website_Url + "oneview/Create_ppt_images_for_denomination.php?OrgID=" + multiple_OrgIds + "&MENU_ITEM_ID=" + MenuItemId;
                    string create_image_url = Host_Website_Url + "oneview/Create_ppt_images_for_denomination.php?ENTITY_ID=" + entityObj.Entity_Id + "&IS_EVENT=" + entityObj.Event_flag;
                    //string create_image_url = "";

                    appLogger.Info("API Url for Creating Image Slider is " + create_image_url + " ");
                    if (!string.IsNullOrEmpty(create_image_url))
                    {
                        WebRequest request = HttpWebRequest.Create(create_image_url);
                        WebResponse response = request.GetResponse();
                        StreamReader streamreader = new StreamReader(response.GetResponseStream());
                        string urlText = streamreader.ReadToEnd();
                    }
                    else
                    {
                        appLogger.Info("Create Image URL is empty in CreateSponosoredChildImageForSlider for entity");
                    }
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in UpdateEntityOperationStatusInEnityTable for entity : " + e.Message);
                    appLogger.Error(e.StackTrace);
                    appLogger.Error(e.InnerException);
                }



                //Update_Query += ", SPONSORED_CHILD_IMAGE_URL = 'NULL'";
                string ppt_type = GetPPTCountryStatusOfEntity("", multiple_EventIds);
                OrgData OrgObj2 = new OrgData();
                OrgObj2 = CreateSlidertextfromTableRecordForEntity("", multiple_EventIds);

                Update_Query += ", PPT_TYPE = '" + ppt_type + "'";
                Update_Query += ", SINGLE_COUNTRY_TEXT_1 = '" + OrgObj2.Slide7A_Text_1 + "'";
                Update_Query += ", SINGLE_COUNTRY_TEXT_2 = '" + OrgObj2.Slide7A_Text_2 + "'";
                Update_Query += ", MULTIPLE_COUNTRY_TEXT_1 = '" + OrgObj2.Slide7B_Text_1 + "'";
                Update_Query += ", MULTIPLE_COUNTRY_TEXT_2 = '" + OrgObj2.Slide7B_Text_2 + "'";

                Update_Query += ", SYNC_COMPLETED_ON = '" + timeStamp + "' WHERE ID = " + entityObj.Entity_Id;

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Update_Query, conn);
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateEventOperationStatusInEnityTable : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Updated Enity table with data for Entity Id : " + entityObj.Entity_Id);
        }

        public List<EntityData> GetAllOrgLinkedWithMenuItemID(EntityData entityObj)
        {
            List<EntityData> entityData = new List<EntityData>();
            appLogger.Info("Get All Org Linked With Parameter " + SimpleJson.SerializeObject(entityObj) + " started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch OrgId";
                bool hasParameter = false;
                string query = "";
                if (entityObj.Event_flag)
                {
                    query = "SELECT OP.organization.id from opportunity as OP WHERE ";
                    if (entityObj.Event_Series_Id != 0)
                    {
                        query += " OP.customFields.Standard.EventSeries.ID = " + entityObj.Event_Series_Id;
                        hasParameter = true;
                    }
                    if (entityObj.Event_Ambassador_Id != 0)
                    {
                        if (hasParameter) { query += " AND"; }
                        query += " OP.customFields.Standard.EventAmbassador.ID = " + entityObj.Event_Ambassador_Id;
                        hasParameter = true;
                    }
                }
                else
                {
                    query = "SELECT OG.id FROM organization OG WHERE OG.customFields.c.status.id = 249 AND ";
                    if (entityObj.Denomination_Id != 0)
                    {
                        query += " OG.customFields.c.denomination.ID = " + entityObj.Denomination_Id;
                        hasParameter = true;
                    }
                    if (entityObj.Network_Id != 0)
                    {
                        if (hasParameter) { query += " AND"; }
                        query += " OG.customFields.c.network.ID = " + entityObj.Network_Id;
                        hasParameter = true;
                    }
                    if (entityObj.Region_Id != 0)
                    {
                        if (hasParameter) { query += " AND"; }
                        query += " OG.customFields.Standard.Region.ID = " + entityObj.Region_Id;
                        hasParameter = true;
                    }
                    if (entityObj.Regional_Manager_Id != 0)
                    {
                        if (hasParameter) { query += " AND"; }
                        query += " OG.customFields.Standard.RegionalManager.ID = " + entityObj.Regional_Manager_Id;
                        hasParameter = true;
                    }
                    if (!string.IsNullOrEmpty(entityObj.Postcode_Area))
                    {
                        if (hasParameter) { query += " AND"; }
                        query += " OG.customFields.c.postcodearea = '" + entityObj.Postcode_Area + "'";
                    }
                }
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            EntityData enData = new EntityData();
                            string[] Values = data.Split('^');
                            enData.Org_Id = Convert.ToInt32(Values[0]);
                            entityData.Add(enData);
                        }
                    }
                    else
                    {
                        appLogger.Info("No OrgId Linked with Entity : " + SimpleJson.SerializeObject(entityObj));
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetAllOrgLinkedWithMenuItemID: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Get All Org Linked With Parameter " + SimpleJson.SerializeObject(entityObj) + " ended...");
            return entityData;

        }

        public void AddingOrgIIntoEntityMapper(EntityData entityObj, List<EntityData> Org_Ids)
        {
            var count = Org_Ids.Count;
            try
            {
                if (count > 0)
                {
                    appLogger.Info("Inserting " + count + " Record in ENTITY_MAPPER table");
                    // INSERT INTO `ENTITY_MAPPER` (`ENITITY_MAPPER_ID`, `ENTITY_ID`, `ORG_ID`, `CREATED_AT`) VALUES ('', '1', '5123', NULL);
                    StringBuilder sCommand = new StringBuilder("DELETE FROM `ENTITY_MAPPER` WHERE `ENTITY_ID` = " + entityObj.Entity_Id + ";INSERT INTO `ENTITY_MAPPER` (`ENTITY_ID`, `ORG_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (EntityData row in Org_Ids)
                        {
                            //string[] values = row.Replace("'", "").Split('^');
                            long Org_ID = row.Org_Id;

                            string singleRow = "'" + entityObj.Entity_Id + "', " + Org_ID + "";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ENTITY_ID = values(ENTITY_ID), ORG_ID = Values(ORG_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started for table ENTITY_MAPPER. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Successfully Inserted query for table ENTITY_MAPPER. ");
                        }
                        appLogger.Info(count + "Record in ENTITY_MAPPER table Inserted successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in AddingOrgIIntoEntityMapper: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public OrgData GetSumOfOrgBasedOnMenuItemId(List<EntityData> Org_Ids)
        {
            appLogger.Info("Get SUM Of Org Data Based On Menu Item ID Started.");
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string multiple_OrgIds = "";
                int org_count = 0;
                foreach (EntityData orgdata in Org_Ids)
                {
                    if (org_count > 0)
                    {
                        multiple_OrgIds += ", " + orgdata.Org_Id + "";
                    }
                    else
                    {
                        multiple_OrgIds += orgdata.Org_Id + "";
                    }
                    org_count++;
                }

                if (org_count > 0)
                {
                    string query = "SELECT SUM(NUMBER_OF_CHILD) AS NUMBER_OF_CHILD, SUM(B2S_LETTERS_SENT_LAST_YEAR) AS B2S_LETTERS_SENT_LAST_YEAR, SUM(S2B_LETTERS_SENT_LAST_YEAR) AS S2B_LETTERS_SENT_LAST_YEAR, SUM(B2S_LETTERS_SENT_PREVIOUS_YEAR) AS B2S_LETTERS_SENT_PREVIOUS_YEAR, SUM(S2B_LETTERS_SENT_PREVIOUS_YEAR) AS S2B_LETTERS_SENT_PREVIOUS_YEAR, SUM(CHANGED_IN_B2S_LETTERS) AS CHANGED_IN_B2S_LETTERS, SUM(CHANGED_IN_S2B_LETTERS) AS CHANGED_IN_S2B_LETTERS, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR, SUM(CHANGED_IN_FINANCIAL_SUPPORT) AS CHANGED_IN_FINANCIAL_SUPPORT, SUM(CHANGE_IN_NO_OF_GIFT) AS CHANGE_IN_NO_OF_GIFT FROM `ORGANISATION` WHERE ORGANISATION_ID IN (" + multiple_OrgIds + ")";

                    appLogger.Info("GetSumOfOrgBasedOnDenominationId Query : " + query);

                    conn.Open();
                    MySqlCommand command = new MySqlCommand(query, conn);
                    MySqlDataReader reader = command.ExecuteReader();
                    if (reader.Read())
                    {
                        orgData.NumberOfChild = reader["NUMBER_OF_CHILD"] != null ? Convert.ToInt32(reader["NUMBER_OF_CHILD"]) : 0;
                        orgData.B2S_Letters_Sent_Last_Year = reader["B2S_LETTERS_SENT_LAST_YEAR"] != null ? Convert.ToInt32(reader["B2S_LETTERS_SENT_LAST_YEAR"]) : 0;
                        orgData.S2B_Letters_Sent_Last_Year = reader["S2B_LETTERS_SENT_LAST_YEAR"] != null ? Convert.ToInt32(reader["S2B_LETTERS_SENT_LAST_YEAR"]) : 0;
                        orgData.B2S_Letters_Sent_Previous_Year = reader["B2S_LETTERS_SENT_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["B2S_LETTERS_SENT_PREVIOUS_YEAR"]) : 0;
                        orgData.S2B_Letters_Sent_Previous_Year = reader["S2B_LETTERS_SENT_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["S2B_LETTERS_SENT_PREVIOUS_YEAR"]) : 0;
                        orgData.Changed_In_B2S_Letters = reader["CHANGED_IN_B2S_LETTERS"] != null ? Convert.ToInt64(reader["CHANGED_IN_B2S_LETTERS"]) : 0;
                        orgData.Changed_In_S2B_Letters = reader["CHANGED_IN_S2B_LETTERS"] != null ? Convert.ToInt64(reader["CHANGED_IN_S2B_LETTERS"]) : 0;

                        orgData.Total_Of_Financial_Supp_In_Last_Year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"] != null ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"]) : 0;
                        orgData.No_Of_Gifts_In_Last_Year = reader["NO_OF_GIFTS_IN_LAST_YEAR"] != null ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_LAST_YEAR"]) : 0;
                        orgData.Total_Of_Financial_Supp_In_Previous_Year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"]) : 0;
                        orgData.No_Of_Gifts_In_Previous_Year = reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"]) : 0;

                        orgData.Changed_In_Financial_Support = reader["CHANGED_IN_FINANCIAL_SUPPORT"] != null ? Convert.ToInt64(reader["CHANGED_IN_FINANCIAL_SUPPORT"]) : 0;
                        orgData.Changed_In_No_Of_Gift = reader["CHANGE_IN_NO_OF_GIFT"] != null ? Convert.ToInt64(reader["CHANGE_IN_NO_OF_GIFT"]) : 0;


                    }
                    conn.Close();
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSumOfOrgBasedOnMenuItemId : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Get Sum Of Org Data Based On Menu Item Id Ended.");
            return orgData;
        }

        public OrgData GetSumOfEventBasedOnMenuItemId(List<EntityData> Event_Ids)
        {
            appLogger.Info("Get SUM Of Event Data Based On Menu Item ID Started.");
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string multiple_EventIds = "";
                int event_count = 0;
                foreach (EntityData eventdata in Event_Ids)
                {
                    if (event_count > 0)
                    {
                        multiple_EventIds += ", " + eventdata.Event_Id + "";
                    }
                    else
                    {
                        multiple_EventIds += eventdata.Event_Id + "";
                    }
                    event_count++;
                }

                if (event_count > 0)
                {
                    string query = "SELECT SUM(NUMBER_OF_CHILD) AS NUMBER_OF_CHILD, SUM(B2S_LETTERS_SENT_LAST_YEAR) AS B2S_LETTERS_SENT_LAST_YEAR, SUM(S2B_LETTERS_SENT_LAST_YEAR) AS S2B_LETTERS_SENT_LAST_YEAR, SUM(B2S_LETTERS_SENT_PREVIOUS_YEAR) AS B2S_LETTERS_SENT_PREVIOUS_YEAR, SUM(S2B_LETTERS_SENT_PREVIOUS_YEAR) AS S2B_LETTERS_SENT_PREVIOUS_YEAR, SUM(CHANGED_IN_B2S_LETTERS) AS CHANGED_IN_B2S_LETTERS, SUM(CHANGED_IN_S2B_LETTERS) AS CHANGED_IN_S2B_LETTERS, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR, SUM(CHANGED_IN_FINANCIAL_SUPPORT) AS CHANGED_IN_FINANCIAL_SUPPORT, SUM(CHANGE_IN_NO_OF_GIFT) AS CHANGE_IN_NO_OF_GIFT FROM `EVENT` WHERE EVENT_ID IN (" + multiple_EventIds + ")";

                    appLogger.Info("GetSumOfEventBasedOnMenuItemId Query : " + query);

                    conn.Open();
                    MySqlCommand command = new MySqlCommand(query, conn);
                    MySqlDataReader reader = command.ExecuteReader();
                    if (reader.Read())
                    {
                        orgData.NumberOfChild = reader["NUMBER_OF_CHILD"] != null ? Convert.ToInt32(reader["NUMBER_OF_CHILD"]) : 0;
                        orgData.B2S_Letters_Sent_Last_Year = reader["B2S_LETTERS_SENT_LAST_YEAR"] != null ? Convert.ToInt32(reader["B2S_LETTERS_SENT_LAST_YEAR"]) : 0;
                        orgData.S2B_Letters_Sent_Last_Year = reader["S2B_LETTERS_SENT_LAST_YEAR"] != null ? Convert.ToInt32(reader["S2B_LETTERS_SENT_LAST_YEAR"]) : 0;
                        orgData.B2S_Letters_Sent_Previous_Year = reader["B2S_LETTERS_SENT_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["B2S_LETTERS_SENT_PREVIOUS_YEAR"]) : 0;
                        orgData.S2B_Letters_Sent_Previous_Year = reader["S2B_LETTERS_SENT_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["S2B_LETTERS_SENT_PREVIOUS_YEAR"]) : 0;
                        orgData.Changed_In_B2S_Letters = reader["CHANGED_IN_B2S_LETTERS"] != null ? Convert.ToInt64(reader["CHANGED_IN_B2S_LETTERS"]) : 0;
                        orgData.Changed_In_S2B_Letters = reader["CHANGED_IN_S2B_LETTERS"] != null ? Convert.ToInt64(reader["CHANGED_IN_S2B_LETTERS"]) : 0;

                        orgData.Total_Of_Financial_Supp_In_Last_Year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"] != null ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"]) : 0;
                        orgData.No_Of_Gifts_In_Last_Year = reader["NO_OF_GIFTS_IN_LAST_YEAR"] != null ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_LAST_YEAR"]) : 0;
                        orgData.Total_Of_Financial_Supp_In_Previous_Year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"]) : 0;
                        orgData.No_Of_Gifts_In_Previous_Year = reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"]) : 0;

                        orgData.Changed_In_Financial_Support = reader["CHANGED_IN_FINANCIAL_SUPPORT"] != null ? Convert.ToInt64(reader["CHANGED_IN_FINANCIAL_SUPPORT"]) : 0;
                        orgData.Changed_In_No_Of_Gift = reader["CHANGE_IN_NO_OF_GIFT"] != null ? Convert.ToInt64(reader["CHANGE_IN_NO_OF_GIFT"]) : 0;


                    }
                    conn.Close();
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSumOfEventBasedOnMenuItemId : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Get Sum Of Event Data Based On Menu Item Id Ended.");
            return orgData;
        }

        public void UpdateEntityOperationStatusInEnityTable(EntityData entityObj, List<EntityData> Org_Ids)
        {
            appLogger.Info("Updating Enity table with data for Entity Id : " + entityObj.Entity_Id);
            try
            {
                long Count_Org_Linked_With_Denomination = GetNoOfOrgWithActiveChildLinkedWithMenuItemId(entityObj.Entity_Id);
                OrgData OrgObj = new OrgData();
                OrgObj = GetSumOfOrgBasedOnMenuItemId(Org_Ids);

                String timeStamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string Update_Query = "UPDATE ENTITY SET SYNC_STATUS = 'Success'";

                Update_Query += ", NUMBER_OF_CHILD = " + OrgObj.NumberOfChild;
                Update_Query += ", B2S_LETTERS_SENT_LAST_YEAR = " + OrgObj.B2S_Letters_Sent_Last_Year;
                Update_Query += ", S2B_LETTERS_SENT_LAST_YEAR = " + OrgObj.S2B_Letters_Sent_Last_Year;
                Update_Query += ", B2S_LETTERS_SENT_PREVIOUS_YEAR = " + OrgObj.B2S_Letters_Sent_Previous_Year;
                Update_Query += ", S2B_LETTERS_SENT_PREVIOUS_YEAR = " + OrgObj.S2B_Letters_Sent_Previous_Year;
                if (Count_Org_Linked_With_Denomination != 0)
                {
                    Update_Query += ", CHANGED_IN_B2S_LETTERS = " + (OrgObj.Changed_In_B2S_Letters) / Count_Org_Linked_With_Denomination;
                    Update_Query += ", CHANGED_IN_S2B_LETTERS = " + (OrgObj.Changed_In_S2B_Letters) / Count_Org_Linked_With_Denomination;
                }
                else
                {
                    Update_Query += ", CHANGED_IN_B2S_LETTERS = 0";
                    Update_Query += ", CHANGED_IN_S2B_LETTERS = 0";
                }

                string B2S_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";
                string S2B_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";

                if (OrgObj.B2S_Letters_Sent_Last_Year != 0 && OrgObj.B2S_Letters_Sent_Previous_Year != 0)
                {
                    if (OrgObj.B2S_Letters_Sent_Last_Year == OrgObj.B2S_Letters_Sent_Previous_Year)
                    {
                        // Do nothing
                    }
                    else if (OrgObj.B2S_Letters_Sent_Last_Year > OrgObj.B2S_Letters_Sent_Previous_Year)
                    {
                        B2S_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow
                    }
                    else
                    {
                        B2S_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                    }
                }

                if (OrgObj.S2B_Letters_Sent_Last_Year != 0 && OrgObj.S2B_Letters_Sent_Previous_Year != 0)
                {
                    if (OrgObj.S2B_Letters_Sent_Last_Year == OrgObj.S2B_Letters_Sent_Previous_Year)
                    {
                        // Do nothing
                    }
                    else if (OrgObj.S2B_Letters_Sent_Last_Year > OrgObj.S2B_Letters_Sent_Previous_Year)
                    {
                        S2B_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow
                    }
                    else
                    {
                        S2B_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                    }
                }

                Update_Query += ", B2S_UP_DOWN_IMAGE = '" + B2S_Arrow_URL + "'";
                Update_Query += ", S2B_UP_DOWN_IMAGE = '" + S2B_Arrow_URL + "'";

                Update_Query += ", TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = " + OrgObj.Total_Of_Financial_Supp_In_Last_Year;
                Update_Query += ", NO_OF_GIFTS_IN_LAST_YEAR = " + OrgObj.No_Of_Gifts_In_Last_Year;
                Update_Query += ", TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = " + OrgObj.Total_Of_Financial_Supp_In_Previous_Year;
                Update_Query += ", NO_OF_GIFTS_IN_PREVIOUS_YEAR = " + OrgObj.No_Of_Gifts_In_Previous_Year;
                /*
                if (Count_Org_Linked_With_Denomination != 0)
                {
                    Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = " + (OrgObj.Changed_In_Financial_Support) / Count_Org_Linked_With_Denomination;
                    Update_Query += ", CHANGE_IN_NO_OF_GIFT = " + (OrgObj.Changed_In_No_Of_Gift) / Count_Org_Linked_With_Denomination;
                } else
                {
                    Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                    Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                }
                */

                string Financial_Support_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";
                string No_Of_Gift_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/empty_arrow.JPG";

                if (OrgObj.Total_Of_Financial_Supp_In_Last_Year != 0 && OrgObj.Total_Of_Financial_Supp_In_Previous_Year != 0)
                {
                    if (OrgObj.Total_Of_Financial_Supp_In_Last_Year >= OrgObj.Total_Of_Financial_Supp_In_Previous_Year)
                    {
                        if (OrgObj.Changed_In_Financial_Support != 0)
                        {
                            Financial_Support_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                        }
                        if (Count_Org_Linked_With_Denomination != 0)
                        {
                            long financialCount = (OrgObj.Changed_In_Financial_Support) / Count_Org_Linked_With_Denomination;
                            if (financialCount != 0)
                            {
                                Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = " + financialCount;
                            }
                            else {
                                Financial_Support_Arrow_URL = Host_Website_Url + "celebration_services/assets/empty_arrow.JPG";
                                Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                            }
                        }
                        else
                        {
                            Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                        }
                    }
                    else
                    {
                        Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                    }
                }
                else
                {
                    Update_Query += ", CHANGED_IN_FINANCIAL_SUPPORT = 0";
                }

                if (OrgObj.No_Of_Gifts_In_Last_Year != 0 && OrgObj.No_Of_Gifts_In_Previous_Year != 0)
                {
                    if (OrgObj.No_Of_Gifts_In_Last_Year >= OrgObj.No_Of_Gifts_In_Previous_Year)
                    {
                        if (OrgObj.Changed_In_No_Of_Gift != 0)
                        {
                            No_Of_Gift_Arrow_URL = Host_Website_Url + "oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                        }
                        if (Count_Org_Linked_With_Denomination != 0)
                        {
                            Update_Query += ", CHANGE_IN_NO_OF_GIFT = " + (OrgObj.Changed_In_No_Of_Gift) / Count_Org_Linked_With_Denomination;
                        }
                        else
                        {
                            Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                        }
                    }
                    else
                    {
                        Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                    }
                }
                else
                {
                    Update_Query += ", CHANGE_IN_NO_OF_GIFT = 0";
                }

                Update_Query += ", FINANCIAL_SUPPORT_UP_DOWN_IMAGE = '" + Financial_Support_Arrow_URL + "'";
                Update_Query += ", NO_OF_GIFT_UP_DOWN_IMAGE = '" + No_Of_Gift_Arrow_URL + "'";

                string multiple_OrgIds = "";
                int org_count = 0;
                foreach (EntityData orgdata in Org_Ids)
                {
                    if (org_count > 0)
                    {
                        multiple_OrgIds += ", " + orgdata.Org_Id + "";
                    }
                    else
                    {
                        multiple_OrgIds += orgdata.Org_Id + "";
                    }
                    org_count++;
                }

                try
                {
                    //string create_image_url = Host_Website_Url + "oneview/Create_ppt_images_for_denomination.php?OrgID=" + multiple_OrgIds + "&MENU_ITEM_ID=" + MenuItemId;
                    string create_image_url = Host_Website_Url + "oneview/Create_ppt_images_for_denomination.php?ENTITY_ID=" + entityObj.Entity_Id;
                    //string create_image_url = "";

                    appLogger.Info("API Url for Creating Image Slider is " + create_image_url + " ");
                    if (!string.IsNullOrEmpty(create_image_url))
                    {
                        WebRequest request = HttpWebRequest.Create(create_image_url);
                        WebResponse response = request.GetResponse();
                        StreamReader streamreader = new StreamReader(response.GetResponseStream());
                        string urlText = streamreader.ReadToEnd();
                    }
                    else
                    {
                        appLogger.Info("Create Image URL is empty in CreateSponosoredChildImageForSlider for entity");
                    }
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in UpdateEntityOperationStatusInEnityTable for entity : " + e.Message);
                    appLogger.Error(e.StackTrace);
                    appLogger.Error(e.InnerException);
                }



                //Update_Query += ", SPONSORED_CHILD_IMAGE_URL = 'NULL'";
                string ppt_type = GetPPTCountryStatusOfEntity(multiple_OrgIds, "");
                OrgData OrgObj2 = new OrgData();
                OrgObj2 = CreateSlidertextfromTableRecordForEntity(multiple_OrgIds, "");

                Update_Query += ", PPT_TYPE = '" + ppt_type + "'";
                Update_Query += ", SINGLE_COUNTRY_TEXT_1 = '" + OrgObj2.Slide7A_Text_1 + "'";
                Update_Query += ", SINGLE_COUNTRY_TEXT_2 = '" + OrgObj2.Slide7A_Text_2 + "'";
                Update_Query += ", MULTIPLE_COUNTRY_TEXT_1 = '" + OrgObj2.Slide7B_Text_1 + "'";
                Update_Query += ", MULTIPLE_COUNTRY_TEXT_2 = '" + OrgObj2.Slide7B_Text_2 + "'";

                Update_Query += ", SYNC_COMPLETED_ON = '" + timeStamp + "' WHERE ID = " + entityObj.Entity_Id;

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Update_Query, conn);
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateDenominationOperationStatusInEnityTable : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Updated Enity table with data for Entity Id : " + entityObj.Entity_Id);
        }

        public string GetPPTCountryStatusOfEntity(string OrgID, string EventID)
        {
            appLogger.Info("Get PPT Country Status Of Entity process started...");
            //int count = 0;
            int no_of_active_children;
            int most_children_count;
            int total_value;
            string ppt_country_status = "";
            if (!string.IsNullOrEmpty(OrgID) || !string.IsNullOrEmpty(EventID))
            {
                MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
                try
                {
                    string query = "";
                    if (!string.IsNullOrEmpty(EventID))
                    {
                        query = "SELECT (SELECT count(*) as Sponsorship FROM `SPONSORSHIP_DETAILS` AS Spon WHERE Spon.`EVENT_ID` IN (" + EventID + ") AND Spon.`SPONSORSHIP_END_DATE` IS NULL LIMIT 1) AS NO_OF_ACTIVE_CHILDREN, (SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count FROM `SPONSORSHIP_DETAILS` AS Spon WHERE Spon.`EVENT_ID` IN (" + EventID + ") AND Spon.`SPONSORSHIP_END_DATE` IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1) AS MOST_CHILDREN_COUNT FROM `EVENT` AS ORG WHERE `EVENT_ID` IN (" + EventID + ") LIMIT 1";
                    }
                    else
                    {
                        query = "SELECT (SELECT count(*) as Sponsorship FROM `SPONSORSHIP_DETAILS` AS Spon WHERE (Spon.`ORGANISATION_ID` IN (" + OrgID + ") OR Spon.LINKED_TO_PARTNERSHIP IN (" + OrgID + ")) AND Spon.`SPONSORSHIP_END_DATE` IS NULL LIMIT 1) AS NO_OF_ACTIVE_CHILDREN, (SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count FROM `SPONSORSHIP_DETAILS` AS Spon WHERE (Spon.`ORGANISATION_ID` IN (" + OrgID + ") OR Spon.LINKED_TO_PARTNERSHIP IN (" + OrgID + ")) AND Spon.`SPONSORSHIP_END_DATE` IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1) AS MOST_CHILDREN_COUNT FROM `ORGANISATION` AS ORG WHERE `ORGANISATION_ID` IN (" + OrgID + ") LIMIT 1";
                    }

                    conn.Open();
                    MySqlCommand command = new MySqlCommand(query, conn);
                    MySqlDataReader reader = command.ExecuteReader();
                    if (reader.Read())
                    {
                        no_of_active_children = reader["NO_OF_ACTIVE_CHILDREN"] != null ? Convert.ToInt32(reader["NO_OF_ACTIVE_CHILDREN"]) : 0;
                        most_children_count = reader["MOST_CHILDREN_COUNT"] != null ? Convert.ToInt32(reader["MOST_CHILDREN_COUNT"]) : 0;
                        total_value = (most_children_count * 100 / no_of_active_children);
                        if (total_value >= 80)
                        {
                            ppt_country_status = "SINGLE_COUNTRY";
                        }
                        else
                        {
                            ppt_country_status = "MULTI_COUNTRY";
                        }
                        //count = reader["Children_count"] != null ? Convert.ToInt32(reader["Children_count"]) : 0;
                    }
                    conn.Close();
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in GetPPTCountryStatusOfEntity " + e.Message);
                    appLogger.Error(e.StackTrace);
                    appLogger.Error(e.InnerException);
                }
                finally
                {
                    conn.Close();
                }
            }
            appLogger.Info("Get PPT Country Status Of Entity process ended...");
            return ppt_country_status;
        }

        public OrgData CreateSlidertextfromTableRecordForEntity(string OrgID, string EventID)
        {
            appLogger.Info("CreateSlidertextfromTableRecordForEntity process started...");
            int top_sponsorship_count = 0;
            string top_sponsorship_country = "";
            int total_no_of_country = 0;
            int total_active_children = 0;
            OrgData orgData = new OrgData();
            if (!string.IsNullOrEmpty(OrgID) || !string.IsNullOrEmpty(EventID))
            {
                MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
                try
                {
                    string query = "";
                    if (!string.IsNullOrEmpty(EventID))
                    {
                        query = "SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count, Spon.SPONSORSHIP_COUNTRY AS SPONSORSHIP_COUNTRY, (SELECT COUNT(*) AS TOTAL_COUNT from (SELECT SPONSORSHIP.`SPONSORSHIP_COUNTRY` FROM `SPONSORSHIP_DETAILS` AS SPONSORSHIP WHERE (SPONSORSHIP.`EVENT_ID` IN (" + EventID + ")) AND SPONSORSHIP. SPONSORSHIP_END_DATE IS NULL GROUP BY SPONSORSHIP.`SPONSORSHIP_COUNTRY`) x) AS TOTAL_NO_OF_COUNTRY, (SELECT COUNT(*) FROM `SPONSORSHIP_DETAILS` WHERE (`EVENT_ID` IN (" + EventID + ")) AND SPONSORSHIP_END_DATE IS NULL) AS TOTAL_ACTIVE_CHILDREN  FROM `SPONSORSHIP_DETAILS` AS Spon, `COUNTRY` AS Coun WHERE Spon.`SPONSORSHIP_COUNTRY` = Coun.`COUNTRY_NAME` AND (Spon.`EVENT_ID` IN (" + EventID + ")) AND Spon.SPONSORSHIP_END_DATE IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1";
                    }
                    else
                    {
                        query = "SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count, Spon.SPONSORSHIP_COUNTRY AS SPONSORSHIP_COUNTRY, (SELECT COUNT(*) AS TOTAL_COUNT from (SELECT SPONSORSHIP.`SPONSORSHIP_COUNTRY` FROM `SPONSORSHIP_DETAILS` AS SPONSORSHIP WHERE (SPONSORSHIP.`ORGANISATION_ID` IN (" + OrgID + ") OR SPONSORSHIP.LINKED_TO_PARTNERSHIP IN (" + OrgID + ")) AND SPONSORSHIP. SPONSORSHIP_END_DATE IS NULL GROUP BY SPONSORSHIP.`SPONSORSHIP_COUNTRY`) x) AS TOTAL_NO_OF_COUNTRY, (SELECT COUNT(*) FROM `SPONSORSHIP_DETAILS` WHERE (ORGANISATION_ID IN (" + OrgID + ") OR LINKED_TO_PARTNERSHIP IN (" + OrgID + ")) AND SPONSORSHIP_END_DATE IS NULL) AS TOTAL_ACTIVE_CHILDREN  FROM `SPONSORSHIP_DETAILS` AS Spon, `COUNTRY` AS Coun WHERE Spon.`SPONSORSHIP_COUNTRY` = Coun.`COUNTRY_NAME` AND (Spon.`ORGANISATION_ID` IN (" + OrgID + ") OR Spon.LINKED_TO_PARTNERSHIP IN (" + OrgID + ")) AND Spon.SPONSORSHIP_END_DATE IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1";
                    }


                    conn.Open();
                    MySqlCommand command = new MySqlCommand(query, conn);
                    MySqlDataReader reader = command.ExecuteReader();
                    if (reader.Read())
                    {
                        TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
                        top_sponsorship_count = reader["Sponsorship_Count"] != null ? Convert.ToInt32(reader["Sponsorship_Count"]) : 0;
                        string top_country = reader["SPONSORSHIP_COUNTRY"] != null ? Convert.ToString(reader["SPONSORSHIP_COUNTRY"]) : "";
                        //top_sponsorship_country = top_country.Substring(0, 1).ToUpper() + top_country.Substring(1).ToLower();
                        top_sponsorship_country = textInfo.ToTitleCase(top_country.ToLower());

                        total_no_of_country = reader["TOTAL_NO_OF_COUNTRY"] != null ? Convert.ToInt32(reader["TOTAL_NO_OF_COUNTRY"]) : 0;
                        total_active_children = reader["TOTAL_ACTIVE_CHILDREN"] != null ? Convert.ToInt32(reader["TOTAL_ACTIVE_CHILDREN"]) : 0;
                        if (total_no_of_country == 1)
                        {
                            // 100% Text for Single Country (Your [No of ACTIVE CHILD] sponsored children all live in Rwanda.)
                            // 100% Text for Multiple country (Your [No of ACTIVE CHILD] Sponsored Children live in [No of Country] countries.)
                            orgData.Slide7A_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children all ";
                            orgData.Slide7A_Text_2 = "live in [#FFD100]" + top_sponsorship_country + ".[/#FFD100]";
                            orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                            orgData.Slide7B_Text_2 = "live in [#FFD100]one country[/#FFD100].";
                        }
                        else
                        {
                            //80% to 99.9% text Of the[No of ACTIVE CHILD] children you sponsor, [Top COUNtry no of child] live in [Top Country]
                            orgData.Slide7A_Text_1 = "Of the " + String.Format("{0:n0}", total_active_children) + " children you sponsor, ";
                            orgData.Slide7A_Text_2 = top_sponsorship_count + " live in [#FFD100]" + top_sponsorship_country + ".[/#FFD100]";
                            if (total_no_of_country == 2)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]two countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 3)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]three countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 4)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]four countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 5)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]five countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 6)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]six countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 7)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]seven countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 8)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]eight countries.[/#FFD100]";
                            }
                            else if (total_no_of_country == 9)
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]nine countries.[/#FFD100]";
                            }
                            else
                            {
                                orgData.Slide7B_Text_1 = "Your " + String.Format("{0:n0}", total_active_children) + " sponsored children ";
                                orgData.Slide7B_Text_2 = "live in [#FFD100]" + total_no_of_country + " countries.[/#FFD100]";
                            }

                        }
                    }
                    conn.Close();
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in CreateSlidertextfromTableRecordForEntity " + e.Message);
                    appLogger.Error(e.StackTrace);
                    appLogger.Error(e.InnerException);
                }
                finally
                {
                    conn.Close();
                }
            }
            else
            {
                orgData.Slide7A_Text_1 = "";
                orgData.Slide7A_Text_2 = "";
                orgData.Slide7B_Text_1 = "";
                orgData.Slide7B_Text_2 = "";
            }
            appLogger.Info("CreateSlidertextfromTableRecordForEntity process ended...");
            return orgData;
        }

        public long GetNoOfOrgWithActiveChildLinkedWithMenuItemId(long MenuItemId)
        {
            appLogger.Info("GetNoOfOrgWithActiveChildLinkedWithMenuItemId process started...");
            long count = 0;
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                //string query = "SELECT count(1) AS Org_count FROM `ORGANISATION` WHERE MENU_ITEM_ID = " + MenuItemId + " AND (NUMBER_OF_CHILD != 0 AND NUMBER_OF_CHILD IS NOT NULL)";

                string query = "SELECT count(1) AS Org_count FROM `ENTITY_MAPPER` WHERE ENTITY_ID = '" + MenuItemId + "'";

                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    count = reader["Org_count"] != null ? Convert.ToInt64(reader["Org_count"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetNoOfOrgWithActiveChildLinkedWithMenuItemId " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("GetNoOfOrgWithActiveChildLinkedWithMenuItemId process ended...");
            return count;
        }


        public void UpdateOrgLastSyncTime(long OrgID)
        {
            appLogger.Info("Organisation Details Updated for OrgID: " + OrgID);
            try
            {
                String timeStamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string Query = "UPDATE ORGANISATION SET LAST_SYNC_TIME = '" + timeStamp + "' WHERE ORGANISATION_ID = " + OrgID;

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                    appLogger.Info("LAST_SYNC_TIME Updated in Organisation Details Table for OrgID: " + OrgID);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateOrgPPT_Type: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public void UpdateEventLastSyncTime(long EventID)
        {
            appLogger.Info("Event Details Updated for EventID: " + EventID);
            try
            {
                String timeStamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string Query = "UPDATE EVENT SET LAST_SYNC_TIME = '" + timeStamp + "' WHERE EVENT_ID = " + EventID;

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                    appLogger.Info("LAST_SYNC_TIME Updated in Event Details Table for EventID: " + EventID);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateEventLastSyncTime: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public List<Commitments> GetWorthyCommitmentsOnOrgId(long OrgId, long EventId)
        {
            List<Commitments> commData = new List<Commitments>();
            appLogger.Info((EventId != 0 ? "EventId :" + EventId + " GetWorthyCommitmentsOnOrgId started..." : "OrgLookupID :" + OrgId + " GetWorthyCommitmentsOnOrgId started..."));
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch All Needkey";
                string query = "";
                if (EventId != 0)
                {
                    query = "SELECT CM.ID, CM.Need.NeedKey, CM.EndDate FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND CM.Event = " + EventId;
                }
                else
                {
                    query = "SELECT CM.ID, CM.Need.NeedKey, CM.EndDate FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID = " + OrgId + " OR CM.LinkedToPartnership = " + OrgId + ")";
                }
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            Commitments comData = new Commitments();
                            string[] Values = data.Split('^');
                            comData.CommitmentID = Convert.ToInt64(Values[0]);
                            comData.NeedKey = Values[1];
                            comData.EndDate = !string.IsNullOrEmpty(Values[2]) ? Values[2] : null;
                            commData.Add(comData);
                        }
                    }
                    else
                    {
                        appLogger.Info(EventId != 0 ? "No Need found with given EventId: " + EventId : "No Need found with given OrgID: " + OrgId);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetWorthyCommitmentsOnOrgId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info(EventId != 0 ? "EventId :" + EventId + " GetWorthyCommitmentsOnOrgId ended..." : "OrgLookupID :" + OrgId + " GetWorthyCommitmentsOnOrgId ended...");
            return commData;
        }

        public void WorthyCommitmentOperation(long OrgID, long EventID)
        {
            if (EventID != 0)
            {
                appLogger.Info("EventID: " + EventID + " WorthyCommitmentOperation started...");
            }
            else
            {
                appLogger.Info("Org: " + OrgID + " WorthyCommitmentOperation started...");
            }
            List<string> WorthyCommitments = new List<string>();
            // Get All Commitment Data From RN
            List<Commitments> AllComData = GetWorthyCommitmentsOnOrgId(OrgID, EventID);
            if (AllComData.Count() > 0)
            {
                // Get Commitment Data Order by NeedKey 
                List<Commitments> OrderByNeedkeyCommitments = AllComData.GroupBy(i => i.NeedKey).Select(s => s.FirstOrDefault()).ToList();
                //Check each Needkey commitments
                foreach (Commitments data in OrderByNeedkeyCommitments)
                {
                    List<Commitments> NeedCommList = AllComData.FindAll(i => i.NeedKey == data.NeedKey).OrderByDescending(j => j.CommitmentID).ToList();
                    bool IsEndDateNull = false;
                    foreach (Commitments row in NeedCommList)
                    {
                        if (string.IsNullOrEmpty(row.EndDate))
                        {
                            IsEndDateNull = true;
                            WorthyCommitments.Add(row.CommitmentID.ToString());
                            break;
                        }
                    }
                    if (!IsEndDateNull)
                    {
                        WorthyCommitments.Add(NeedCommList[0].CommitmentID.ToString());
                    }
                }

                appLogger.Info("Total Commitment found to insert into DB :" + WorthyCommitments.Count);
                SyncOrganisationActiveSponsorshipData_New(WorthyCommitments, OrgID, EventID);
            }
            else
            {
                if (EventID != 0)
                {
                    appLogger.Info("No commitment records found with given EventID: " + EventID);
                }
                else
                {
                    appLogger.Info("No commitment records found with given OrgID: " + OrgID);
                }
            }
            if (EventID != 0)
            {
                appLogger.Info("EventID: " + EventID + " WorthyCommitmentOperation ended...");
            }
            else
            {
                appLogger.Info("Org: " + OrgID + " WorthyCommitmentOperation ended...");
            }
        }
        


        public List<string> GetNeedkeysBasedonOrgId(long OrgId)
        {
            List<string> NeedKeys = new List<string>();
            appLogger.Info("OrgLookupID :" + OrgId + " GetNeedkeyBasedonOrgId started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch All Needkey";
                string query = "SELECT CM.Need.NeedKey FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID = " + OrgId + " OR CM.LinkedToPartnership = " + OrgId + ") GROUP BY CM.Need.NeedKey";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            NeedKeys.Add(data);
                        }
                    }
                    else
                    {
                        appLogger.Info("No Need found with given OrgID: " + OrgId);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetNeedkeyBasedonOrgId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("OrgLookupID :" + OrgId + " GetNeedkeyBasedonOrgId ended...");
            return NeedKeys;
        }
        public string GetCorrectCommitmentIdsBasedOnNeedKey(string Needkey)
        {
            string CommitmentID = "";
            appLogger.Info("Needkey : " + Needkey + " GetCorrectCommitmentIdBasedOnNeedKey started...");
            try
            {
                bool IsEndDateNull = false;
                string commitmentid = "";
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch commitmentId data";
                string query = "SELECT CM.ID, CM.StartDate, CM.EndDate FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND CM.Need.NeedKey = '" + Needkey + "'  ORDER BY CM.ID DESC";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            string[] values = data.Replace("'", "").Split('^');
                            string CommitmentId = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";
                            string StartDate = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            string EndDate = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            if (EndDate == "null")
                            {
                                IsEndDateNull = true;
                                CommitmentID = CommitmentId;
                                break;
                            }
                            else
                            {
                                commitmentid = values[0];
                                IsEndDateNull = false;
                            }
                        }
                        if (!IsEndDateNull) { CommitmentID = commitmentid; }
                    }
                    else
                    {
                        appLogger.Info("No active commitment found with given NeedKey : " + Needkey);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Needkey :" + Needkey + " Error in GetCorrectCommitmentIdBasedOnNeedKey : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("Needkey :" + Needkey + " GetCorrectCommitmentIdBasedOnNeedKey ended...");
            return CommitmentID;
        }

        /*public void SyncWorthyCommitmentInOrg(long OrgID)
        {
            appLogger.Info("SyncWorthyCommitmentInOrg for OrgID: "+ OrgID + " started...");
            List<string> CommitmentIds = new List<string>();
            List<string> NeedList = GetNeedkeysBasedonOrgId(OrgID);
            if (NeedList.Count > 0)
            {
                appLogger.Info("Total Need found to sync in DB: "+NeedList.Count);
                foreach (string Needkey in NeedList)
                {
                    string CommitmentId = GetCorrectCommitmentIdBasedOnNeedKey(Needkey);
                    if (!string.IsNullOrEmpty(CommitmentId))
                    {
                        CommitmentIds.Add(CommitmentId);
                    }
                }
            }
            if (CommitmentIds.Count > 0)
            {
                appLogger.Info("Total Commitment Ids found from needkeys : " + CommitmentIds.Count);
                //SyncOrganisationActiveSponsorshipData_New(CommitmentIds, OrgID);
                SyncOrganisationActiveSponsorshipData_TEST(CommitmentIds, OrgID);
            }
            appLogger.Info("SyncWorthyCommitmentInOrg for OrgID: " + OrgID + " ended...");
        }*/

        public List<string> GetOrgOnlyLatestCommitmentsIds(long OrgId)
        {
            List<string> CommitmentIds = new List<string>();
            appLogger.Info("OrgLookupID :" + OrgId + " GetOrgAllCommitmentsIds started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch commitments data";
                string query = "SELECT MAX(CM.ID) FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID = " + OrgId + " OR CM.LinkedToPartnership = " + OrgId + ")  GROUP BY CM.Need.NeedKey";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            CommitmentIds.Add(data);
                        }
                    }
                    else
                    {
                        appLogger.Info("No active commitment found with given OrgID: " + OrgId);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetOrgAllCommitmentsIds: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetOrgAllCommitmentsIds ended...");
            return CommitmentIds;
        }
        public void SyncLatestCommitmentsInOrg(long OrgId)
        {
            List<string> commitmentIds = new List<string>();
            commitmentIds = GetOrgOnlyLatestCommitmentsIds(OrgId);
            if (commitmentIds != null && commitmentIds.Count > 0)
            {
                SyncOrganisationActiveSponsorshipData_New(commitmentIds, OrgId, 0);
                // SyncOrganisationActiveSponsorshipData_TEST(commitmentIds, OrgId);
            }
            else
            {
                appLogger.Info("No commitment records found from OrgId: " + OrgId);
            }
        }
        public void SyncOrganisationActiveSponsorshipData_TEST(List<string> commitmentIds, long OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Sponsorship Data",
            };
            try
            {
                string Query = "SELECT CM.ID, CM.Organisation.ID, CM.Need.NeedKey, CM.Need.FullBodyImageURL, CM.Need.ProgramDeliveryType, CM.StartDate, CM.EndDate, CM.Need.Gender.lookupname, CM.Need.BirthDate, CM.Need.CountryName, CM.Need.HouseHold.MaleGuardianOccupation, CM.Need.HouseHold.FemaleGuardianOccupation, CM.Need.Orphan, CM.Need.HouseHold, CM.Need.GradeLevelUS_Name, CM.Need.Project.Community, CM.SupporterGroup.PrioritySupporterId, CM.SupporterGroup.BlackBaudConstituentId, CM.SupporterGroup,CM.FirstFundedDate,CM.LinkedToPartnership FROM SCBS_CM.Commitment CM where CM.ID IN (" + string.Join(",", commitmentIds) + ")";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Inserting " + count + " Record in Sponsorship Details table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `SPONSORSHIP_DETAILS_TEST` (`COMMITMENT_ID`, `ORGANISATION_ID`, `NEED_KEY`, `FULLBODY_IMAGE_URL`, `PROGRAM_DELIVERY_TYPE`, `SPONSORSHIP_START_DATE`, `SPONSORSHIP_END_DATE`, `HOURS_SPENT`, `NUTRITIONS_MEALS`, `MEDICAL_CHECKUPS`, `BIBLES_GIVEN`, `B2S_LETTERS_SENT_LAST_YEAR`, `S2B_LETTERS_SENT_LAST_YEAR`, `B2S_LETTERS_SENT_PREVIOUS_YEAR`, `S2B_LETTERS_SENT_PREVIOUS_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`, `GENDER`, `SPONSORSHIP_AGE`, `SPONSORSHIP_COUNTRY`, `MALE_GUARDIAN_OCCUPATION`, `FEMALE_GUARDIAN_OCCUPATION`, `IS_ORPHANED`, `HOBBIES`, `UNIVERSITY`, `PERCENTAGE_AT_SCHOOL`, `COMMUNITY_ID`, `PRIORITY_SUPPORTER_ID`, `BLACKBAUD_CONSTITUENT_ID`, `SUPPORTER_GROUP_ID`,`LINKED_TO_PARTNERSHIP`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Commitment_Id = values[0];  //COMMITMENT_ID
                            string Org_ID = !string.IsNullOrEmpty(values[1]) ? values[1] : OrgID.ToString(); //ORGANISATION_ID
                            string NeedKey = !string.IsNullOrEmpty(values[2]) ? values[2] : "null"; //NEED_KEY
                            string FullBodyImageURL = !string.IsNullOrEmpty(values[3]) ? values[3] : "null"; //FULLBODY_IMAGE_URL
                            string Program_Delivery_type = !string.IsNullOrEmpty(values[4]) ? values[4] : "null"; //PROGRAM_DELIVERY_TYPE
                            string StartDate = ""; //SPONSORSHIP_START_DATE ("2014-11-06T08:00:00.000Z")
                            string EndDate = ""; //SPONSORSHIP_END_DATE ("2014-11-20T08:00:00.000Z")

                            string LinkedToPartnership = !string.IsNullOrEmpty(values[20]) ? values[20] : "null";
                            DateTime start_Date = new DateTime();
                            DateTime end_Date = new DateTime();
                            DateTime todays_dateTime = DateTime.UtcNow.Date;
                            DateTime Meal_end_Date = new DateTime();
                            DateTime CovidStartDate = new DateTime(2020, 4, 1);
                            DateTime CheckBeforeDate = new DateTime(2016, 7, 1); //01-07-2016
                            bool IsCalculationNull = false;
                            int Hours_spent_at_project = 0;
                            int NutritionalMeal = 0;
                            int medicalCheckups = 0;
                            int projectAttendance = 0;
                            if (!string.IsNullOrEmpty(values[5]))
                            {
                                start_Date = DateTime.ParseExact(values[5], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                StartDate = start_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                if (start_Date > CovidStartDate)
                                {
                                    IsCalculationNull = true;
                                    //All Calculation is null
                                }
                            }
                            else
                            {
                                StartDate = "null";
                                IsCalculationNull = true;
                                //All Calculation is null
                            }

                            if (!string.IsNullOrEmpty(values[19]))
                            {
                                DateTime FirstFundedDate = DateTime.ParseExact(values[19], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                if (CheckBeforeDate < start_Date) //If start date is not before 01-07-2016
                                {
                                    start_Date = FirstFundedDate;
                                }

                            }

                            if (!string.IsNullOrEmpty(values[6]))
                            {
                                end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                EndDate = end_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                if (end_Date > CovidStartDate)
                                {
                                    end_Date = new DateTime(2020, 4, 1);
                                }
                                Meal_end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                EndDate = "null";
                                end_Date = new DateTime(2020, 4, 1);
                                Meal_end_Date = todays_dateTime;
                            }
                            if (!IsCalculationNull)
                            {
                                int length_of_sponsorship = (int)Math.Floor((end_Date - start_Date).TotalDays / 30.4375); //length_of_sponsorship
                                int Meal_length_of_sponsorship = (int)Math.Floor((Meal_end_Date - start_Date).TotalDays / 30.4375);
                                if (Program_Delivery_type == "Home Based Sponsorship" || Program_Delivery_type == "Home Based")  // Home based
                                {
                                    Hours_spent_at_project = (10 * length_of_sponsorship) / 12; //HOURS_SPENT 
                                    NutritionalMeal = Convert.ToInt32(((decimal) Meal_length_of_sponsorship / 12) * 10); //NUTRITIONS_MEALS
                                    medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12)); //MEDICAL_CHECKUPS
                                }
                                else // Project or Center based
                                {
                                    Hours_spent_at_project = (44 * 4 * length_of_sponsorship) / 12; //HOURS_SPENT 
                                    NutritionalMeal = Convert.ToInt32(((decimal) Meal_length_of_sponsorship / 12) * 44); //NUTRITIONS_MEALS
                                    medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12)); //MEDICAL_CHECKUPS
                                }
                                projectAttendance = (int)Math.Floor(14 * ((end_Date - start_Date).TotalDays / 30.4375));
                            }

                            string Bible_Given = "1"; //BIBLES_GIVEN
                            string PrioritySupporterId = !string.IsNullOrEmpty(values[16]) ? values[16] : "null";
                            string BlackBaudConstituentId = !string.IsNullOrEmpty(values[17]) ? values[17] : "null";
                            string SupporterGroupId = !string.IsNullOrEmpty(values[18]) ? values[18] : "null";

                            /*
                            string Last_year_GetB2SCount = !string.IsNullOrEmpty(GetB2SCountLastYear(NeedKey, SupporterGroupId)) ? GetB2SCountLastYear(NeedKey, SupporterGroupId) : "0";
                            string Last_year_GetS2BCount = !string.IsNullOrEmpty(GetS2BCountLastYear(NeedKey, SupporterGroupId)) ? GetS2BCountLastYear(NeedKey, SupporterGroupId) : "0";
                            int total_last_year_B2S_S2B_Count = Convert.ToInt32(Last_year_GetB2SCount) + Convert.ToInt32(Last_year_GetS2BCount);
                            string Letters_sent_last_year = Convert.ToString(total_last_year_B2S_S2B_Count); //LETTERS_SENT_LAST_YEAR
                            */

                            string B2S_Letters_Sent_Last_Year = "";// !string.IsNullOrEmpty(GetB2SCountLastYear(NeedKey, SupporterGroupId)) ? GetB2SCountLastYear(NeedKey, SupporterGroupId) : "null"; //LETTERS_SENT_BY_CHILD 
                            string S2B_Letters_Sent_Last_Year = "";//!string.IsNullOrEmpty(GetS2BCountLastYear(NeedKey, SupporterGroupId)) ? GetS2BCountLastYear(NeedKey, SupporterGroupId) : "null"; //LETTERS_SENT_BY_SPONSORS
                            string B2S_Letters_Sent_Previous_Year = "";//!string.IsNullOrEmpty(GetB2SCountPreviousYear(NeedKey, SupporterGroupId)) ? GetB2SCountPreviousYear(NeedKey, SupporterGroupId) : "null"; ; //LETTERS_SENT_BY_CHILD_IN_PY 
                            string S2B_Letters_Sent_Previous_Year = "";//!string.IsNullOrEmpty(GetS2BCountPreviousYear(NeedKey, SupporterGroupId)) ? GetS2BCountPreviousYear(NeedKey, SupporterGroupId) : "null"; ; //LETTERS_SENT_BY_SPONSORS_IN_PY 

                            /*! Fetch Data from BB Start */

                            // DateTime.Now.ToString("yyyy-MM-dd")
                            string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_LY = "";
                            string No_of_Gifts_in_Last_Year = "";
                            /*
                            if (BlackBaudConstituentId != null)
                            {
                                Total_of_financial_supp_in_LY = FetchFinancialSupport(BlackBaudConstituentId, start_date_LY, end_date_LY); //TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR
                                No_of_Gifts_in_Last_Year = FetchNumberOfGiftsGiven(BlackBaudConstituentId, start_date_LY, end_date_LY); //NO_OF_GIFTS_IN_LAST_YEAR
                            }
                            else
                            {
                                Total_of_financial_supp_in_LY = "0";
                                No_of_Gifts_in_Last_Year = "0";
                            }
                            */
                            string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
                            string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_PY = "";
                            string No_of_Gifts_in_PY = "";
                            /*
                            if (BlackBaudConstituentId != null)
                            {
                                Total_of_financial_supp_in_PY = FetchFinancialSupport(BlackBaudConstituentId, start_date_PY, end_date_PY); //TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR
                                No_of_Gifts_in_PY = FetchNumberOfGiftsGiven(BlackBaudConstituentId, start_date_PY, end_date_PY); //NO_OF_GIFTS_IN_PREVIOUS_YEAR
                            }
                            else
                            {
                                Total_of_financial_supp_in_PY = "0";
                                No_of_Gifts_in_PY = "0";
                            }
                            */
                            /*! Fetch Data from BB End */

                            string Gender = !string.IsNullOrEmpty(values[7]) ? values[7] : "null"; //GENDER
                            string BirthDate = "null";
                            string Age_in_Years = "null";
                            if (!string.IsNullOrEmpty(values[8]))
                            {
                                DateTime dt = DateTime.ParseExact(values[8], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                BirthDate = dt.ToString("yyyy-MM-dd");
                                DateTime dob = Convert.ToDateTime(BirthDate);
                                DateTime Now = DateTime.Now;
                                Age_in_Years = Convert.ToString(new DateTime(DateTime.Now.Subtract(dob).Ticks).Year - 1);
                            }
                            else
                            {
                                BirthDate = "null";
                            }

                            string Age = !string.IsNullOrEmpty(Age_in_Years) ? Age_in_Years : "null"; //SPONSORSHIP_AGE
                            string CountryName = !string.IsNullOrEmpty(values[9]) ? values[9].ToUpper() : "null"; //SPONSORSHIP_COUNTRY
                            string MaleGuardianOccupation = !string.IsNullOrEmpty(values[10]) ? values[10] : "null"; // MALE_GUARDIAN_OCCUPATION
                            string FemaleGuardianOccupation = !string.IsNullOrEmpty(values[11]) ? values[11] : "null"; //FEMALE_GUARDIAN_OCCUPATION
                            string IsOrpaned = !string.IsNullOrEmpty(values[12]) ? values[12] : "null"; //IS_ORPHANED
                            string ThingsILike = !string.IsNullOrEmpty(GetThingsILike(NeedKey)) ? GetThingsILike(NeedKey) : "null"; //HOBBIES
                            string University = !string.IsNullOrEmpty(values[14]) ? values[14] : "null"; //UNIVERSITY
                            string PercentageAtAchool = "null"; //PERCENTAGE_AT_SCHOOL
                            string CommunityId = !string.IsNullOrEmpty(values[15]) ? values[15] : "null"; //COMMUNITY_ID                 

                            string singleRow = "'" + Commitment_Id + "', '" + Org_ID + "', '" + NeedKey + "', '" + FullBodyImageURL + "', '" + Program_Delivery_type + "', '" + StartDate + "', '" + EndDate + "', '" + Hours_spent_at_project + "', '" + NutritionalMeal + "', '" + medicalCheckups + "', '" + Bible_Given + "', '" + B2S_Letters_Sent_Last_Year + "', '" + S2B_Letters_Sent_Last_Year + "', '" + B2S_Letters_Sent_Previous_Year + "', '" + S2B_Letters_Sent_Previous_Year + "', '" + Total_of_financial_supp_in_LY + "', '" + No_of_Gifts_in_Last_Year + "', '" + Total_of_financial_supp_in_PY + "', '" + No_of_Gifts_in_PY + "', '" + Gender + "', '" + Age + "', '" + CountryName + "', '" + MaleGuardianOccupation + "', '" + FemaleGuardianOccupation + "', '" + IsOrpaned + "', '" + ThingsILike + "', '" + University + "', '" + PercentageAtAchool + "', '" + CommunityId + "', '" + PrioritySupporterId + "', '" + BlackBaudConstituentId + "', '" + SupporterGroupId + "'," + LinkedToPartnership + "";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE COMMITMENT_ID = Values(COMMITMENT_ID), ORGANISATION_ID = Values(ORGANISATION_ID), NEED_KEY = Values(NEED_KEY), FULLBODY_IMAGE_URL = Values(FULLBODY_IMAGE_URL), PROGRAM_DELIVERY_TYPE = Values(PROGRAM_DELIVERY_TYPE), SPONSORSHIP_START_DATE = Values(SPONSORSHIP_START_DATE), SPONSORSHIP_END_DATE = Values(SPONSORSHIP_END_DATE), HOURS_SPENT = Values(HOURS_SPENT), NUTRITIONS_MEALS = Values(NUTRITIONS_MEALS), MEDICAL_CHECKUPS = Values(MEDICAL_CHECKUPS), BIBLES_GIVEN = Values(BIBLES_GIVEN), B2S_LETTERS_SENT_LAST_YEAR = Values(B2S_LETTERS_SENT_LAST_YEAR), S2B_LETTERS_SENT_LAST_YEAR = Values(S2B_LETTERS_SENT_LAST_YEAR), B2S_LETTERS_SENT_PREVIOUS_YEAR = Values(B2S_LETTERS_SENT_PREVIOUS_YEAR), S2B_LETTERS_SENT_PREVIOUS_YEAR = Values(S2B_LETTERS_SENT_PREVIOUS_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR), NO_OF_GIFTS_IN_LAST_YEAR = Values(NO_OF_GIFTS_IN_LAST_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR), NO_OF_GIFTS_IN_PREVIOUS_YEAR = Values(NO_OF_GIFTS_IN_PREVIOUS_YEAR), GENDER = Values(GENDER), SPONSORSHIP_AGE = Values(SPONSORSHIP_AGE), SPONSORSHIP_COUNTRY = Values(SPONSORSHIP_COUNTRY), MALE_GUARDIAN_OCCUPATION = Values(MALE_GUARDIAN_OCCUPATION), FEMALE_GUARDIAN_OCCUPATION = Values(FEMALE_GUARDIAN_OCCUPATION), IS_ORPHANED = Values(IS_ORPHANED), HOBBIES = Values(HOBBIES), UNIVERSITY = Values(UNIVERSITY), PERCENTAGE_AT_SCHOOL = Values(PERCENTAGE_AT_SCHOOL), COMMUNITY_ID = Values(COMMUNITY_ID), PRIORITY_SUPPORTER_ID = Values(PRIORITY_SUPPORTER_ID), BLACKBAUD_CONSTITUENT_ID = Values(BLACKBAUD_CONSTITUENT_ID), SUPPORTER_GROUP_ID = Values(SUPPORTER_GROUP_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Inserted query Ended. ");
                        }
                        appLogger.Info(count + " Record in Sponsorship Details table Inserted successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncOrganisationActiveSponsorshipData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void SyncOrganisationActiveSponsorshipData_New(List<string> commitmentIds, long OrgID, long EventID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Sponsorship Data",
            };
            try
            {
                string Query = "SELECT CM.ID, CM.Organisation.ID, CM.Need.NeedKey, CM.Need.FullBodyImageURL, CM.Need.ProgramDeliveryType, CM.StartDate, CM.EndDate, CM.Need.Gender.lookupname, CM.Need.BirthDate, CM.Need.CountryName, CM.Need.HouseHold.MaleGuardianOccupation, CM.Need.HouseHold.FemaleGuardianOccupation, CM.Need.Orphan, CM.Need.HouseHold, CM.Need.GradeLevelUS_Name, CM.Need.Project.Community, CM.SupporterGroup.PrioritySupporterId, CM.SupporterGroup.PrioritySupporterId.customFields.c.blackbaudid, CM.SupporterGroup,CM.FirstFundedDate,CM.LinkedToPartnership, CM.Event.ID FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.ID IN (" + string.Join(",", commitmentIds) + ")";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Inserting " + count + " Record in Sponsorship Details table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `SPONSORSHIP_DETAILS` (`COMMITMENT_ID`, `ORGANISATION_ID`, `LINKED_TO_PARTNERSHIP`, `EVENT_ID`, `NEED_KEY`, `FULLBODY_IMAGE_URL`, `PROGRAM_DELIVERY_TYPE`, `SPONSORSHIP_START_DATE`, `SPONSORSHIP_END_DATE`, `HOURS_SPENT`, `NUTRITIONS_MEALS`, `MEDICAL_CHECKUPS`, `BIBLES_GIVEN`, `B2S_LETTERS_SENT_LAST_YEAR`, `S2B_LETTERS_SENT_LAST_YEAR`, `B2S_LETTERS_SENT_PREVIOUS_YEAR`, `S2B_LETTERS_SENT_PREVIOUS_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`, `GENDER`, `SPONSORSHIP_AGE`, `SPONSORSHIP_COUNTRY`, `MALE_GUARDIAN_OCCUPATION`, `FEMALE_GUARDIAN_OCCUPATION`, `IS_ORPHANED`, `HOBBIES`, `UNIVERSITY`, `PERCENTAGE_AT_SCHOOL`, `COMMUNITY_ID`, `PRIORITY_SUPPORTER_ID`, `BLACKBAUD_CONSTITUENT_ID`, `SUPPORTER_GROUP_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Commitment_Id = values[0];  //COMMITMENT_ID
                            string Org_ID = !string.IsNullOrEmpty(values[1]) ? values[1] : OrgID.ToString(); //ORGANISATION_ID
                            string NeedKey = !string.IsNullOrEmpty(values[2]) ? values[2] : "null"; //NEED_KEY
                            string FullBodyImageURL = !string.IsNullOrEmpty(values[3]) ? values[3] : "null"; //FULLBODY_IMAGE_URL
                            string Program_Delivery_type = !string.IsNullOrEmpty(values[4]) ? values[4] : "null"; //PROGRAM_DELIVERY_TYPE
                            string StartDate = ""; //SPONSORSHIP_START_DATE ("2014-11-06T08:00:00.000Z")
                            string EndDate = ""; //SPONSORSHIP_END_DATE ("2014-11-20T08:00:00.000Z")
                            DateTime start_Date = new DateTime();
                            DateTime end_Date = new DateTime();
                            DateTime todays_dateTime = DateTime.UtcNow.Date;
                            DateTime Meal_end_Date = new DateTime();
                            DateTime CovidStartDate = new DateTime(2020, 4, 1);
                            DateTime CovidEndDate = new DateTime(2022, 5, 1);
                            DateTime CheckBeforeDate = new DateTime(2016, 7, 1); //01-07-2016
                            bool IsCalculationNull = false;
                            int Hours_spent_at_project = 0;
                            int NutritionalMeal = 0;
                            int medicalCheckups = 0;
                            int projectAttendance = 0;
                            string LinkedToPartnership = !string.IsNullOrEmpty(values[20]) ? values[20] : "null";


                            bool doCalculation = false;
                            int covidDays = 0;



                            if (!string.IsNullOrEmpty(values[5]))
                            {
                                /*
                                 Check child Start Date is null or empty
                                 */
                                start_Date = DateTime.ParseExact(values[5], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                StartDate = start_Date.ToString("yyyy-MM-dd HH:mm:ss");
                            }
                            else
                            {
                                doCalculation = false;
                            }

                            if (!string.IsNullOrEmpty(values[19]))
                            {
                                /*
                                 Accept First Fund date as start date If start date is not before 01-07-2016
                                 */
                                DateTime FirstFundedDate = DateTime.ParseExact(values[19], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                if (CheckBeforeDate < start_Date)
                                {
                                    start_Date = FirstFundedDate;
                                }
                            }

                            if (!string.IsNullOrEmpty(values[6]))
                            {
                                /*
                                 Check child End Date is null or empty
                                 */
                                end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                EndDate = end_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                Meal_end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                EndDate = "null";
                                end_Date = todays_dateTime; // new DateTime(2020, 4, 1);
                                Meal_end_Date = todays_dateTime;
                            }

                            if (start_Date != end_Date)
                            {
                                if (start_Date > CovidEndDate)
                                {
                                    doCalculation = true;
                                    covidDays = 0;
                                }
                                else if (start_Date > CovidStartDate && end_Date < CovidEndDate)
                                {
                                    // Case 1 : Child Start Date and Child End Date lies Between Covid Date 
                                    doCalculation = false;
                                    covidDays = 0;
                                    appLogger.Info("Case 1 : Child Start date and end date lies between Covid date.");
                                }
                                else if (start_Date < CovidStartDate && end_Date > CovidEndDate)
                                {
                                    // Case 2 : Child Start Date and Child End Date do not lies Between Covid Date 
                                    // minuis 760 Days from length of sponsorship
                                    doCalculation = true;
                                    covidDays = 760;
                                    appLogger.Info("Case 2 : Child Start Date and Child End Date lies Between Covid Date. ");
                                }
                                else if (start_Date > CovidStartDate && start_Date < CovidEndDate)
                                {
                                    // Case 3 : Child End date lies under Covid Period
                                    doCalculation = true;
                                    covidDays = (int)Math.Floor((CovidEndDate - start_Date).TotalDays);
                                    appLogger.Info("Case 3 : Child start date lies under Covid Period");
                                }
                                else if (end_Date > CovidStartDate && end_Date < CovidEndDate)
                                {
                                    // Case 4 : Child Start date lies under Covid Period
                                    doCalculation = true;
                                    covidDays = (int)Math.Floor((end_Date - CovidStartDate).TotalDays);
                                    appLogger.Info("Case 4 : Child end date lies under Covid Period");
                                }
                            }

                            if (doCalculation)
                            {
                                int length_of_sponsorship = 0;
                                if (covidDays != 0)
                                {
                                    length_of_sponsorship = (int)Math.Floor(((end_Date - start_Date).TotalDays - covidDays) / 30.4375); //length_of_sponsorship
                                }
                                else
                                {
                                    length_of_sponsorship = (int)Math.Floor((end_Date - start_Date).TotalDays / 30.4375); //length_of_sponsorship
                                }

                                int Meal_length_of_sponsorship = (int)Math.Floor((Meal_end_Date - start_Date).TotalDays / 30.4375);
                                if (Program_Delivery_type == "Home Based Sponsorship" || Program_Delivery_type == "Home Based")  // Home based
                                {
                                    Hours_spent_at_project = Convert.ToInt32((10 * length_of_sponsorship) / 12);
                                    NutritionalMeal = Convert.ToInt32(((decimal)Meal_length_of_sponsorship / 12) * 10); // Convert.ToInt32((Meal_length_of_sponsorship / 12) * 10);
                                    medicalCheckups = Convert.ToInt32(Math.Round(((decimal)length_of_sponsorship / 12), 2));
                                }
                                else // Project or Center based
                                {
                                    Hours_spent_at_project = Convert.ToInt32((44 * 4 * length_of_sponsorship) / 12);
                                    NutritionalMeal = Convert.ToInt32(((decimal)Meal_length_of_sponsorship / 12) * 44); // Convert.ToInt32((Meal_length_of_sponsorship / 12) * 44);
                                    medicalCheckups = Convert.ToInt32(Math.Round(((decimal)length_of_sponsorship / 12), 2));
                                }
                                projectAttendance = (int)Math.Floor(14 * ((end_Date - start_Date).TotalDays / 30.4375));

                                // appLogger.Info("NeedKey : " + NeedKey + " start_Date: " + start_Date + " end_Date: " + end_Date);
                                // appLogger.Info("Program_Delivery_type : " + Program_Delivery_type + " length_of_sponsorship: " + length_of_sponsorship + " CovidStartDate: " + CovidStartDate);
                                appLogger.Info("Meal_end_Date : " + Meal_end_Date + " start_Date " + start_Date);
                                appLogger.Info("Meal_length_of_sponsorship : " + Meal_length_of_sponsorship + " length_of_sponsorship " + length_of_sponsorship);
                                appLogger.Info("Hours_spent_at_project : " + Hours_spent_at_project + " NutritionalMeal: " + NutritionalMeal + " medicalCheckups: " + medicalCheckups);

                            }
                            else
                            {
                                /*
                                if (Meal_end_Date > start_Date)
                                {
                                    int Meal_length_of_sponsorship = (int)Math.Floor((Meal_end_Date - start_Date).TotalDays / 30.4375);
                                    if (Program_Delivery_type == "Home Based Sponsorship" || Program_Delivery_type == "Home Based")
                                    {
                                        NutritionalMeal = Convert.ToInt32((Meal_length_of_sponsorship / 12) * 10); //Convert.ToInt32(((decimal)Meal_length_of_sponsorship / 12) * 10);
                                    }
                                    else
                                    {
                                        NutritionalMeal = Convert.ToInt32((Meal_length_of_sponsorship / 12) * 44);  //Convert.ToInt32(((decimal)Meal_length_of_sponsorship / 12) * 44);
                                    }
                                }
                                */
                            }


                            string Bible_Given = "1"; //BIBLES_GIVEN
                            string PrioritySupporterId = !string.IsNullOrEmpty(values[16]) ? values[16] : "null";
                            string BlackBaudConstituentId = !string.IsNullOrEmpty(values[17]) ? values[17] : "null";
                            string SupporterGroupId = !string.IsNullOrEmpty(values[18]) ? values[18] : "null";

                            /*
                            string Last_year_GetB2SCount = !string.IsNullOrEmpty(GetB2SCountLastYear(NeedKey, SupporterGroupId)) ? GetB2SCountLastYear(NeedKey, SupporterGroupId) : "0";
                            string Last_year_GetS2BCount = !string.IsNullOrEmpty(GetS2BCountLastYear(NeedKey, SupporterGroupId)) ? GetS2BCountLastYear(NeedKey, SupporterGroupId) : "0";
                            int total_last_year_B2S_S2B_Count = Convert.ToInt32(Last_year_GetB2SCount) + Convert.ToInt32(Last_year_GetS2BCount);
                            string Letters_sent_last_year = Convert.ToString(total_last_year_B2S_S2B_Count); //LETTERS_SENT_LAST_YEAR
                            */

                            string B2S_Letters_Sent_Last_Year = !string.IsNullOrEmpty(GetB2SCountLastYear(NeedKey, SupporterGroupId)) ? GetB2SCountLastYear(NeedKey, SupporterGroupId) : "null"; //LETTERS_SENT_BY_CHILD 
                            string S2B_Letters_Sent_Last_Year = !string.IsNullOrEmpty(GetS2BCountLastYear(NeedKey, SupporterGroupId)) ? GetS2BCountLastYear(NeedKey, SupporterGroupId) : "null"; //LETTERS_SENT_BY_SPONSORS
                            string B2S_Letters_Sent_Previous_Year = !string.IsNullOrEmpty(GetB2SCountPreviousYear(NeedKey, SupporterGroupId)) ? GetB2SCountPreviousYear(NeedKey, SupporterGroupId) : "null"; ; //LETTERS_SENT_BY_CHILD_IN_PY 
                            string S2B_Letters_Sent_Previous_Year = !string.IsNullOrEmpty(GetS2BCountPreviousYear(NeedKey, SupporterGroupId)) ? GetS2BCountPreviousYear(NeedKey, SupporterGroupId) : "null"; ; //LETTERS_SENT_BY_SPONSORS_IN_PY 

                            /*! Fetch Data from BB Start */

                            // DateTime.Now.ToString("yyyy-MM-dd")
                            string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_LY = "";
                            string No_of_Gifts_in_Last_Year = "";

                            if (BlackBaudConstituentId != null)
                            {
                                Total_of_financial_supp_in_LY = "0"; // FetchFinancialSupport(BlackBaudConstituentId, start_date_LY, end_date_LY); 
                                No_of_Gifts_in_Last_Year = "0"; // FetchNumberOfGiftsGiven(BlackBaudConstituentId, start_date_LY, end_date_LY);
                            }
                            else
                            {
                                Total_of_financial_supp_in_LY = "0";
                                No_of_Gifts_in_Last_Year = "0";
                            }

                            string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
                            string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_PY = "";
                            string No_of_Gifts_in_PY = "";

                            if (BlackBaudConstituentId != null)
                            {
                                Total_of_financial_supp_in_PY = "0"; // FetchFinancialSupport(BlackBaudConstituentId, start_date_PY, end_date_PY); 
                                No_of_Gifts_in_PY = "0"; // FetchNumberOfGiftsGiven(BlackBaudConstituentId, start_date_PY, end_date_PY); //NO_OF_GIFTS_IN_PREVIOUS_YEAR
                            }
                            else
                            {
                                Total_of_financial_supp_in_PY = "0";
                                No_of_Gifts_in_PY = "0";
                            }
                            /*! Fetch Data from BB End */

                            string Gender = !string.IsNullOrEmpty(values[7]) ? values[7] : "null"; //GENDER
                            string BirthDate = "null";
                            string Age_in_Years = "null";
                            if (!string.IsNullOrEmpty(values[8]))
                            {
                                DateTime dt = DateTime.ParseExact(values[8], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                BirthDate = dt.ToString("yyyy-MM-dd");
                                DateTime dob = Convert.ToDateTime(BirthDate);
                                DateTime Now = DateTime.Now;
                                Age_in_Years = Convert.ToString(new DateTime(DateTime.Now.Subtract(dob).Ticks).Year - 1);
                            }
                            else
                            {
                                BirthDate = "null";
                            }

                            string Age = !string.IsNullOrEmpty(Age_in_Years) ? Age_in_Years : "null"; //SPONSORSHIP_AGE
                            string CountryName = !string.IsNullOrEmpty(values[9]) ? values[9].ToUpper() : "null"; //SPONSORSHIP_COUNTRY
                            string MaleGuardianOccupation = !string.IsNullOrEmpty(values[10]) ? values[10] : "null"; // MALE_GUARDIAN_OCCUPATION
                            string FemaleGuardianOccupation = !string.IsNullOrEmpty(values[11]) ? values[11] : "null"; //FEMALE_GUARDIAN_OCCUPATION
                            string IsOrpaned = !string.IsNullOrEmpty(values[12]) ? values[12] : "null"; //IS_ORPHANED
                            string ThingsILike = !string.IsNullOrEmpty(GetThingsILike(NeedKey)) ? GetThingsILike(NeedKey) : "null"; //HOBBIES
                            string University = !string.IsNullOrEmpty(values[14]) ? values[14] : "null"; //UNIVERSITY
                            string PercentageAtAchool = "null"; //PERCENTAGE_AT_SCHOOL
                            string CommunityId = !string.IsNullOrEmpty(values[15]) ? values[15] : "null"; //COMMUNITY_ID 
                            string EventId = !string.IsNullOrEmpty(values[21]) ? values[21] : "null";

                            string singleRow = "'" + Commitment_Id + "', '" + Org_ID + "', '" + LinkedToPartnership + "', '" + EventId + "', '" + NeedKey + "', '" + FullBodyImageURL + "', '" + Program_Delivery_type + "', '" + StartDate + "', '" + EndDate + "', '" + Hours_spent_at_project + "', '" + NutritionalMeal + "', '" + medicalCheckups + "', '" + Bible_Given + "', '" + B2S_Letters_Sent_Last_Year + "', '" + S2B_Letters_Sent_Last_Year + "', '" + B2S_Letters_Sent_Previous_Year + "', '" + S2B_Letters_Sent_Previous_Year + "', '" + Total_of_financial_supp_in_LY + "', '" + No_of_Gifts_in_Last_Year + "', '" + Total_of_financial_supp_in_PY + "', '" + No_of_Gifts_in_PY + "', '" + Gender + "', '" + Age + "', '" + CountryName + "', '" + MaleGuardianOccupation + "', '" + FemaleGuardianOccupation + "', '" + IsOrpaned + "', '" + ThingsILike + "', '" + University + "', '" + PercentageAtAchool + "', '" + CommunityId + "', '" + PrioritySupporterId + "', '" + BlackBaudConstituentId + "', '" + SupporterGroupId + "'";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE COMMITMENT_ID = Values(COMMITMENT_ID), ORGANISATION_ID = Values(ORGANISATION_ID), LINKED_TO_PARTNERSHIP=Values(LINKED_TO_PARTNERSHIP), EVENT_ID=Values(EVENT_ID), NEED_KEY = Values(NEED_KEY), FULLBODY_IMAGE_URL = Values(FULLBODY_IMAGE_URL), PROGRAM_DELIVERY_TYPE = Values(PROGRAM_DELIVERY_TYPE), SPONSORSHIP_START_DATE = Values(SPONSORSHIP_START_DATE), SPONSORSHIP_END_DATE = Values(SPONSORSHIP_END_DATE), HOURS_SPENT = Values(HOURS_SPENT), NUTRITIONS_MEALS = Values(NUTRITIONS_MEALS), MEDICAL_CHECKUPS = Values(MEDICAL_CHECKUPS), BIBLES_GIVEN = Values(BIBLES_GIVEN), B2S_LETTERS_SENT_LAST_YEAR = Values(B2S_LETTERS_SENT_LAST_YEAR), S2B_LETTERS_SENT_LAST_YEAR = Values(S2B_LETTERS_SENT_LAST_YEAR), B2S_LETTERS_SENT_PREVIOUS_YEAR = Values(B2S_LETTERS_SENT_PREVIOUS_YEAR), S2B_LETTERS_SENT_PREVIOUS_YEAR = Values(S2B_LETTERS_SENT_PREVIOUS_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR), NO_OF_GIFTS_IN_LAST_YEAR = Values(NO_OF_GIFTS_IN_LAST_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR), NO_OF_GIFTS_IN_PREVIOUS_YEAR = Values(NO_OF_GIFTS_IN_PREVIOUS_YEAR), GENDER = Values(GENDER), SPONSORSHIP_AGE = Values(SPONSORSHIP_AGE), SPONSORSHIP_COUNTRY = Values(SPONSORSHIP_COUNTRY), MALE_GUARDIAN_OCCUPATION = Values(MALE_GUARDIAN_OCCUPATION), FEMALE_GUARDIAN_OCCUPATION = Values(FEMALE_GUARDIAN_OCCUPATION), IS_ORPHANED = Values(IS_ORPHANED), HOBBIES = Values(HOBBIES), UNIVERSITY = Values(UNIVERSITY), PERCENTAGE_AT_SCHOOL = Values(PERCENTAGE_AT_SCHOOL), COMMUNITY_ID = Values(COMMUNITY_ID), PRIORITY_SUPPORTER_ID = Values(PRIORITY_SUPPORTER_ID), BLACKBAUD_CONSTITUENT_ID = Values(BLACKBAUD_CONSTITUENT_ID), SUPPORTER_GROUP_ID = Values(SUPPORTER_GROUP_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Inserted query Ended. ");
                        }
                        appLogger.Info(count + " Record in Sponsorship Details table Inserted successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncOrganisationActiveSponsorshipData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void SyncOrganisationActiveSponsorshipData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Sponsorship Data",
            };
            try
            {
                //string Query = "SELECT CM.ID, CM.Organisation.ID, CM.Need.NeedKey, CM.Need.FullBodyImageURL, CM.Need.ProgramDeliveryType, CM.StartDate, CM.EndDate, CM.Need.Gender.lookupname, CM.Need.BirthDate, CM.Need.CountryName, CM.Need.HouseHold.MaleGuardianOccupation, CM.Need.HouseHold.FemaleGuardianOccupation, CM.Need.Orphan, CM.Need.HouseHold, CM.Need.GradeLevelUS_Name, CM.Need.Project.Community, CM.SupporterGroup.PrioritySupporterId, CM.SupporterGroup.BlackBaudConstituentId FROM SCBS_CM.Commitment CM where CM.Organisation.ID = " + OrgID;
                string Query = "SELECT MAX(CM.ID), CM.Organisation.ID, CM.Need.NeedKey, CM.Need.FullBodyImageURL, CM.Need.ProgramDeliveryType, CM.StartDate, CM.EndDate, CM.Need.Gender.lookupname, CM.Need.BirthDate, CM.Need.CountryName, CM.Need.HouseHold.MaleGuardianOccupation, CM.Need.HouseHold.FemaleGuardianOccupation, CM.Need.Orphan, CM.Need.HouseHold, CM.Need.GradeLevelUS_Name, CM.Need.Project.Community, CM.SupporterGroup.PrioritySupporterId, CM.SupporterGroup.BlackBaudConstituentId, CM.SupporterGroup,CM.FirstFundedDate FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID = " + OrgID + " OR CM.LinkedToPartnership = " + OrgID + ") GROUP BY CM.Need.NeedKey;";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Inserting " + count + " Record in Sponsorship Details table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `SPONSORSHIP_DETAILS` (`COMMITMENT_ID`, `ORGANISATION_ID`, `NEED_KEY`, `FULLBODY_IMAGE_URL`, `PROGRAM_DELIVERY_TYPE`, `SPONSORSHIP_START_DATE`, `SPONSORSHIP_END_DATE`, `HOURS_SPENT`, `NUTRITIONS_MEALS`, `MEDICAL_CHECKUPS`, `BIBLES_GIVEN`, `B2S_LETTERS_SENT_LAST_YEAR`, `S2B_LETTERS_SENT_LAST_YEAR`, `B2S_LETTERS_SENT_PREVIOUS_YEAR`, `S2B_LETTERS_SENT_PREVIOUS_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`, `GENDER`, `SPONSORSHIP_AGE`, `SPONSORSHIP_COUNTRY`, `MALE_GUARDIAN_OCCUPATION`, `FEMALE_GUARDIAN_OCCUPATION`, `IS_ORPHANED`, `HOBBIES`, `UNIVERSITY`, `PERCENTAGE_AT_SCHOOL`, `COMMUNITY_ID`, `PRIORITY_SUPPORTER_ID`, `BLACKBAUD_CONSTITUENT_ID`, `SUPPORTER_GROUP_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Commitment_Id = values[0];  //COMMITMENT_ID
                            string Org_ID = !string.IsNullOrEmpty(values[1]) ? values[1] : OrgID.ToString(); //ORGANISATION_ID
                            string NeedKey = !string.IsNullOrEmpty(values[2]) ? values[2] : "null"; //NEED_KEY
                            string FullBodyImageURL = !string.IsNullOrEmpty(values[3]) ? values[3] : "null"; //FULLBODY_IMAGE_URL
                            string Program_Delivery_type = !string.IsNullOrEmpty(values[4]) ? values[4] : "null"; //PROGRAM_DELIVERY_TYPE
                            string StartDate = ""; //SPONSORSHIP_START_DATE ("2014-11-06T08:00:00.000Z")
                            string EndDate = ""; //SPONSORSHIP_END_DATE ("2014-11-20T08:00:00.000Z")
                            DateTime start_Date = new DateTime();
                            DateTime end_Date = new DateTime();
                            DateTime todays_dateTime = DateTime.UtcNow.Date;
                            DateTime Meal_end_Date = new DateTime();
                            DateTime CovidStartDate = new DateTime(2020, 4, 1);
                            DateTime CheckBeforeDate = new DateTime(2016, 7, 1); //01-07-2016
                            bool IsCalculationNull = false;
                            int Hours_spent_at_project = 0;
                            int NutritionalMeal = 0;
                            int medicalCheckups = 0;
                            int projectAttendance = 0;
                            if (!string.IsNullOrEmpty(values[5]))
                            {
                                start_Date = DateTime.ParseExact(values[5], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                StartDate = start_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                if (start_Date > CovidStartDate)
                                {
                                    IsCalculationNull = true;
                                    //All Calculation is null
                                }
                            }
                            else
                            {
                                StartDate = "null";
                                IsCalculationNull = true;
                                //All Calculation is null
                            }

                            if (!string.IsNullOrEmpty(values[19]))
                            {
                                DateTime FirstFundedDate = DateTime.ParseExact(values[19], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                if (CheckBeforeDate < start_Date) //If start date is not before 01-07-2016
                                {
                                    start_Date = FirstFundedDate;
                                }

                            }


                            if (!string.IsNullOrEmpty(values[6]))
                            {
                                end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                EndDate = end_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                if (end_Date > CovidStartDate)
                                {
                                    end_Date = new DateTime(2020, 4, 1);
                                }
                                Meal_end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                EndDate = "null";
                                end_Date = new DateTime(2020, 4, 1);
                                Meal_end_Date = todays_dateTime;
                            }
                            if (!IsCalculationNull)
                            {
                                int length_of_sponsorship = (int)Math.Floor((end_Date - start_Date).TotalDays / 30.4375); //length_of_sponsorship
                                int Meal_length_of_sponsorship = (int)Math.Floor((Meal_end_Date - start_Date).TotalDays / 30.4375);
                                if (Program_Delivery_type == "Home Based Sponsorship" || Program_Delivery_type == "Home Based")  // Home based
                                {

                                    Hours_spent_at_project = (10 * length_of_sponsorship) / 12; //HOURS_SPENT 
                                    NutritionalMeal = Convert.ToInt32(((decimal) Meal_length_of_sponsorship / 12) * 10); //NUTRITIONS_MEALS
                                    medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12)); //MEDICAL_CHECKUPS
                                }
                                else // Project or Center based
                                {
                                    Hours_spent_at_project = (44 * 4 * length_of_sponsorship) / 12; //HOURS_SPENT 
                                    NutritionalMeal = Convert.ToInt32(((decimal) Meal_length_of_sponsorship / 12) * 44); //NUTRITIONS_MEALS
                                    medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12)); //MEDICAL_CHECKUPS
                                }
                                //Hours_spent_at_project = (14 * length_of_sponsorship); //HOURS_SPENT 
                                //NutritionalMeal = (int)Math.Floor((end_Date - start_Date).TotalDays / 30.4375) * (11 / 3); //NUTRITIONS_MEALS
                                //medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12)); //MEDICAL_CHECKUPS
                                projectAttendance = (int)Math.Floor(14 * ((end_Date - start_Date).TotalDays / 30.4375));
                            }

                            string Bible_Given = "1"; //BIBLES_GIVEN
                            string PrioritySupporterId = !string.IsNullOrEmpty(values[16]) ? values[16] : "null";
                            string BlackBaudConstituentId = !string.IsNullOrEmpty(values[17]) ? values[17] : "null";
                            string SupporterGroupId = !string.IsNullOrEmpty(values[18]) ? values[18] : "null";

                            /*
                            string Last_year_GetB2SCount = !string.IsNullOrEmpty(GetB2SCountLastYear(NeedKey, SupporterGroupId)) ? GetB2SCountLastYear(NeedKey, SupporterGroupId) : "0";
                            string Last_year_GetS2BCount = !string.IsNullOrEmpty(GetS2BCountLastYear(NeedKey, SupporterGroupId)) ? GetS2BCountLastYear(NeedKey, SupporterGroupId) : "0";
                            int total_last_year_B2S_S2B_Count = Convert.ToInt32(Last_year_GetB2SCount) + Convert.ToInt32(Last_year_GetS2BCount);
                            string Letters_sent_last_year = Convert.ToString(total_last_year_B2S_S2B_Count); //LETTERS_SENT_LAST_YEAR
                            */

                            string B2S_Letters_Sent_Last_Year = !string.IsNullOrEmpty(GetB2SCountLastYear(NeedKey, SupporterGroupId)) ? GetB2SCountLastYear(NeedKey, SupporterGroupId) : "null"; //LETTERS_SENT_BY_CHILD 
                            string S2B_Letters_Sent_Last_Year = !string.IsNullOrEmpty(GetS2BCountLastYear(NeedKey, SupporterGroupId)) ? GetS2BCountLastYear(NeedKey, SupporterGroupId) : "null"; //LETTERS_SENT_BY_SPONSORS
                            string B2S_Letters_Sent_Previous_Year = !string.IsNullOrEmpty(GetB2SCountPreviousYear(NeedKey, SupporterGroupId)) ? GetB2SCountPreviousYear(NeedKey, SupporterGroupId) : "null"; ; //LETTERS_SENT_BY_CHILD_IN_PY 
                            string S2B_Letters_Sent_Previous_Year = !string.IsNullOrEmpty(GetS2BCountPreviousYear(NeedKey, SupporterGroupId)) ? GetS2BCountPreviousYear(NeedKey, SupporterGroupId) : "null"; ; //LETTERS_SENT_BY_SPONSORS_IN_PY 

                            /*! Fetch Data from BB Start */

                            // DateTime.Now.ToString("yyyy-MM-dd")
                            string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_LY;
                            string No_of_Gifts_in_Last_Year;

                            if (BlackBaudConstituentId != null)
                            {
                                Total_of_financial_supp_in_LY = FetchFinancialSupport(BlackBaudConstituentId, start_date_LY, end_date_LY); //TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR
                                No_of_Gifts_in_Last_Year = FetchNumberOfGiftsGiven(BlackBaudConstituentId, start_date_LY, end_date_LY); //NO_OF_GIFTS_IN_LAST_YEAR
                            }
                            else
                            {
                                Total_of_financial_supp_in_LY = "0";
                                No_of_Gifts_in_Last_Year = "0";
                            }

                            string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
                            string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_PY;
                            string No_of_Gifts_in_PY;

                            if (BlackBaudConstituentId != null)
                            {
                                Total_of_financial_supp_in_PY = FetchFinancialSupport(BlackBaudConstituentId, start_date_PY, end_date_PY); //TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR
                                No_of_Gifts_in_PY = FetchNumberOfGiftsGiven(BlackBaudConstituentId, start_date_PY, end_date_PY); //NO_OF_GIFTS_IN_PREVIOUS_YEAR
                            }
                            else
                            {
                                Total_of_financial_supp_in_PY = "0";
                                No_of_Gifts_in_PY = "0";
                            }
                            /*! Fetch Data from BB End */

                            string Gender = !string.IsNullOrEmpty(values[7]) ? values[7] : "null"; //GENDER
                            string BirthDate = "null";
                            string Age_in_Years = "null";
                            if (!string.IsNullOrEmpty(values[8]))
                            {
                                DateTime dt = DateTime.ParseExact(values[8], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                BirthDate = dt.ToString("yyyy-MM-dd");
                                DateTime dob = Convert.ToDateTime(BirthDate);
                                DateTime Now = DateTime.Now;
                                Age_in_Years = Convert.ToString(new DateTime(DateTime.Now.Subtract(dob).Ticks).Year - 1);
                            }
                            else
                            {
                                BirthDate = "null";
                            }

                            string Age = !string.IsNullOrEmpty(Age_in_Years) ? Age_in_Years : "null"; //SPONSORSHIP_AGE
                            string CountryName = !string.IsNullOrEmpty(values[9]) ? values[9].ToUpper() : "null"; //SPONSORSHIP_COUNTRY
                            string MaleGuardianOccupation = !string.IsNullOrEmpty(values[10]) ? values[10] : "null"; // MALE_GUARDIAN_OCCUPATION
                            string FemaleGuardianOccupation = !string.IsNullOrEmpty(values[11]) ? values[11] : "null"; //FEMALE_GUARDIAN_OCCUPATION
                            string IsOrpaned = !string.IsNullOrEmpty(values[12]) ? values[12] : "null"; //IS_ORPHANED
                            string ThingsILike = !string.IsNullOrEmpty(GetThingsILike(NeedKey)) ? GetThingsILike(NeedKey) : "null"; //HOBBIES
                            string University = !string.IsNullOrEmpty(values[14]) ? values[14] : "null"; //UNIVERSITY
                            string PercentageAtAchool = "null"; //PERCENTAGE_AT_SCHOOL
                            string CommunityId = !string.IsNullOrEmpty(values[15]) ? values[15] : "null"; //COMMUNITY_ID                 

                            string singleRow = "'" + Commitment_Id + "', '" + Org_ID + "', '" + NeedKey + "', '" + FullBodyImageURL + "', '" + Program_Delivery_type + "', '" + StartDate + "', '" + EndDate + "', '" + Hours_spent_at_project + "', '" + NutritionalMeal + "', '" + medicalCheckups + "', '" + Bible_Given + "', '" + B2S_Letters_Sent_Last_Year + "', '" + S2B_Letters_Sent_Last_Year + "', '" + B2S_Letters_Sent_Previous_Year + "', '" + S2B_Letters_Sent_Previous_Year + "', '" + Total_of_financial_supp_in_LY + "', '" + No_of_Gifts_in_Last_Year + "', '" + Total_of_financial_supp_in_PY + "', '" + No_of_Gifts_in_PY + "', '" + Gender + "', '" + Age + "', '" + CountryName + "', '" + MaleGuardianOccupation + "', '" + FemaleGuardianOccupation + "', '" + IsOrpaned + "', '" + ThingsILike + "', '" + University + "', '" + PercentageAtAchool + "', '" + CommunityId + "', '" + PrioritySupporterId + "', '" + BlackBaudConstituentId + "', '" + SupporterGroupId + "'";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE COMMITMENT_ID = Values(COMMITMENT_ID), ORGANISATION_ID = Values(ORGANISATION_ID), NEED_KEY = Values(NEED_KEY), FULLBODY_IMAGE_URL = Values(FULLBODY_IMAGE_URL), PROGRAM_DELIVERY_TYPE = Values(PROGRAM_DELIVERY_TYPE), SPONSORSHIP_START_DATE = Values(SPONSORSHIP_START_DATE), SPONSORSHIP_END_DATE = Values(SPONSORSHIP_END_DATE), HOURS_SPENT = Values(HOURS_SPENT), NUTRITIONS_MEALS = Values(NUTRITIONS_MEALS), MEDICAL_CHECKUPS = Values(MEDICAL_CHECKUPS), BIBLES_GIVEN = Values(BIBLES_GIVEN), B2S_LETTERS_SENT_LAST_YEAR = Values(B2S_LETTERS_SENT_LAST_YEAR), S2B_LETTERS_SENT_LAST_YEAR = Values(S2B_LETTERS_SENT_LAST_YEAR), B2S_LETTERS_SENT_PREVIOUS_YEAR = Values(B2S_LETTERS_SENT_PREVIOUS_YEAR), S2B_LETTERS_SENT_PREVIOUS_YEAR = Values(S2B_LETTERS_SENT_PREVIOUS_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR), NO_OF_GIFTS_IN_LAST_YEAR = Values(NO_OF_GIFTS_IN_LAST_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR), NO_OF_GIFTS_IN_PREVIOUS_YEAR = Values(NO_OF_GIFTS_IN_PREVIOUS_YEAR), GENDER = Values(GENDER), SPONSORSHIP_AGE = Values(SPONSORSHIP_AGE), SPONSORSHIP_COUNTRY = Values(SPONSORSHIP_COUNTRY), MALE_GUARDIAN_OCCUPATION = Values(MALE_GUARDIAN_OCCUPATION), FEMALE_GUARDIAN_OCCUPATION = Values(FEMALE_GUARDIAN_OCCUPATION), IS_ORPHANED = Values(IS_ORPHANED), HOBBIES = Values(HOBBIES), UNIVERSITY = Values(UNIVERSITY), PERCENTAGE_AT_SCHOOL = Values(PERCENTAGE_AT_SCHOOL), COMMUNITY_ID = Values(COMMUNITY_ID), PRIORITY_SUPPORTER_ID = Values(PRIORITY_SUPPORTER_ID), BLACKBAUD_CONSTITUENT_ID = Values(BLACKBAUD_CONSTITUENT_ID), SUPPORTER_GROUP_ID = Values(SUPPORTER_GROUP_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Inserted query Ended. ");
                        }
                        appLogger.Info(count + " Record in Sponsorship Details table Inserted successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncOrganisationActiveSponsorshipData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void SyncOrganisationData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Org Data",
            };
            try
            {
                // string Query = "SELECT CM.Organisation.ID, CM.Organisation.Name, count(CM.Need.ID) FROM SCBS_CM.Commitment CM where (CM.Organisation.ID = " + OrgID + " OR CM.LinkedToPartnership.id = " + OrgID + ")";// AND CM.EndDate IS NOT NULL
                string Query = "SELECT O.ID, O.Name from organization O where id = " + OrgID;
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Organisations table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `ORGANISATION` (`ORGANISATION_ID`, `ORGANISATION_NAME`, `NUMBER_OF_CHILD`, `B2S_LETTERS_SENT_LAST_YEAR`, `S2B_LETTERS_SENT_LAST_YEAR`, `B2S_LETTERS_SENT_PREVIOUS_YEAR`, `S2B_LETTERS_SENT_PREVIOUS_YEAR`, `CHANGED_IN_B2S_LETTERS`, `B2S_UP_DOWN_IMAGE`, `CHANGED_IN_S2B_LETTERS`, `S2B_UP_DOWN_IMAGE`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`, `CHANGED_IN_FINANCIAL_SUPPORT`, `FINANCIAL_SUPPORT_UP_DOWN_IMAGE`, `CHANGE_IN_NO_OF_GIFT`, `NO_OF_GIFT_UP_DOWN_IMAGE`,`PPT_TYPE`,`SLIDE_7A_TEXT_1`,`SLIDE_7A_TEXT_2`,`SLIDE_7B_TEXT_1`,`SLIDE_7B_TEXT_2`) VALUES ");

                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Org_ID = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";
                            string Org_Name = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            //string NumberOfChild = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            string FetchNumberOfChild = Convert.ToString(GetNoOfChildrenInOrg(Org_ID, 0));
                            string NumberOfChild = !string.IsNullOrEmpty(FetchNumberOfChild) ? FetchNumberOfChild : "0";

                            OrgData OrgObj = new OrgData();
                            OrgObj = GetS2BAndB2SCountBasedOnOrgId(Org_ID, 0);

                            //string Letters_Sent_Last_Year = OrgObj.Letters_sent_in_last_year.ToString();
                            string B2S_Letters_Sent_Last_Year = OrgObj.B2S_Letters_Sent_Last_Year.ToString();
                            string S2B_Letters_Sent_Last_Year = OrgObj.S2B_Letters_Sent_Last_Year.ToString();
                            string B2S_Letters_Sent_Previous_Year = OrgObj.B2S_Letters_Sent_Previous_Year.ToString();
                            string S2B_Letters_Sent_Previous_Year = OrgObj.S2B_Letters_Sent_Previous_Year.ToString();
                            string Change_In_B2S_Letter_Sent = "";
                            string B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string Change_In_S2B_Letter_Sent = "";
                            string S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";

                            if (OrgObj.B2S_Letters_Sent_Last_Year != 0 && OrgObj.B2S_Letters_Sent_Previous_Year != 0)
                            {
                                if (OrgObj.B2S_Letters_Sent_Last_Year >= OrgObj.B2S_Letters_Sent_Previous_Year) // Greater than
                                {

                                    Change_In_B2S_Letter_Sent = ((OrgObj.B2S_Letters_Sent_Last_Year - OrgObj.B2S_Letters_Sent_Previous_Year) * 100 / OrgObj.B2S_Letters_Sent_Previous_Year).ToString();
                                    B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow

                                }
                                else
                                {
                                    Change_In_B2S_Letter_Sent = ((OrgObj.B2S_Letters_Sent_Previous_Year - OrgObj.B2S_Letters_Sent_Last_Year) * 100 / OrgObj.B2S_Letters_Sent_Last_Year).ToString();
                                    B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                                }
                            }

                            if (OrgObj.S2B_Letters_Sent_Last_Year != 0 && OrgObj.S2B_Letters_Sent_Previous_Year != 0)
                            {
                                if (OrgObj.S2B_Letters_Sent_Last_Year >= OrgObj.S2B_Letters_Sent_Previous_Year) // Greater than
                                {
                                    Change_In_S2B_Letter_Sent = ((OrgObj.S2B_Letters_Sent_Last_Year - OrgObj.S2B_Letters_Sent_Previous_Year) * 100 / OrgObj.S2B_Letters_Sent_Previous_Year).ToString();
                                    S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow
                                }
                                else
                                {
                                    Change_In_S2B_Letter_Sent = ((OrgObj.S2B_Letters_Sent_Previous_Year - OrgObj.S2B_Letters_Sent_Last_Year) * 100 / OrgObj.S2B_Letters_Sent_Last_Year).ToString();
                                    S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                                }
                            }

                            /*! Fetch From BB */
                            /*
                            OrgData OrgObj2 = new OrgData();
                            OrgObj2 = GetFinancialSupportAndNoOfGiftBasedOnOrgId(Org_ID);
                            string Total_Of_Financial_Supp_In_Last_Year = OrgObj2.Total_Of_Financial_Supp_In_Last_Year.ToString();
                            string No_Of_Gifts_In_Last_Year = OrgObj2.No_Of_Gifts_In_Last_Year.ToString();
                            string Total_Of_Financial_Supp_In_Previous_Year = OrgObj2.Total_Of_Financial_Supp_In_Previous_Year.ToString();
                            string No_Of_Gifts_In_Previous_Year = OrgObj2.No_Of_Gifts_In_Previous_Year.ToString();
                            

                            //string Last_Sync_Time = DateTime.Now.ToString("'yyyy'-'MM'-'dd' 'HH':'mm':'ss'");

                            int Total_Financial_Supp_In_Last_Year = Convert.ToInt32(Total_Of_Financial_Supp_In_Last_Year);
                            int Total_Financial_Supp_In_Previous_Year = Convert.ToInt32(Total_Of_Financial_Supp_In_Previous_Year);
                            int No_Gifts_In_Last_Year = Convert.ToInt32(No_Of_Gifts_In_Last_Year);
                            int No_Gifts_In_Previous_Year = Convert.ToInt32(No_Of_Gifts_In_Previous_Year);
                            string Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            int Total_Change_In_Financial_Support;
                            int Total_Change_In_No_Of_Gift;
                            string Change_In_No_Of_Gift = "";
                            string Change_In_Financial_Support = "";

                            if (Total_Financial_Supp_In_Last_Year != 0 && Total_Financial_Supp_In_Previous_Year != 0)
                            {
                                if (Total_Financial_Supp_In_Last_Year >= Total_Financial_Supp_In_Previous_Year) //Greater than
                                {
                                    Total_Change_In_Financial_Support = (Total_Financial_Supp_In_Last_Year - Total_Financial_Supp_In_Previous_Year) * 100 / Total_Financial_Supp_In_Previous_Year;
                                    if (Total_Change_In_Financial_Support != 0)
                                    {
                                        Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                                        Change_In_Financial_Support = Convert.ToString(Total_Change_In_Financial_Support);
                                    }
                                }
                                else
                                {
                                    //Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                                    //Total_In_Financial_Support = (Total_Financial_Supp_In_Previous_Year - Total_Financial_Supp_In_Last_Year) * 100 / Total_Financial_Supp_In_Last_Year;
                                    //Change_In_Financial_Support = Convert.ToString(Total_In_Financial_Support);
                                }
                            }

                            if (No_Gifts_In_Last_Year != 0 && No_Gifts_In_Previous_Year != 0) { 
                                if (No_Gifts_In_Last_Year >= No_Gifts_In_Previous_Year) // Greater than
                                {

                                    Total_Change_In_No_Of_Gift = (No_Gifts_In_Last_Year - No_Gifts_In_Previous_Year) * 100 / No_Gifts_In_Previous_Year;
                                    if (Total_Change_In_No_Of_Gift != 0)
                                    {
                                        No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                                        Change_In_No_Of_Gift = Convert.ToString(Total_Change_In_No_Of_Gift);
                                    }
                                }
                                else
                                {
                                    //No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                                    //Total_Change_In_No_Of_Gift = (No_Gifts_In_Previous_Year - No_Gifts_In_Last_Year) * 100 / No_Gifts_In_Last_Year;
                                    //Change_In_No_Of_Gift = Convert.ToString(Total_Change_In_No_Of_Gift);
                                }
                            }
                            */

                            string Total_Of_Financial_Supp_In_Last_Year = "0";
                            string No_Of_Gifts_In_Last_Year = "0";
                            string Total_Of_Financial_Supp_In_Previous_Year = "0";
                            string No_Of_Gifts_In_Previous_Year = "0";

                            string Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string Change_In_No_Of_Gift = "";
                            string Change_In_Financial_Support = "";

                            string PPT_TYPE = GetPPTCountryStatusOfOrg(Org_ID, "");// PPT_TYPE

                            OrgData OrgObj3 = new OrgData();
                            OrgObj3 = CreateSlidertextfromTableRecord(Org_ID, 0);
                            string single_country_breakdown_text_1 = "";
                            string single_country_breakdown_text_2 = "";
                            string multi_country_breakdown_text_1 = "";
                            string multi_country_breakdown_text_2 = "";
                            if (OrgObj3 != null) {
                                single_country_breakdown_text_1 = !string.IsNullOrEmpty(OrgObj3.Slide7A_Text_1) ? OrgObj3.Slide7A_Text_1 : "";
                                single_country_breakdown_text_2 = !string.IsNullOrEmpty(OrgObj3.Slide7A_Text_2) ? OrgObj3.Slide7A_Text_2 : "";
                                multi_country_breakdown_text_1 = !string.IsNullOrEmpty(OrgObj3.Slide7B_Text_1) ? OrgObj3.Slide7B_Text_1 : "";
                                multi_country_breakdown_text_2 = !string.IsNullOrEmpty(OrgObj3.Slide7B_Text_2) ? OrgObj3.Slide7B_Text_2 : "";
                            }


                            string singleRow = "'" + Org_ID + "', '" + Org_Name + "', '" + NumberOfChild + "', '" + B2S_Letters_Sent_Last_Year + "', '" + S2B_Letters_Sent_Last_Year + "', '" + B2S_Letters_Sent_Previous_Year + "', '" + S2B_Letters_Sent_Previous_Year + "', '" + Change_In_B2S_Letter_Sent + "', '" + B2S_Arrow_URL + "', '" + Change_In_S2B_Letter_Sent + "', '" + S2B_Arrow_URL + "', '" + Total_Of_Financial_Supp_In_Last_Year + "', '" + No_Of_Gifts_In_Last_Year + "', '" + Total_Of_Financial_Supp_In_Previous_Year + "', '" + No_Of_Gifts_In_Previous_Year + "', '" + Change_In_Financial_Support + "', '" + Financial_Support_Arrow_URL + "', '" + Change_In_No_Of_Gift + "', '" + No_Of_Gift_Arrow_URL + "','" + PPT_TYPE + "','" + single_country_breakdown_text_1 + "','" + single_country_breakdown_text_2 + "','" + multi_country_breakdown_text_1 + "','" + multi_country_breakdown_text_2 + "'";

                            if (!string.IsNullOrEmpty(Org_ID))
                            {
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ORGANISATION_ID = Values(ORGANISATION_ID), ORGANISATION_NAME = Values(ORGANISATION_NAME), NUMBER_OF_CHILD = Values(NUMBER_OF_CHILD), B2S_LETTERS_SENT_LAST_YEAR = Values(B2S_LETTERS_SENT_LAST_YEAR), S2B_LETTERS_SENT_LAST_YEAR = Values(S2B_LETTERS_SENT_LAST_YEAR), B2S_LETTERS_SENT_PREVIOUS_YEAR = Values(B2S_LETTERS_SENT_PREVIOUS_YEAR), S2B_LETTERS_SENT_PREVIOUS_YEAR = Values(S2B_LETTERS_SENT_PREVIOUS_YEAR), CHANGED_IN_B2S_LETTERS = Values(CHANGED_IN_B2S_LETTERS),  B2S_UP_DOWN_IMAGE = Values(B2S_UP_DOWN_IMAGE), CHANGED_IN_S2B_LETTERS = Values(CHANGED_IN_S2B_LETTERS), S2B_UP_DOWN_IMAGE = Values(S2B_UP_DOWN_IMAGE), TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR), NO_OF_GIFTS_IN_LAST_YEAR = Values(NO_OF_GIFTS_IN_LAST_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR), NO_OF_GIFTS_IN_PREVIOUS_YEAR = Values(NO_OF_GIFTS_IN_PREVIOUS_YEAR), CHANGED_IN_FINANCIAL_SUPPORT = Values(CHANGED_IN_FINANCIAL_SUPPORT), FINANCIAL_SUPPORT_UP_DOWN_IMAGE = Values(FINANCIAL_SUPPORT_UP_DOWN_IMAGE), CHANGE_IN_NO_OF_GIFT = Values(CHANGE_IN_NO_OF_GIFT), NO_OF_GIFT_UP_DOWN_IMAGE = Values(NO_OF_GIFT_UP_DOWN_IMAGE),PPT_TYPE=Values(PPT_TYPE),SLIDE_7A_TEXT_1=Values(SLIDE_7A_TEXT_1),SLIDE_7A_TEXT_2=Values(SLIDE_7A_TEXT_2),SLIDE_7B_TEXT_1=Values(SLIDE_7B_TEXT_1),SLIDE_7B_TEXT_2=Values(SLIDE_7B_TEXT_2)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Organisations table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncOrganisationData: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void SyncEventData(long EventID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Event Data",
            };
            try
            {
                string Query = "SELECT CM.Event.ID, CM.Event.Name, count(CM.Need.ID) FROM SCBS_CM.Commitment CM where CM.Event.ID =" + EventID;

                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Event table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `EVENT` (`EVENT_ID`, `EVENT_NAME`, `NUMBER_OF_CHILD`, `B2S_LETTERS_SENT_LAST_YEAR`, `S2B_LETTERS_SENT_LAST_YEAR`, `B2S_LETTERS_SENT_PREVIOUS_YEAR`, `S2B_LETTERS_SENT_PREVIOUS_YEAR`, `CHANGED_IN_B2S_LETTERS`, `B2S_UP_DOWN_IMAGE`, `CHANGED_IN_S2B_LETTERS`, `S2B_UP_DOWN_IMAGE`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`, `CHANGED_IN_FINANCIAL_SUPPORT`, `FINANCIAL_SUPPORT_UP_DOWN_IMAGE`, `CHANGE_IN_NO_OF_GIFT`, `NO_OF_GIFT_UP_DOWN_IMAGE`,`PPT_TYPE`,`SLIDE_7A_TEXT_1`,`SLIDE_7A_TEXT_2`,`SLIDE_7B_TEXT_1`,`SLIDE_7B_TEXT_2`) VALUES ");

                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Event_ID = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";
                            string Event_Name = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            //string NumberOfChild = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            string FetchNumberOfChild = Convert.ToString(GetNoOfChildrenInOrg("", EventID));
                            string NumberOfChild = !string.IsNullOrEmpty(FetchNumberOfChild) ? FetchNumberOfChild : "0";

                            OrgData OrgObj = new OrgData();
                            OrgObj = GetS2BAndB2SCountBasedOnOrgId("", EventID);

                            //string Letters_Sent_Last_Year = OrgObj.Letters_sent_in_last_year.ToString();
                            string B2S_Letters_Sent_Last_Year = OrgObj.B2S_Letters_Sent_Last_Year.ToString();
                            string S2B_Letters_Sent_Last_Year = OrgObj.S2B_Letters_Sent_Last_Year.ToString();
                            string B2S_Letters_Sent_Previous_Year = OrgObj.B2S_Letters_Sent_Previous_Year.ToString();
                            string S2B_Letters_Sent_Previous_Year = OrgObj.S2B_Letters_Sent_Previous_Year.ToString();
                            string Change_In_B2S_Letter_Sent = "";
                            string B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string Change_In_S2B_Letter_Sent = "";
                            string S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";

                            if (OrgObj.B2S_Letters_Sent_Last_Year != 0 && OrgObj.B2S_Letters_Sent_Previous_Year != 0)
                            {
                                if (OrgObj.B2S_Letters_Sent_Last_Year >= OrgObj.B2S_Letters_Sent_Previous_Year) // Greater than
                                {

                                    Change_In_B2S_Letter_Sent = ((OrgObj.B2S_Letters_Sent_Last_Year - OrgObj.B2S_Letters_Sent_Previous_Year) * 100 / OrgObj.B2S_Letters_Sent_Previous_Year).ToString();
                                    B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow

                                }
                                else
                                {
                                    Change_In_B2S_Letter_Sent = ((OrgObj.B2S_Letters_Sent_Previous_Year - OrgObj.B2S_Letters_Sent_Last_Year) * 100 / OrgObj.B2S_Letters_Sent_Last_Year).ToString();
                                    B2S_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                                }
                            }

                            if (OrgObj.S2B_Letters_Sent_Last_Year != 0 && OrgObj.S2B_Letters_Sent_Previous_Year != 0)
                            {
                                if (OrgObj.S2B_Letters_Sent_Last_Year >= OrgObj.S2B_Letters_Sent_Previous_Year) // Greater than
                                {
                                    Change_In_S2B_Letter_Sent = ((OrgObj.S2B_Letters_Sent_Last_Year - OrgObj.S2B_Letters_Sent_Previous_Year) * 100 / OrgObj.S2B_Letters_Sent_Previous_Year).ToString();
                                    S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_blue@2x.png"; // Up Arrow
                                }
                                else
                                {
                                    Change_In_S2B_Letter_Sent = ((OrgObj.S2B_Letters_Sent_Previous_Year - OrgObj.S2B_Letters_Sent_Last_Year) * 100 / OrgObj.S2B_Letters_Sent_Last_Year).ToString();
                                    S2B_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/down_arrow_grey@2x.png"; // Down Arrow
                                }
                            }

                            string Total_Of_Financial_Supp_In_Last_Year = "0";
                            string No_Of_Gifts_In_Last_Year = "0";
                            string Total_Of_Financial_Supp_In_Previous_Year = "0";
                            string No_Of_Gifts_In_Previous_Year = "0";

                            string Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                            string Change_In_No_Of_Gift = "";
                            string Change_In_Financial_Support = "";

                            string PPT_TYPE = GetPPTCountryStatusOfOrg("", EventID.ToString());// PPT_TYPE

                            OrgData OrgObj3 = new OrgData();
                            OrgObj3 = CreateSlidertextfromTableRecord("", EventID);
                            string single_country_breakdown_text_1 = !string.IsNullOrEmpty(OrgObj3.Slide7A_Text_1) ? OrgObj3.Slide7A_Text_1.ToString() : ""; //OrgObj3.Slide7A_Text_1.ToString();
                            string single_country_breakdown_text_2 = !string.IsNullOrEmpty(OrgObj3.Slide7A_Text_2) ? OrgObj3.Slide7A_Text_2.ToString() : ""; // OrgObj3.Slide7A_Text_2.ToString();
                            string multi_country_breakdown_text_1 = !string.IsNullOrEmpty(OrgObj3.Slide7B_Text_1) ? OrgObj3.Slide7B_Text_1.ToString() : ""; // OrgObj3.Slide7B_Text_1.ToString();
                            string multi_country_breakdown_text_2 = !string.IsNullOrEmpty(OrgObj3.Slide7B_Text_2) ? OrgObj3.Slide7B_Text_2.ToString() : ""; // OrgObj3.Slide7B_Text_2.ToString();

                            string singleRow = "'" + Event_ID + "', '" + Event_Name + "', '" + NumberOfChild + "', '" + B2S_Letters_Sent_Last_Year + "', '" + S2B_Letters_Sent_Last_Year + "', '" + B2S_Letters_Sent_Previous_Year + "', '" + S2B_Letters_Sent_Previous_Year + "', '" + Change_In_B2S_Letter_Sent + "', '" + B2S_Arrow_URL + "', '" + Change_In_S2B_Letter_Sent + "', '" + S2B_Arrow_URL + "', '" + Total_Of_Financial_Supp_In_Last_Year + "', '" + No_Of_Gifts_In_Last_Year + "', '" + Total_Of_Financial_Supp_In_Previous_Year + "', '" + No_Of_Gifts_In_Previous_Year + "', '" + Change_In_Financial_Support + "', '" + Financial_Support_Arrow_URL + "', '" + Change_In_No_Of_Gift + "', '" + No_Of_Gift_Arrow_URL + "','" + PPT_TYPE + "','" + single_country_breakdown_text_1 + "','" + single_country_breakdown_text_2 + "','" + multi_country_breakdown_text_1 + "','" + multi_country_breakdown_text_2 + "'";

                            if (!string.IsNullOrEmpty(Event_ID))
                            {
                                appLogger.Info("Event sync single row data : " + singleRow);
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE EVENT_ID = Values(EVENT_ID), EVENT_NAME = Values(EVENT_NAME), NUMBER_OF_CHILD = Values(NUMBER_OF_CHILD), B2S_LETTERS_SENT_LAST_YEAR = Values(B2S_LETTERS_SENT_LAST_YEAR), S2B_LETTERS_SENT_LAST_YEAR = Values(S2B_LETTERS_SENT_LAST_YEAR), B2S_LETTERS_SENT_PREVIOUS_YEAR = Values(B2S_LETTERS_SENT_PREVIOUS_YEAR), S2B_LETTERS_SENT_PREVIOUS_YEAR = Values(S2B_LETTERS_SENT_PREVIOUS_YEAR), CHANGED_IN_B2S_LETTERS = Values(CHANGED_IN_B2S_LETTERS),  B2S_UP_DOWN_IMAGE = Values(B2S_UP_DOWN_IMAGE), CHANGED_IN_S2B_LETTERS = Values(CHANGED_IN_S2B_LETTERS), S2B_UP_DOWN_IMAGE = Values(S2B_UP_DOWN_IMAGE), TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR), NO_OF_GIFTS_IN_LAST_YEAR = Values(NO_OF_GIFTS_IN_LAST_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR), NO_OF_GIFTS_IN_PREVIOUS_YEAR = Values(NO_OF_GIFTS_IN_PREVIOUS_YEAR), CHANGED_IN_FINANCIAL_SUPPORT = Values(CHANGED_IN_FINANCIAL_SUPPORT), FINANCIAL_SUPPORT_UP_DOWN_IMAGE = Values(FINANCIAL_SUPPORT_UP_DOWN_IMAGE), CHANGE_IN_NO_OF_GIFT = Values(CHANGE_IN_NO_OF_GIFT), NO_OF_GIFT_UP_DOWN_IMAGE = Values(NO_OF_GIFT_UP_DOWN_IMAGE),PPT_TYPE=Values(PPT_TYPE),SLIDE_7A_TEXT_1=Values(SLIDE_7A_TEXT_1),SLIDE_7A_TEXT_2=Values(SLIDE_7A_TEXT_2),SLIDE_7B_TEXT_1=Values(SLIDE_7B_TEXT_1),SLIDE_7B_TEXT_2=Values(SLIDE_7B_TEXT_2)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Event table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncEventData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void SyncCommunityDataV2(int OrgID, long EventID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Community Data",
            };
            try
            {
                string Query = "SELECT CM.Need.Project.Community, CM.Need.Project.Community.PrimaryLanguage, CM.Need.Project.Community.FamilyMonthlyIncome, CM.Need.Project.Community.UnemploymentRate, CM.Need.Project.Community.HomeRoof, CM.Need.Project.Community.HomeWall, CM.Need.Project.Community.HomeFloor, CM.Need.Project.Community.Terrain_R4, CM.Need.Project.Community.LocaleType, CM.Need.Project.Community.PrimaryOccupation_R4 FROM SCBS_CM.Commitment CM";
                if (EventID != 0)
                {
                    Query += " WHERE CM.Event.ID = " + EventID;
                }
                else
                {
                    Query += " WHERE CM.Organisation.ID = " + OrgID; //AND CM.EndDate IS NOT NULL
                }
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in Community table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `COMMUNITY_DETAILS`(`COMMUNITY_ID`, `PRIMARY_LANGUAGE`, `MONTHLY_INCOME`, `UNEMPLOYMENT_RATE`, `HOME_ROOF`, `HOME_WALL`, `HOME_FLOOR`, `TERRAIN`, `LOCALE`, `PRIMARY_OCCUPATION`) VALUES ");

                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Community_ID = !string.IsNullOrEmpty(values[0]) ? values[0] : "null";  //COMMUNITY_ID
                            string Primary_language = !string.IsNullOrEmpty(values[1]) ? values[1] : "null"; //PRIMARY_LANGUAGE
                            string Family_monthly_income = !string.IsNullOrEmpty(values[2]) ? values[2] : "null"; //MONTHLY_INCOME
                            string Unemployment_rate = !string.IsNullOrEmpty(values[3]) ? values[3] : "null"; //UNEMPLOYMENT_RATE
                            string Home_roof = !string.IsNullOrEmpty(AddCommaAndAndBetweenWords(values[4])) ? AddCommaAndAndBetweenWords(values[4]) : "null"; //HOME_ROOF
                            string Home_wall = !string.IsNullOrEmpty(AddCommaAndAndBetweenWords(values[5])) ? AddCommaAndAndBetweenWords(values[5]) : "null"; //HOME_WALL
                            string Home_floor = !string.IsNullOrEmpty(AddCommaAndAndBetweenWords(values[6])) ? AddCommaAndAndBetweenWords(values[6]) : "null"; //HOME_FLOOR
                            string Terrain_r4 = !string.IsNullOrEmpty(AddCommaAndAndBetweenWords(values[7])) ? AddCommaAndAndBetweenWords(values[7]) : "null"; //TERRAIN
                            string Locale_type = !string.IsNullOrEmpty(AddCommaAndAndBetweenWords(values[8])) ? AddCommaAndAndBetweenWords(values[8]) : "null"; //LOCALE
                            string Primary_occupation_r4 = !string.IsNullOrEmpty(values[9]) ? values[9] : "null"; //PRIMARY_OCCUPATION

                            string singleRow = "'" + Community_ID + "', '" + Primary_language + "', '" + Family_monthly_income + "', '" + Unemployment_rate + "', '" + Home_roof + "', '" + Home_wall + "', '" + Home_floor + "', '" + Terrain_r4 + "', '" + Locale_type + "', '" + Primary_occupation_r4 + "'";
                            if (Community_ID != "null")
                            {
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE COMMUNITY_ID = Values(COMMUNITY_ID), PRIMARY_LANGUAGE = Values(PRIMARY_LANGUAGE), MONTHLY_INCOME = Values(MONTHLY_INCOME), UNEMPLOYMENT_RATE = Values(UNEMPLOYMENT_RATE), HOME_ROOF = Values(HOME_ROOF), HOME_WALL = Values(HOME_WALL), HOME_FLOOR = Values(HOME_FLOOR), TERRAIN = Values(TERRAIN), LOCALE = Values(LOCALE), PRIMARY_OCCUPATION = Values(PRIMARY_OCCUPATION)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in Community table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncCommunityDataV2:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void SyncCampaignData(int OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Campaign Data",
            };
            try
            {
                string today_date = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
                //string Query = "SELECT SCBS_COMMON.Campaigns.Organisation, SCBS_COMMON.Campaigns.id, SCBS_COMMON.Campaigns.lookupName, SCBS_COMMON.Campaigns.Keyword from SCBS_COMMON.Campaigns where SCBS_COMMON.Campaigns.CampaignEnd >= " + today_date + " AND SCBS_COMMON.Campaigns.CampaignEnd IS NOT NULL ORDER BY SCBS_COMMON.Campaigns.Event.name ASC,SCBS_COMMON.Campaigns.Organisation.name ASC";
                string Query = "SELECT SCBS_COMMON.Campaigns.Organisation, SCBS_COMMON.Campaigns.id, SCBS_COMMON.Campaigns.lookupName, SCBS_COMMON.Campaigns.Keyword from SCBS_COMMON.Campaigns where SCBS_COMMON.Campaigns.Organisation =" + OrgID;

                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating " + count + " Record in CAMPAIGN_DETAILS table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `CAMPAIGN_DETAILS` (`ORGANISATION_ID`, `CAMPAIGN_ID`, `CAMPAIGN_NAME`,  `CAMPAIGN_REFERENCE`, `QR_CODE_IMAGE_URL`, `CAMPAIGN_URL`, `CAMPAIGN_TEXT_TO_SPONSOR`) VALUES ");

                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Org_ID = !string.IsNullOrEmpty(values[0]) ? values[0] : "null"; // ORGANISATION_ID
                            string Campaign_ID = !string.IsNullOrEmpty(values[1]) ? values[1] : "null"; // CAMPAIGN_ID
                            string Campaign_Name = !string.IsNullOrEmpty(values[2]) ? values[2] : "null"; // CAMPAIGN_NAME
                            string Campaign_Reference = !string.IsNullOrEmpty(values[3]) ? values[3] : "null"; // CAMPAIGN_REFERENCE
                            string Event_Page_URL = "https://www.compassionuk.org/hope/" + Campaign_Reference;
                            string Qrcode_URL = "null";
                            if (!string.IsNullOrEmpty(Event_Page_URL) && !string.IsNullOrEmpty(Campaign_Reference))
                            {
                                //Qrcode_URL = GenerateBarCodeCampaignTable(Event_Page_URL, Campaign_Reference);
                                Qrcode_URL = GenerateBarCodeCampaignTableV2(Event_Page_URL, Campaign_Reference);
                                //Qrcode_URL = "null";
                            }
                            else
                            {
                                Qrcode_URL = "null";
                            }
                            string Qr_Code_Image_URL = Qrcode_URL; // QR_CODE_IMAGE_URL
                            string Campaign_URL = "compassionuk.org/hope/" + Campaign_Reference; // CAMPAIGN_URL
                            //string Campaign_Text_To_Sponsor = "SPONSOR " + Campaign_Reference + " to 07984377587"; // CAMPAIGN_TEXT_TO_SPONSOR
                            string Campaign_Text_To_Sponsor = "SPONSOR " + Campaign_Reference + " "; // CAMPAIGN_TEXT_TO_SPONSOR

                            string singleRow = "'" + Org_ID + "', '" + Campaign_ID + "', '" + Campaign_Name + "', '" + Campaign_Reference + "', '" + Qr_Code_Image_URL + "', '" + Campaign_URL + "', '" + Campaign_Text_To_Sponsor + "'";

                            if (!string.IsNullOrEmpty(Org_ID))
                            {
                                Rows.Add(string.Format("({0})", singleRow));
                            }
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ORGANISATION_ID = Values(ORGANISATION_ID), CAMPAIGN_ID = Values(CAMPAIGN_ID), CAMPAIGN_NAME = Values(CAMPAIGN_NAME), CAMPAIGN_REFERENCE = Values(CAMPAIGN_REFERENCE), QR_CODE_IMAGE_URL = Values(QR_CODE_IMAGE_URL), CAMPAIGN_URL = Values(CAMPAIGN_URL), CAMPAIGN_TEXT_TO_SPONSOR = Values(CAMPAIGN_TEXT_TO_SPONSOR)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " Record in CAMPAIGN_DETAILS table updated successfully");
                    }

                }
                else
                {
                    appLogger.Info("No Record found in Right Now for Campaign for Organisation : " + OrgID);
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `CAMPAIGN_DETAILS` (`ORGANISATION_ID`, `CAMPAIGN_ID`, `CAMPAIGN_NAME`,  `CAMPAIGN_REFERENCE`, `QR_CODE_IMAGE_URL`, `CAMPAIGN_URL`, `CAMPAIGN_TEXT_TO_SPONSOR`) VALUES ");

                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();

                        string Org_ID = Convert.ToString(OrgID); // ORGANISATION_ID
                        string Campaign_ID = ""; // CAMPAIGN_ID
                        string Campaign_Name = ""; // CAMPAIGN_NAME
                        string Campaign_Reference = ""; // CAMPAIGN_REFERENCE
                        string Event_Page_URL = "https://www.compassionuk.org/sponsorship/";
                        string Qrcode_URL = "null";
                        if (!string.IsNullOrEmpty(Event_Page_URL))
                        {
                            //Qrcode_URL = GenerateBarCodeCampaignTable(Event_Page_URL, Campaign_Reference);
                            Qrcode_URL = GenerateBarCodeCampaignTableV2(Event_Page_URL, Campaign_Reference);
                        }
                        else
                        {
                            Qrcode_URL = "null";
                        }
                        string Qr_Code_Image_URL = Qrcode_URL; // QR_CODE_IMAGE_URL
                        string Campaign_URL = "compassionuk.org/sponsorship/"; // CAMPAIGN_URL
                        string Campaign_Text_To_Sponsor = "SPONSOR "; // CAMPAIGN_TEXT_TO_SPONSOR
                        //string Campaign_Text_To_Sponsor = "SPONSOR to 07984377587"; // CAMPAIGN_TEXT_TO_SPONSOR
                        Campaign_Text_To_Sponsor = "SPONSOR"; // CAMPAIGN_TEXT_TO_SPONSOR

                        string singleRow = "'" + Org_ID + "', '" + Campaign_ID + "', '" + Campaign_Name + "', '" + Campaign_Reference + "', '" + Qr_Code_Image_URL + "', '" + Campaign_URL + "', '" + Campaign_Text_To_Sponsor + "'";

                        if (!string.IsNullOrEmpty(Org_ID))
                        {
                            Rows.Add(string.Format("({0})", singleRow));
                        }

                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ORGANISATION_ID = Values(ORGANISATION_ID), CAMPAIGN_ID = Values(CAMPAIGN_ID), CAMPAIGN_NAME = Values(CAMPAIGN_NAME), CAMPAIGN_REFERENCE = Values(CAMPAIGN_REFERENCE), QR_CODE_IMAGE_URL = Values(QR_CODE_IMAGE_URL), CAMPAIGN_URL = Values(CAMPAIGN_URL), CAMPAIGN_TEXT_TO_SPONSOR = Values(CAMPAIGN_TEXT_TO_SPONSOR)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + "Generic Record in CAMPAIGN_DETAILS table updated successfully");
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncCampaignData:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public string GetS2BCountBasedOnNeedKeyAndSupGrpId(string NeedKey, string SupporterGroupId)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get S2B Count"
            };
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.S2BCommunication S WHERE S.Need.NeedKey='" + NeedKey + "'";
            if (!string.IsNullOrEmpty(SupporterGroupId))
            {
                Query += " AND S.SupporterGroup=" + SupporterGroupId;
            }
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public string GetB2SCountBasedOnNeedKeyAndSupGrpId(string NeedKey, string SupporterGroupId)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get B2S Count"
            };
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.Correspondence S WHERE S.Need.NeedKey='" + NeedKey + "'";
            if (!string.IsNullOrEmpty(SupporterGroupId))
            {
                Query += " AND S.SupporterGroup=" + SupporterGroupId;
            }
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public string GetS2BCountPreviousYear(string NeedKey, string SupporterGroupId)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get S2B Count"
            };
            string start_date = DateTime.Now.AddYears(-2).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string end_date = DateTime.Now.AddYears(-1).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.S2BCommunication S WHERE S.createdTime >= '" + start_date + "' AND S.createdTime <= '" + end_date + "' AND S.Need.NeedKey='" + NeedKey + "'";
            if (!string.IsNullOrEmpty(SupporterGroupId))
            {
                Query += " AND S.SupporterGroup=" + SupporterGroupId;
            }
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public string GetB2SCountPreviousYear(string NeedKey, string SupporterGroupId)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get B2S Count"
            };
            string start_date = DateTime.Now.AddYears(-2).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string end_date = DateTime.Now.AddYears(-1).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.Correspondence S WHERE S.createdTime >= '" + start_date + "' AND S.createdTime <= '" + end_date + "' AND S.Need.NeedKey='" + NeedKey + "'";
            if (!string.IsNullOrEmpty(SupporterGroupId))
            {
                Query += " AND S.SupporterGroup=" + SupporterGroupId;
            }
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public string GetS2BCountLastYear(string NeedKey, string SupporterGroupId)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "GetS2BCountLastYear"
            };
            string start_date = DateTime.Now.AddYears(-1).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string end_date = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.S2BCommunication S WHERE S.createdTime >= '" + start_date + "' AND S.createdTime <= '" + end_date + "' AND S.Need.NeedKey='" + NeedKey + "'";
            if (!string.IsNullOrEmpty(SupporterGroupId))
            {
                Query += " AND S.SupporterGroup=" + SupporterGroupId;
            }
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public string GetB2SCountLastYear(string NeedKey, string SupporterGroupId)
        {
            string count = "";
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "GetS2BCountLastYear"
            };
            string start_date = DateTime.Now.AddYears(-1).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string end_date = DateTime.Now.ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss.000'Z'");
            string Query = "SELECT count(S.ID) FROM SCBS_SUP.Correspondence S WHERE S.createdTime >= '" + start_date + "' AND S.createdTime <= '" + end_date + "' AND S.Need.NeedKey='" + NeedKey + "'";
            if (!string.IsNullOrEmpty(SupporterGroupId))
            {
                Query += " AND S.SupporterGroup=" + SupporterGroupId;
            }
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            byte[] bytedata;
            CSVTableSet result;
            head = rightNowSyncPortClient.QueryCSV(info, api, Query, 10000, "^", false, true, out result, out bytedata);
            if (result.CSVTables.Length > 0)
            {
                if (result.CSVTables[0].Rows.Count() > 0)
                {
                    count = result.CSVTables[0].Rows[0];
                }
            }
            return count;
        }
        public OrgData GetS2BAndB2SCountBasedOnOrgId(string OrgID, long EventID)
        {
            if (EventID != 0)
            {
                appLogger.Info("Get S2B And B2S Count Based On EventID (" + EventID + ") process started...");
            }
            else
            {
                appLogger.Info("Get S2B And B2S Count Based On OrgId (" + OrgID + ") process started...");
            }
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "SELECT SUM(B2S_LETTERS_SENT_LAST_YEAR) AS B2S_LETTERS_SENT_LAST_YEAR, SUM(S2B_LETTERS_SENT_LAST_YEAR) as S2B_LETTERS_SENT_LAST_YEAR, SUM(B2S_LETTERS_SENT_PREVIOUS_YEAR) AS B2S_LETTERS_SENT_PREVIOUS_YEAR, SUM(S2B_LETTERS_SENT_PREVIOUS_YEAR) AS S2B_LETTERS_SENT_PREVIOUS_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM SPONSORSHIP_DETAILS ";

                if (EventID != 0)
                {
                    query += "WHERE EVENT_ID = " + EventID;
                }
                else
                {
                    query += "WHERE (ORGANISATION_ID = " + OrgID + " OR LINKED_TO_PARTNERSHIP = " + OrgID + ")";
                }

                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    orgData.B2S_Letters_Sent_Last_Year = !string.IsNullOrEmpty(reader["B2S_LETTERS_SENT_LAST_YEAR"].ToString()) ? Convert.ToInt32(reader["B2S_LETTERS_SENT_LAST_YEAR"]) : 0;
                    orgData.S2B_Letters_Sent_Last_Year = !string.IsNullOrEmpty(reader["S2B_LETTERS_SENT_LAST_YEAR"].ToString()) ? Convert.ToInt32(reader["S2B_LETTERS_SENT_LAST_YEAR"]) : 0;
                    orgData.B2S_Letters_Sent_Previous_Year = !string.IsNullOrEmpty(reader["B2S_LETTERS_SENT_PREVIOUS_YEAR"].ToString()) ? Convert.ToInt32(reader["B2S_LETTERS_SENT_PREVIOUS_YEAR"]) : 0;
                    orgData.S2B_Letters_Sent_Previous_Year = !string.IsNullOrEmpty(reader["S2B_LETTERS_SENT_PREVIOUS_YEAR"].ToString()) ? Convert.ToInt32(reader["S2B_LETTERS_SENT_PREVIOUS_YEAR"]) : 0;
                    orgData.Total_Of_Financial_Supp_In_Last_Year = !string.IsNullOrEmpty(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"].ToString()) ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"]) : 0;
                    orgData.No_Of_Gifts_In_Last_Year = !string.IsNullOrEmpty(reader["NO_OF_GIFTS_IN_LAST_YEAR"].ToString()) ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_LAST_YEAR"]) : 0;
                    orgData.Total_Of_Financial_Supp_In_Previous_Year = !string.IsNullOrEmpty(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"].ToString()) ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"]) : 0;
                    orgData.No_Of_Gifts_In_Previous_Year = !string.IsNullOrEmpty(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"].ToString()) ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                if (EventID != 0)
                {
                    appLogger.Error("Error in Getting S2B And B2S Count Based On EventId (" + EventID + ") " + e.Message);
                }
                else
                {
                    appLogger.Error("Error in Getting S2B And B2S Count Based On OrgId (" + OrgID + ") " + e.Message);
                }
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            if (EventID != 0)
            {
                appLogger.Info("Get S2B And B2S Count Based On EventId (" + EventID + ") process ended...");
            }
            else
            {
                appLogger.Info("Get S2B And B2S Count Based On OrgId (" + OrgID + ") process ended...");
            }
            return orgData;
        }
        public OrgData GetFinancialSupportAndNoOfGiftBasedOnOrgId(string OrgID)
        {
            appLogger.Info("Get Financial Support And No Of Gift SUM Based On OrgId (" + OrgID + ") From SPONSORSHIP_DETAILS TABLE process started...");
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                //string query = "SELECT SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM SPONSORSHIP_DETAILS WHERE ORGANISATION_ID = " + OrgID;
                string query = "SELECT SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM (SELECT TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, NO_OF_GIFTS_IN_LAST_YEAR, TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM `SPONSORSHIP_DETAILS` WHERE (ORGANISATION_ID = " + OrgID + " OR LINKED_TO_PARTNERSHIP = " + OrgID + ") GROUP BY BLACKBAUD_CONSTITUENT_ID) src";
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    orgData.Total_Of_Financial_Supp_In_Last_Year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"] != null ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"]) : 0;
                    orgData.No_Of_Gifts_In_Last_Year = reader["NO_OF_GIFTS_IN_LAST_YEAR"] != null ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_LAST_YEAR"]) : 0;
                    orgData.Total_Of_Financial_Supp_In_Previous_Year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"]) : 0;
                    orgData.No_Of_Gifts_In_Previous_Year = reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"] != null ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetFinancialSupportAndNoOfGiftBasedOnOrgId for OrgID : (" + OrgID + ") " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Get Financial Support And No Of Gift SUM Based On OrgId (" + OrgID + ") From SPONSORSHIP_DETAILS TABLE process ended...");
            return orgData;
        }
        public string GenerateBarCodeCampaignTable(string URL, string Keyword)
        {
            appLogger.Info("QR Code process started with url: " + URL + " and Keyword: " + Keyword);
            string BarCodeUrl = Host + "/CukAutomationServices/QR-Code/QR-Code_" + Keyword + ".png";
            try
            {
                string BarCodePath = @""+ settings["QR_CODE_IMG_PATH"] + "QR-Code_" + Keyword + ".png";
                var url = string.Format("http://chart.apis.google.com/chart?cht=qr&chs={1}x{2}&chl={0}", URL, "500", "500");
                WebResponse response = default(WebResponse);
                Stream remoteStream = default(Stream);
                StreamReader readStream = default(StreamReader);
                WebRequest request = WebRequest.Create(url);
                response = request.GetResponse();
                remoteStream = response.GetResponseStream();
                readStream = new StreamReader(remoteStream);
                System.Drawing.Image img = System.Drawing.Image.FromStream(remoteStream);
                img.Save(BarCodePath);
                response.Close();
                remoteStream.Close();
                readStream.Close();
                appLogger.Info("BarCode:" + BarCodePath + " created for URL: " + URL + " with Keyword: " + Keyword);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GenerateBarCodeCampaignTable:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return BarCodeUrl;
        }

        public string GenerateBarCodeCampaignTableV2(string URL, string Keyword)
        {
            appLogger.Info("QR Code process started with url: " + URL + " and Keyword: " + Keyword);
            string BarCodeUrl = Host + "/CukAutomationServices/QR-Code/QR-Code_" + Keyword + ".png";
            try
            {
                string BarCodePath = @"" + settings["QR_CODE_IMG_PATH"] + "QR-Code_" + Keyword + ".png";
                RestClient client = new RestClient("https://chart.apis.google.com/chart");
                RestRequest request = new RestRequest("", Method.GET);
                request.AddParameter("cht", "qr", ParameterType.QueryString);
                request.AddParameter("chs", "500x500", ParameterType.QueryString);
                request.AddParameter("chl", URL, ParameterType.QueryString);
                IRestResponse response = client.Execute(request);
                File.WriteAllBytes(BarCodePath, response.RawBytes);
                appLogger.Info("BarCode:" + BarCodePath + " created for URL: " + URL + " with Keyword: " + Keyword);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GenerateBarCodeCampaignTableV2:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return BarCodeUrl;
        }

        public void CreateSponosoredChildImageForSlider(int OrgID, long EventID)
        {
            appLogger.Info("Create Sponosored Children Image Slider process started For OrgID : " + OrgID);
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "";
                if (EventID != 0)
                {
                    query = "SELECT NUMBER_OF_CHILD FROM EVENT WHERE EVENT_ID = " + EventID;
                }
                else
                {
                    query = "SELECT NUMBER_OF_CHILD FROM ORGANISATION WHERE ORGANISATION_ID = " + OrgID;
                }
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    if (reader["NUMBER_OF_CHILD"] != null)
                    {
                        string create_image_url = "";
                        int no_of_child = Convert.ToInt32(reader["NUMBER_OF_CHILD"]);
                        if (no_of_child >= 36) // Greater than 36 Children 
                        {
                            if (EventID != 0)
                            {
                                create_image_url = "https://cukwebsite.co.uk/oneview/Create_ppt_images_v2.php?EventID=" + EventID + "&child_count=" + no_of_child;
                            }
                            else
                            {
                                create_image_url = "https://cukwebsite.co.uk/oneview/Create_ppt_images_v2.php?OrgID=" + OrgID + "&child_count=" + no_of_child;
                            }
                        }
                        else
                        {
                            if (EventID != 0)
                            {
                                create_image_url = "https://cukwebsite.co.uk/oneview/Create_ppt_images_v2.php?EventID=" + EventID + "&child_count=" + no_of_child;
                            }
                            else
                            {
                                create_image_url = "https://cukwebsite.co.uk/oneview/Create_ppt_images_v2.php?OrgID=" + OrgID + "&child_count=" + no_of_child;
                            }
                        } //OrgID=21977&child_count=36
                        appLogger.Info("API Url for creating Image Slider is " + create_image_url + " Count of Children : " + no_of_child);
                        if (!string.IsNullOrEmpty(create_image_url))
                        {
                            WebRequest request = HttpWebRequest.Create(create_image_url);
                            WebResponse response = request.GetResponse();
                            StreamReader streamreader = new StreamReader(response.GetResponseStream());
                            string urlText = streamreader.ReadToEnd();
                        }
                        else
                        {
                            appLogger.Info("Create Image URL is empty in CreateSponosoredChildImageForSlider Method");
                        }
                    }
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateSponosoredChildImageForSlider " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Create Sponosored Children Image Slider process ended For OrgID : " + OrgID);
        }

        public int GetNoOfChildrenInOrg(string OrgID, long EventID)
        {
            appLogger.Info("GetNoOfChildrenInOrg process started...");
            int count = 0;
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "SELECT count(*) as Children_count FROM `SPONSORSHIP_DETAILS`";
                if (EventID != 0)
                {
                    query += " WHERE `EVENT_ID` = " + EventID;
                }
                else
                {
                    query += " WHERE (`ORGANISATION_ID` =" + OrgID + " OR LINKED_TO_PARTNERSHIP = " + OrgID + ")";
                }

                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    count = reader["Children_count"] != null ? Convert.ToInt32(reader["Children_count"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetNoOfChildrenInOrg " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("GetNoOfChildrenInOrg process ended...");
            return count;
        }

        public string FetchFinancialSupport(string Lookupid, string startdate, string enddate)
        {
            string FinancialSupportCount = "0";
            try
            {
                appLogger.Info("Fetch Financial Support For Lookup id : " + Lookupid);
                SmartQueryLoadRequest sqreq = new SmartQueryLoadRequest();
                sqreq.ClientAppInfo = GetRequestHeader();
                sqreq.SmartQueryID = new Guid("10897d81-d777-414f-98a1-552c26e934be"); // Smart Query: Total of financial support (CS)

                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("CONSTITUENTLOOKUPID", Lookupid);
                fvSet.Add("MAXDATE_1", startdate); //DateTime.Now.ToString("yyyy-MM-dd")
                fvSet.Add("MAXDATE_2", enddate);

                var sqdfi = new DataFormItem();
                sqdfi.Values = fvSet;
                sqreq.Filter = sqdfi;
                //sqreq.MaxRecords = 1;
                var sqresult = _service.SmartQueryLoad(sqreq);
                int rowcount = sqresult.Output.RowCount;
                var rows = sqresult.Output.Rows;

                if (rowcount > 0)
                {
                    FinancialSupportCount = rows[0].Values[0];
                }
                appLogger.Info("Fetch Financial Support Counts : " + FinancialSupportCount);
                return FinancialSupportCount;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchFinancialSupport : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return FinancialSupportCount;
        }
        public string FetchNumberOfGiftsGiven(string Lookupid, string startdate, string enddate)
        {
            string NoOfGiftCount = "0";
            try
            {
                appLogger.Info("Fetch Number Of Gifts Given For Lookup id : " + Lookupid);
                SmartQueryLoadRequest sqreq = new SmartQueryLoadRequest();
                sqreq.ClientAppInfo = GetRequestHeader();
                sqreq.SmartQueryID = new Guid("c54b8b37-5608-40a3-bf8e-9bc1dab037b7"); // Smart Query: Number of gifts given (CS)

                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("CONSTITUENTLOOKUPID", Lookupid);
                fvSet.Add("DATE_1", startdate);//DateTime.Now.ToString("yyyy-MM-dd")
                fvSet.Add("DATE_2", enddate);

                var sqdfi = new DataFormItem();
                sqdfi.Values = fvSet;
                sqreq.Filter = sqdfi;
                //sqreq.MaxRecords = 1;
                var sqresult = _service.SmartQueryLoad(sqreq);
                int rowcount = sqresult.Output.RowCount;
                var rows = sqresult.Output.Rows;
                int TotalCount = 0;
                if (rowcount > 0)
                {
                    for (int i = 0; i < rowcount; i++)
                    {
                        TotalCount += Convert.ToInt32(rows[i].Values[0]);
                    }
                    NoOfGiftCount = TotalCount.ToString();
                }
                appLogger.Info("Fetch Number Of Gifts Given Counts : " + NoOfGiftCount);
                return NoOfGiftCount;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchNumberOfGiftsGiven : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return NoOfGiftCount;
        }
        public string AddCommaAndAndBetweenWords(string text)
        {
            string str = "";
            //appLogger.Info("Start Adding Comma and And in between string. Before String : " + text);
            try
            {
                string Text_To_Convert = text.Replace("thatch", "thatched"); // ‘thatch’ needs to be changed to ‘thatched’
                string[] Array = Text_To_Convert.Split('/');
                string Lastword = Array[Array.Length - 1];
                str = Text_To_Convert.Replace("/" + Lastword, " and " + Lastword).Replace("/", ", ");
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GenerateBarCodeCampaignTable:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            //appLogger.Info("Ended Adding Comma and And in between string. After String : " + str);
            return str;
        }

        public string GetPPTCountryStatusOfOrg(string OrgID, string EventID)
        {
            appLogger.Info("Get PPT Country Status Of Organisation process started...");
            //int count = 0;
            int no_of_active_children;
            int most_children_count;
            int total_value;
            string ppt_country_status = "";
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "";
                if (!string.IsNullOrEmpty(EventID))
                {
                    query = "SELECT (SELECT count(*) as Sponsorship FROM `SPONSORSHIP_DETAILS` AS Spon WHERE (Spon.`EVENT_ID` = " + EventID + ") AND Spon.`SPONSORSHIP_END_DATE` IS NULL LIMIT 1) AS NO_OF_ACTIVE_CHILDREN, (SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count FROM `SPONSORSHIP_DETAILS` AS Spon WHERE (Spon.`EVENT_ID` = " + EventID + ") AND Spon.`SPONSORSHIP_END_DATE` IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1) AS MOST_CHILDREN_COUNT FROM `EVENT` WHERE `EVENT_ID` = " + EventID + " LIMIT 1";
                }
                else
                {
                    query = "SELECT (SELECT count(*) as Sponsorship FROM `SPONSORSHIP_DETAILS` AS Spon WHERE (Spon.`ORGANISATION_ID` = " + OrgID + " OR Spon.LINKED_TO_PARTNERSHIP = " + OrgID + ") AND Spon.`SPONSORSHIP_END_DATE` IS NULL LIMIT 1) AS NO_OF_ACTIVE_CHILDREN, (SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count FROM `SPONSORSHIP_DETAILS` AS Spon WHERE (Spon.`ORGANISATION_ID` = " +
                       OrgID + " OR Spon.LINKED_TO_PARTNERSHIP = " + OrgID + ") AND Spon.`SPONSORSHIP_END_DATE` IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1) AS MOST_CHILDREN_COUNT FROM `ORGANISATION` AS ORG WHERE `ORGANISATION_ID` = " + OrgID + " LIMIT 1";
                }

                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    no_of_active_children = !string.IsNullOrEmpty(reader["NO_OF_ACTIVE_CHILDREN"].ToString()) ? Convert.ToInt32(reader["NO_OF_ACTIVE_CHILDREN"]) : 0;
                    most_children_count = !string.IsNullOrEmpty(reader["MOST_CHILDREN_COUNT"].ToString()) ? Convert.ToInt32(reader["MOST_CHILDREN_COUNT"]) : 0;
                    if (no_of_active_children != 0)
                    {
                        total_value = (most_children_count * 100 / no_of_active_children);
                    }
                    else
                    {
                        total_value = 0;
                    }
                    if (total_value >= 80)
                    {
                        ppt_country_status = "SINGLE_COUNTRY";
                    }
                    else
                    {
                        ppt_country_status = "MULTI_COUNTRY";
                    }
                    //count = reader["Children_count"] != null ? Convert.ToInt32(reader["Children_count"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetPPTCountryStatusOfOrg " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Get PPT Country Status Of Organisation process ended...");
            return ppt_country_status;
        }

        public OrgData CreateSlidertextfromTableRecord(string OrgID, long EventID)
        {
            appLogger.Info("CreateSlidertextfromTableRecord process started...");
            int top_sponsorship_count = 0;
            string top_sponsorship_country = "";
            int total_no_of_country = 0;
            int total_active_children = 0;
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "";
                if (EventID != 0)
                {
                    query = "SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count, Spon.SPONSORSHIP_COUNTRY AS SPONSORSHIP_COUNTRY, (SELECT COUNT(*) AS TOTAL_COUNT from (SELECT SPONSORSHIP.`SPONSORSHIP_COUNTRY` FROM `SPONSORSHIP_DETAILS` AS SPONSORSHIP WHERE SPONSORSHIP.`EVENT_ID` = " + EventID + " AND SPONSORSHIP. SPONSORSHIP_END_DATE IS NULL GROUP BY SPONSORSHIP.`SPONSORSHIP_COUNTRY`) x) AS TOTAL_NO_OF_COUNTRY, (SELECT COUNT(*) FROM `SPONSORSHIP_DETAILS` WHERE `EVENT_ID` = " + EventID + " AND SPONSORSHIP_END_DATE IS NULL) AS TOTAL_ACTIVE_CHILDREN  FROM `SPONSORSHIP_DETAILS` AS Spon, `COUNTRY` AS Coun WHERE Spon.`SPONSORSHIP_COUNTRY` = Coun.`COUNTRY_NAME` AND Spon.`EVENT_ID` = " + EventID + " AND Spon.SPONSORSHIP_END_DATE IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1";
                }
                else
                {
                    query = "SELECT count(Spon.`SPONSORSHIP_COUNTRY`) as Sponsorship_Count, Spon.SPONSORSHIP_COUNTRY AS SPONSORSHIP_COUNTRY, (SELECT COUNT(*) AS TOTAL_COUNT from (SELECT SPONSORSHIP.`SPONSORSHIP_COUNTRY` FROM `SPONSORSHIP_DETAILS` AS SPONSORSHIP WHERE (SPONSORSHIP.`ORGANISATION_ID` = " + OrgID + " OR SPONSORSHIP.LINKED_TO_PARTNERSHIP = " + OrgID + ") AND SPONSORSHIP. SPONSORSHIP_END_DATE IS NULL GROUP BY SPONSORSHIP.`SPONSORSHIP_COUNTRY`) x) AS TOTAL_NO_OF_COUNTRY, (SELECT COUNT(*) FROM `SPONSORSHIP_DETAILS` WHERE (ORGANISATION_ID = " + OrgID + " OR LINKED_TO_PARTNERSHIP = " + OrgID + ") AND SPONSORSHIP_END_DATE IS NULL) AS TOTAL_ACTIVE_CHILDREN  FROM `SPONSORSHIP_DETAILS` AS Spon, `COUNTRY` AS Coun WHERE Spon.`SPONSORSHIP_COUNTRY` = Coun.`COUNTRY_NAME` AND (Spon.`ORGANISATION_ID` = " + OrgID + " OR Spon.LINKED_TO_PARTNERSHIP = " + OrgID + ") AND Spon.SPONSORSHIP_END_DATE IS NULL GROUP BY Spon.`SPONSORSHIP_COUNTRY` ORDER BY count(Spon.`SPONSORSHIP_COUNTRY`) DESC LIMIT 1";
                }

                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                if (reader.Read())
                {
                    TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
                    top_sponsorship_count = reader["Sponsorship_Count"] != null ? Convert.ToInt32(reader["Sponsorship_Count"]) : 0;
                    string top_country = reader["SPONSORSHIP_COUNTRY"] != null ? Convert.ToString(reader["SPONSORSHIP_COUNTRY"]) : "";
                    //top_sponsorship_country = top_country.Substring(0, 1).ToUpper() + top_country.Substring(1).ToLower();
                    top_sponsorship_country = textInfo.ToTitleCase(top_country.ToLower());

                    total_no_of_country = reader["TOTAL_NO_OF_COUNTRY"] != null ? Convert.ToInt32(reader["TOTAL_NO_OF_COUNTRY"]) : 0;
                    total_active_children = reader["TOTAL_ACTIVE_CHILDREN"] != null ? Convert.ToInt32(reader["TOTAL_ACTIVE_CHILDREN"]) : 0;
                    if (total_no_of_country == 1)
                    {
                        // 100% Text for Single Country (Your [No of ACTIVE CHILD] sponsored children all live in Rwanda.)
                        // 100% Text for Multiple country (Your [No of ACTIVE CHILD] Sponsored Children live in [No of Country] countries.)
                        orgData.Slide7A_Text_1 = "Your " + total_active_children + " sponsored children all ";
                        orgData.Slide7A_Text_2 = "live in [#FFD100]" + top_sponsorship_country + ".[/#FFD100]";
                        orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                        orgData.Slide7B_Text_2 = "live in [#FFD100]one country[/#FFD100].";
                    }
                    else
                    {
                        //80% to 99.9% text Of the[No of ACTIVE CHILD] children you sponsor, [Top COUNtry no of child] live in [Top Country]
                        orgData.Slide7A_Text_1 = "Of the " + total_active_children + " children you sponsor, ";
                        orgData.Slide7A_Text_2 = top_sponsorship_count + " live in [#FFD100]" + top_sponsorship_country + ".[/#FFD100]";
                        if (total_no_of_country == 2)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]two countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 3)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]three countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 4)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]four countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 5)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]five countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 6)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]six countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 7)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]seven countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 8)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]eight countries.[/#FFD100]";
                        }
                        else if (total_no_of_country == 9)
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = " live in [#FFD100]nine countries.[/#FFD100]";
                        }
                        else
                        {
                            orgData.Slide7B_Text_1 = "Your " + total_active_children + " sponsored children ";
                            orgData.Slide7B_Text_2 = "live in [#FFD100]" + total_no_of_country + " countries.[/#FFD100]";
                        }

                    }
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateSlidertextfromTableRecord " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                orgData = null;
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("CreateSlidertextfromTableRecord process ended...");
            return orgData;
        }

        public void UpdateSponsorship_HNM(long OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Sponsorship Data",
            };
            try
            {
                string Query = "";

                if (OrgID != 0)
                {
                    Query = "SELECT MAX(CM.ID), CM.Organisation.ID, CM.Need.NeedKey, CM.Need.ProgramDeliveryType, CM.StartDate, CM.EndDate,CM.FirstFundedDate FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID = " + OrgID + " OR CM.LinkedToPartnership = " + OrgID + ") GROUP BY CM.Need.NeedKey;";
                }
                else
                {
                    StringBuilder sb = new StringBuilder();
                    List<string> OrgsList = GetOrgIDList();
                    sb.Append(string.Join(",", OrgsList));
                    Query = "SELECT MAX(CM.ID), CM.Organisation.ID, CM.Need.NeedKey, CM.Need.ProgramDeliveryType, CM.StartDate, CM.EndDate,CM.FirstFundedDate FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID IN (" + sb.ToString() + ") OR CM.LinkedToPartnership IN (" + sb.ToString() + ")) GROUP BY CM.Need.NeedKey;";
                }

                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating HNM " + count + " Record in SPONSORSHIP_DETAILS");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `SPONSORSHIP_DETAILS`(`ORGANISATION_ID`, `NEED_KEY`,`HOURS_SPENT`,`NUTRITIONS_MEALS`,`MEDICAL_CHECKUPS`,`COMMITMENT_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Commitment_Id = values[0];
                            string Org_ID = !string.IsNullOrEmpty(values[1]) ? values[1] : OrgID.ToString();
                            string NeedKey = !string.IsNullOrEmpty(values[2]) ? values[2] : "null";
                            string Program_Delivery_type = !string.IsNullOrEmpty(values[3]) ? values[3] : "null";
                            string StartDate = "";
                            string EndDate = "";
                            DateTime start_Date = new DateTime();
                            DateTime end_Date = new DateTime();
                            DateTime todays_dateTime = DateTime.UtcNow.Date;
                            DateTime Meal_end_Date = new DateTime();
                            DateTime CovidStartDate = new DateTime(2020, 4, 1);
                            DateTime CheckBeforeDate = new DateTime(2016, 7, 1); //01-07-2016
                            bool IsCalculationNull = false;
                            int Hours_spent_at_project = 0;
                            int NutritionalMeal = 0;
                            int medicalCheckups = 0;
                            int projectAttendance = 0;
                            if (!string.IsNullOrEmpty(values[4]))
                            {
                                start_Date = DateTime.ParseExact(values[4], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                StartDate = start_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                if (start_Date > CovidStartDate)
                                {
                                    IsCalculationNull = true;
                                }
                            }
                            else
                            {
                                StartDate = "null";
                                IsCalculationNull = true;
                            }

                            if (!string.IsNullOrEmpty(values[6]))
                            {
                                DateTime FirstFundedDate = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                if (CheckBeforeDate < start_Date) //If start date is not before 01-07-2016
                                {
                                    start_Date = FirstFundedDate;
                                }

                            }

                            if (!string.IsNullOrEmpty(values[5]))
                            {
                                end_Date = DateTime.ParseExact(values[5], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                EndDate = end_Date.ToString("yyyy-MM-dd HH:mm:ss");
                                if (end_Date > CovidStartDate)
                                {
                                    end_Date = new DateTime(2020, 4, 1);
                                }
                                Meal_end_Date = DateTime.ParseExact(values[6], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                            }
                            else
                            {
                                EndDate = "null";
                                end_Date = new DateTime(2020, 4, 1);
                                Meal_end_Date = todays_dateTime;
                            }
                            if (!IsCalculationNull)
                            {
                                int length_of_sponsorship = (int)Math.Floor((end_Date - start_Date).TotalDays / 30.4375);
                                int Meal_length_of_sponsorship = (int)Math.Floor((Meal_end_Date - start_Date).TotalDays / 30.4375);
                                if (Program_Delivery_type == "Home Based Sponsorship" || Program_Delivery_type == "Home Based")
                                {

                                    Hours_spent_at_project = (10 * length_of_sponsorship) / 12;
                                    NutritionalMeal = Convert.ToInt32(((decimal) Meal_length_of_sponsorship / 12) * 10);
                                    medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12));
                                }
                                else
                                {
                                    Hours_spent_at_project = (44 * 4 * length_of_sponsorship) / 12;
                                    NutritionalMeal = Convert.ToInt32(((decimal) Meal_length_of_sponsorship / 12) * 44);
                                    medicalCheckups = Convert.ToInt32(((decimal) length_of_sponsorship / 12));
                                }
                                projectAttendance = (int)Math.Floor(14 * ((end_Date - start_Date).TotalDays / 30.4375));
                            }
                            string singleRow = Org_ID + ",'" + NeedKey + "','" + projectAttendance + "','" + NutritionalMeal + "','" + medicalCheckups + "'," + Commitment_Id;
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ORGANISATION_ID= Values(ORGANISATION_ID),NEED_KEY= Values(NEED_KEY),HOURS_SPENT= Values(HOURS_SPENT),NUTRITIONS_MEALS= Values(NUTRITIONS_MEALS),MEDICAL_CHECKUPS= Values(MEDICAL_CHECKUPS),COMMITMENT_ID=Values(COMMITMENT_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " HNM Record in Sponsorship Details table Inserted successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdateSponsorship_HNM:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public List<string> GetOrgIDList()
        {
            List<string> OrgIds = new List<string>();
            try
            {
                string Query = "SELECT ORGANISATION_ID FROM ORGANISATION";

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    int Counter = 0;
                    while (Reader.Read())
                    {
                        OrgIds.Add(Reader["ORGANISATION_ID"].ToString());
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetOrgIDList" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return OrgIds;
        }

        public void UpdateSponsorship_HNMOld(long OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Active Sponsorship Data",
            };
            try
            {
                string Query = "SELECT CM.Organisation.ID,CM.Need.NeedKey,CM.StartDate,CM.EndDate,CM.ID FROM SCBS_CM.Commitment CM  where CM.Organisation.ID =" + OrgID;
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Updating HNM " + count + " Record in SPONSORSHIP_DETAILS_30082021");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `SPONSORSHIP_DETAILS_30082021`(`ORGANISATION_ID`, `NEED_KEY`,`HOURS_SPENT`,`NUTRITIONS_MEALS`,`MEDICAL_CHECKUPS`,`COMMITMENT_ID`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Org_ID = values[0];
                            string NeedKey = !string.IsNullOrEmpty(values[1]) ? values[1] : "null";
                            string StartDate = "";
                            string EndDate = "";

                            DateTime start_Date = new DateTime();
                            DateTime end_Date = new DateTime();
                            if (!string.IsNullOrEmpty(values[2]))
                            {
                                start_Date = DateTime.ParseExact(values[2], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                StartDate = start_Date.ToString("yyyy-MM-dd HH:mm:ss");
                            }
                            else
                            {
                                StartDate = "null";
                            }
                            if (!string.IsNullOrEmpty(values[3]))
                            {
                                end_Date = DateTime.ParseExact(values[3], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                                EndDate = end_Date.ToString("yyyy-MM-dd HH:mm:ss");
                            }
                            else
                            {
                                EndDate = "null";
                            }

                            if (end_Date != null)
                            {
                                end_Date = DateTime.Now;
                            }
                            string CommitmentID = values[4];
                            int Hours_spent_at_project = (int)Math.Floor((end_Date - start_Date).TotalDays / 30);
                            int projectAttendance = (14 * Hours_spent_at_project);
                            int medicalCheckups = (Hours_spent_at_project / 12);
                            int NutritionalMeal = Hours_spent_at_project * (11 / 3);

                            string singleRow = Org_ID + ",'" + NeedKey + "','" + projectAttendance + "','" + NutritionalMeal + "','" + medicalCheckups + "'," + CommitmentID;

                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE ORGANISATION_ID= Values(ORGANISATION_ID),NEED_KEY= Values(NEED_KEY),HOURS_SPENT= Values(HOURS_SPENT),NUTRITIONS_MEALS= Values(NUTRITIONS_MEALS),MEDICAL_CHECKUPS= Values(MEDICAL_CHECKUPS),COMMITMENT_ID=Values(COMMITMENT_ID)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                        }
                        appLogger.Info(count + " HNM Record in Org sponsorship table updated successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdateSponsorship_HNM:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdatePPT_TypeOfAllOrg(long OrgID)
        {
            try
            {
                if (OrgID != 0)
                {
                    appLogger.Info("Updating PPT Type status OrgId: " + OrgID);
                    string Country_flag = GetPPTCountryStatusOfOrg(OrgID.ToString(), "");// PPT_TYPE
                    UpdateOrgPPT_Type(Country_flag, OrgID.ToString(), "");
                    // SyncOrganisationData(Convert.ToInt32(OrgID));
                }
                else
                {
                    List<string> OrgIdsList = GetOrgIDList();
                    if (OrgIdsList.Count > 0)
                    {
                        appLogger.Info(OrgIdsList.Count + " Total Org record found to Update PPT_Type");
                        foreach (string OrgId in OrgIdsList)
                        {
                            string Country_flag = GetPPTCountryStatusOfOrg(OrgId, "");// PPT_TYPE
                            UpdateOrgPPT_Type(Country_flag, OrgId, "");
                            //SyncOrganisationData(Convert.ToInt32(OrgId));
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdatePPT_TypeOfAllOrg:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdatePPT_TypeOfEvent(long EventID)
        {
            try
            {
                if (EventID != 0)
                {
                    appLogger.Info("Updating PPT Type status EventID : " + EventID);
                    string Country_flag = GetPPTCountryStatusOfOrg("", EventID.ToString());// PPT_TYPE
                    UpdateOrgPPT_Type(Country_flag, "", EventID.ToString());
                    // SyncOrganisationData(Convert.ToInt32(OrgID));
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdatePPT_TypeOfEvent : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdateOrgPPT_Type(string ppt_type, string OrgId, string EventId)
        {
            appLogger.Info("Updating ppt_type: " + ppt_type + " for OrgID: " + OrgId);
            try
            {
                if (!string.IsNullOrEmpty(OrgId) && !string.IsNullOrEmpty(ppt_type)) {
                    string Query = "UPDATE ORGANISATION SET PPT_TYPE = '" + ppt_type + "' WHERE ORGANISATION_ID = " + OrgId;

                    using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        conn.Open();
                        MySqlCommand cmd = new MySqlCommand(Query, conn);
                        cmd.ExecuteNonQuery();
                        appLogger.Info("PPT_TYPE = '" + ppt_type + "' updated for OrgID: " + OrgId);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateOrgPPT_Type: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public void SyncMyData(long OrgId)
        {
            List<string> commitmentIds = new List<string>();
            commitmentIds = GetOrgOnlyLatestCommitmentsIds(OrgId);
            if (commitmentIds != null && commitmentIds.Count > 0)
            {
                SyncFinancialDetailsForCS(commitmentIds, OrgId);
            }
            else
            {
                appLogger.Info("No commitment records found from OrgId: " + OrgId);
            }
        }

        public List<string> GetSupporterGroupIdsFromCommIds(List<string> commitmentIds)
        {
            List<string> SupporterGroupIds = new List<string>();
            appLogger.Info("GetSupporterGroupIdsFromCommIds started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch supgrp data";
                string query = "SELECT CM.SupporterGroup FROM SCBS_CM.Commitment CM WHERE CM.ID IN (" + string.Join(",", commitmentIds) + ")";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            SupporterGroupIds.Add(data);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterGroupIdsFromCommIds: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetSupporterGroupIdsFromCommIds ended...");
            return SupporterGroupIds;
        }

        public List<string> GetSupporterGroupIdsfromSupporterId(string SupporterGroupId)
        {
            List<string> SupporterGroupIds = new List<string>();
            appLogger.Info("SupporterGroupId : " + SupporterGroupId + " GetSupporterGroupIdsfromSupporterId started...");
            try
            {
                string Supporter_Group_BBID = "";
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch commitments data";
                string query = "SELECT SCBS_SUP.SupporterGroupLinks.SupporterGroupID.BlackBaudConstituentId,  SCBS_SUP.SupporterGroupLinks.SupporterID.customFields.c.blackbaudid, SCBS_SUP.SupporterGroupLinks.SupporterID FROM SCBS_SUP.SupporterGroupLinks WHERE SCBS_SUP.SupporterGroupLinks.SupporterGroupID = " + SupporterGroupId; // 67212
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            Supporter_Group_BBID = !string.IsNullOrEmpty(values[0]) ? values[0] : "";
                            SupporterGroupIds.Add(values[1]);
                        }
                        SupporterGroupIds.Add(Supporter_Group_BBID);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterGroupIdsfromSupporterId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("SupporterGroupId : " + SupporterGroupId + " GetSupporterGroupIdsfromSupporterId ended...");
            return SupporterGroupIds;
        }

        public void SyncFinancialDetailsForCS(List<string> commitmentIds, long OrgID)
        {
            ClientInfoHeader info = new ClientInfoHeader
            {
                AppID = "Get Financial Details Data",
            };
            try
            {
                string Query = "SELECT CM.ID, CM.Organisation.ID, CM.Need.NeedKey, CM.SupporterGroup, CM.SupporterGroup.Type, CM.SupporterGroup.BlackbaudID AS SG_BBID, CM.SupporterGroup.PrioritySupporterId.customFields.c.blackbaudid AS PRIMARY_BBID FROM SCBS_CM.Commitment CM where CM.ID IN (" + string.Join(",", commitmentIds) + ")";
                //string Query = "SELECT CM.ID, CM.Organisation.ID, CM.Need.NeedKey, CM.SupporterGroup, CM.SupporterGroup.Type, CM.SupporterGroup.BlackbaudID AS SG_BBID, CM.SupporterGroup.PrioritySupporterId.customFields.c.blackbaudid AS PRIMARY_BBID FROM SCBS_CM.Commitment CM where CM.ID = " + commitmentIds;
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;
                CSVTableSet result;
                int count = 0;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                count = result.CSVTables[0].Rows.Count();
                if (count > 0)
                {
                    appLogger.Info("Inserting " + count + " Record in Financial Details table");
                    StringBuilder sCommand = new StringBuilder("INSERT INTO `FINANCIAL_DETAILS` (`COMMITMENT_ID`, `ORGANISATION_ID`, `NEEDKEY`, `SUPPORTER_GROUP_ID`, `SUPPORTER_TYPE`, `BBID`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`) VALUES ");
                    using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                    {
                        List<string> Rows = new List<string>();
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            string Commitment_Id = values[0];
                            string Org_ID = !string.IsNullOrEmpty(values[1]) ? values[1] : OrgID.ToString();
                            string NeedKey = !string.IsNullOrEmpty(values[2]) ? values[2] : "";
                            string Supporter_Group_Id = !string.IsNullOrEmpty(values[3]) ? values[3] : "";
                            string Supporter_type = !string.IsNullOrEmpty(values[4]) ? values[4] : "";
                            string Supporter_type_name;
                            switch (Supporter_type)
                            {
                                case "2":
                                    Supporter_type_name = "Individual";
                                    break;
                                case "3":
                                    Supporter_type_name = "Couple";
                                    break;
                                case "4":
                                    Supporter_type_name = "Family";
                                    break;
                                case "5":
                                    Supporter_type_name = "Group";
                                    break;
                                case "7":
                                    Supporter_type_name = "Organisation";
                                    break;
                                default:
                                    Supporter_type_name = "";
                                    break;
                            }
                            string Supporter_Group_BBID = !string.IsNullOrEmpty(values[5]) ? values[5] : "";
                            string Primary_BBID = !string.IsNullOrEmpty(values[6]) ? values[6] : "";
                            List<string> SupGrpIds = new List<string>();
                            SupGrpIds = GetSupporterGroupIdsfromSupporterId(Supporter_Group_Id);
                            string Secondary_BBID = string.Join(",", SupGrpIds);

                            /*! Fetch Data from BB Start */

                            // DateTime.Now.ToString("yyyy-MM-dd")
                            string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_LY = "0";
                            string No_of_Gifts_in_Last_Year = "0";
                            if (Supporter_type == "2") // Individual Supporter
                            {
                                if (Primary_BBID != null)
                                {
                                    Total_of_financial_supp_in_LY = FetchFinancialSupport(Primary_BBID, start_date_LY, end_date_LY);
                                    No_of_Gifts_in_Last_Year = FetchNumberOfGiftsGiven(Primary_BBID, start_date_LY, end_date_LY);
                                }
                                else
                                {
                                    Total_of_financial_supp_in_LY = "0";
                                    No_of_Gifts_in_Last_Year = "0";
                                }
                            }
                            else
                            {
                                Decimal Financial_supp_in_LY = 0;
                                int Gifts_in_LY = 0;
                                if (SupGrpIds.Count() > 0)
                                {
                                    foreach (string SupGrpId in SupGrpIds)
                                    {
                                        if (!string.IsNullOrEmpty(SupGrpId))
                                        {
                                            Financial_supp_in_LY += Convert.ToDecimal(FetchFinancialSupport(SupGrpId, start_date_LY, end_date_LY));
                                            Gifts_in_LY += Convert.ToInt32(FetchNumberOfGiftsGiven(SupGrpId, start_date_LY, end_date_LY));
                                        }
                                    }
                                }
                                Total_of_financial_supp_in_LY = Convert.ToString(Financial_supp_in_LY);
                                No_of_Gifts_in_Last_Year = Convert.ToString(Gifts_in_LY);
                            }



                            string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
                            string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string Total_of_financial_supp_in_PY = "0";
                            string No_of_Gifts_in_PY = "0";
                            if (Supporter_type == "2") // Individual Supporter
                            {
                                if (Primary_BBID != null)
                                {
                                    Total_of_financial_supp_in_PY = FetchFinancialSupport(Primary_BBID, start_date_PY, end_date_PY);
                                    No_of_Gifts_in_PY = FetchNumberOfGiftsGiven(Primary_BBID, start_date_PY, end_date_PY);
                                }
                                else
                                {
                                    Total_of_financial_supp_in_PY = "0";
                                    No_of_Gifts_in_PY = "0";
                                }
                            }
                            else
                            {
                                Decimal Financial_supp_in_PY = 0;
                                int Gifts_in_PY = 0;
                                if (SupGrpIds.Count() > 0)
                                {
                                    foreach (string SupGrpId in SupGrpIds)
                                    {
                                        if (!string.IsNullOrEmpty(SupGrpId))
                                        {
                                            Financial_supp_in_PY += Convert.ToDecimal(FetchFinancialSupport(SupGrpId, start_date_PY, end_date_PY));
                                            Gifts_in_PY += Convert.ToInt32(FetchNumberOfGiftsGiven(SupGrpId, start_date_PY, end_date_PY));
                                        }
                                    }
                                }
                                Total_of_financial_supp_in_PY = Convert.ToString(Financial_supp_in_PY);
                                No_of_Gifts_in_PY = Convert.ToString(Gifts_in_PY);
                            }

                            /*! Fetch Data from BB End */

                            string singleRow = "'" + Commitment_Id + "', '" + Org_ID + "', '" + NeedKey + "', '" + Supporter_Group_Id + "', '" + Supporter_type_name + "', '" + Secondary_BBID + "', '" + Total_of_financial_supp_in_LY + "', '" + No_of_Gifts_in_Last_Year + "', '" + Total_of_financial_supp_in_PY + "', '" + No_of_Gifts_in_PY + "'";
                            Rows.Add(string.Format("({0})", singleRow));
                        }
                        sCommand.Append(string.Join(",", Rows));

                        sCommand.Append(" ON DUPLICATE KEY UPDATE COMMITMENT_ID = Values(COMMITMENT_ID), ORGANISATION_ID = Values(ORGANISATION_ID), NEEDKEY = Values(NEEDKEY), SUPPORTER_GROUP_ID = Values(SUPPORTER_GROUP_ID), SUPPORTER_TYPE = Values(SUPPORTER_TYPE), SG_BBID = Values(SG_BBID), PRIMARY_BBID = Values(PRIMARY_BBID), SECONDARY_BBID = Values(SECONDARY_BBID), TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR), NO_OF_GIFTS_IN_LAST_YEAR = Values(NO_OF_GIFTS_IN_LAST_YEAR), TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = Values(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR), NO_OF_GIFTS_IN_PREVIOUS_YEAR = Values(NO_OF_GIFTS_IN_PREVIOUS_YEAR)");
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Inserted query Ended. ");
                        }
                        appLogger.Info(count + " Record in Financial Details table Inserted successfully");
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting SyncFinancialDetailsForCS : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public List<string> GetCommitmentsIdsFromRNForFinancialDetails(long OrgId, long EventId)
        {
            List<string> CommitmentIds = new List<string>();
            if (EventId != 0)
            {
                appLogger.Info("EventID :" + EventId + " GetCommitmentsIdsFromRNForFinancialDetails started...");
            }
            else
            {
                appLogger.Info("OrgLookupID :" + OrgId + " GetCommitmentsIdsFromRNForFinancialDetails started...");
            }
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch commitments data";
                //string query = "SELECT MAX(CM.ID) FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.StartDate IS NOT NULL AND (CM.Organisation.ID = " + OrgId + " OR CM.LinkedToPartnership = " + OrgId + ")  GROUP BY CM.Need.NeedKey";
                string query = "";
                if (EventId != 0)
                {
                    query = "SELECT CM.ID FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.FirstFundedDate IS NOT NULL AND CM.Event.ID = " + EventId;
                }
                else
                {
                    query = "SELECT CM.ID FROM SCBS_CM.Commitment CM where CM.SponsorshipAct = 1169 AND CM.FirstFundedDate IS NOT NULL AND (CM.Organisation.ID = " + OrgId + " OR CM.LinkedToPartnership = " + OrgId + ")";
                }
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string data in result.CSVTables[0].Rows)
                        {
                            CommitmentIds.Add(data);
                        }
                    }
                    else
                    {
                        if (EventId != 0)
                        {
                            appLogger.Info("No active commitment found with given EventID: " + EventId);
                        }
                        else
                        {
                            appLogger.Info("No active commitment found with given OrgID: " + OrgId);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetCommitmentsIdsFromRNForFinancialDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetCommitmentsIdsFromRNForFinancialDetails ended...");
            return CommitmentIds;
        }

        public List<FinancialDetails> GetFinancialDetailsFromDB(long OrgID, long EventID)
        {
            appLogger.Info("GetFinancialDetailsFromDB Process Started.");
            List<FinancialDetails> fObjlist = new List<FinancialDetails>();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "";
                if (EventID != 0)
                {
                    query = "SELECT * FROM `FINANCIAL_DETAILS` WHERE EVENT_ID = " + EventID;
                }
                else
                {
                    query = "SELECT * FROM `FINANCIAL_DETAILS` WHERE ORGANISATION_ID = " + OrgID;// + " OR LINKED_TO_PARTNERSHIP="+ OrgID;
                }

                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    FinancialDetails fObj = new FinancialDetails();
                    fObj.commitment_id = reader["COMMITMENT_ID"] != null ? reader["COMMITMENT_ID"].ToString() : "";
                    fObj.organisation_id = reader["ORGANISATION_ID"] != null ? reader["ORGANISATION_ID"].ToString() : "";
                    fObj.needkey = reader["NEEDKEY"] != null ? reader["NEEDKEY"].ToString() : "";
                    fObj.supporter_group_id = reader["SUPPORTER_GROUP_ID"] != null ? reader["SUPPORTER_GROUP_ID"].ToString() : "";
                    fObj.supporter_type = reader["SUPPORTER_TYPE"] != null ? reader["SUPPORTER_TYPE"].ToString() : "";
                    fObj.bbid = reader["BBID"] != null ? reader["BBID"].ToString() : "";
                    fObj.total_of_financial_support_in_last_year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"] != null ? reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"].ToString() : "";
                    fObj.no_of_gifts_in_last_year = reader["NO_OF_GIFTS_IN_LAST_YEAR"] != null ? reader["NO_OF_GIFTS_IN_LAST_YEAR"].ToString() : "";
                    fObj.total_of_financial_support_in_previous_year = reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"] != null ? reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"].ToString() : "";
                    fObj.no_of_gifts_in_previous_year = reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"] != null ? reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"].ToString() : "";
                    fObj.last_updated_time = reader["LAST_UPDATED_TIME"] != null ? reader["LAST_UPDATED_TIME"].ToString() : "";
                    fObjlist.Add(fObj);
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetFinancialDetailsFromDB : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("GetFinancialDetailsFromDB Process Ended.");
            return fObjlist;
        }

        public void UpdateFinancialDetailsInDb(FinancialDetails fObj)
        {
            appLogger.Info("UpdateFinancialDetailsInDb with Data:" + SimpleJson.SerializeObject(fObj));
            try
            {
                string BBIDFilter = string.IsNullOrEmpty(fObj.bbid) ? " BBID IS NULL " : "BBID ='" + fObj.bbid + "'";
                string Query = "UPDATE FINANCIAL_DETAILS SET COMMITMENT_ID = " + fObj.commitment_id + ",ORGANISATION_ID = '" + fObj.organisation_id + "',EVENT_ID = '" + fObj.event_id + "', NEEDKEY = '" + fObj.needkey + "',SUPPORTER_GROUP_ID = '" + fObj.supporter_group_id + "',SUPPORTER_TYPE = '" + fObj.supporter_type + "',BBID = '" + fObj.bbid + "',TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = '" + fObj.total_of_financial_support_in_last_year + "',NO_OF_GIFTS_IN_LAST_YEAR = '" + fObj.no_of_gifts_in_last_year + "',TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = '" + fObj.total_of_financial_support_in_previous_year + "',NO_OF_GIFTS_IN_PREVIOUS_YEAR = '" + fObj.no_of_gifts_in_previous_year + "' WHERE COMMITMENT_ID=" + fObj.commitment_id + " AND " + BBIDFilter;

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                    appLogger.Info("Finantial Data updated in DB with CommitmentId:" + fObj.commitment_id + " AND BBID: " + fObj.bbid);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateFinancialDetailsInDb: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public List<FinancialDetails> GetSupporterGroupLinksData(List<string> SrpGrpIds)
        {
            List<FinancialDetails> FDataList = new List<FinancialDetails>();
            appLogger.Info("GetSupporterGroupLinksData started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch commitments data";
                string query = "SELECT SCBS_SUP.SupporterGroupLinks.SupporterID.customFields.c.blackbaudid, SCBS_SUP.SupporterGroupLinks.SupporterID,SCBS_SUP.SupporterGroupLinks.SupporterGroupID.Type.lookupname,SCBS_SUP.SupporterGroupLinks.SupporterGroupID FROM SCBS_SUP.SupporterGroupLinks WHERE SCBS_SUP.SupporterGroupLinks.SupporterGroupID IN (" + string.Join(",", SrpGrpIds) + ")";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            FinancialDetails FObj = new FinancialDetails();
                            string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
                            string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
                            string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                            string[] values = row.Replace("'", "").Split('^');
                            FObj.bbid = values[0];
                            FObj.supporterid = values[1];
                            FObj.supporter_type = values[2];
                            FObj.supporter_group_id = values[3];
                            /*
                            FObj.total_of_financial_support_in_last_year = FetchFinancialSupport(FObj.bbid, start_date_LY, end_date_LY);
                            FObj.no_of_gifts_in_last_year = FetchNumberOfGiftsGiven(FObj.bbid, start_date_LY, end_date_LY);
                            FObj.total_of_financial_support_in_previous_year = FetchFinancialSupport(FObj.bbid, start_date_PY, end_date_PY);
                            FObj.total_of_financial_support_in_previous_year = FetchNumberOfGiftsGiven(FObj.bbid, start_date_PY, end_date_PY);
                            */
                            FDataList.Add(FObj);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterGroupIdsfromSupporterId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetSupporterGroupLinksData ended...");
            return FDataList;
        }

        public List<FinancialDetails> GetCommitmentData(List<string> commitmentIds, long OrgID, long EventID)
        {
            List<FinancialDetails> FDataList = new List<FinancialDetails>();
            string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
            string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
            string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
            string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");

            appLogger.Info("GetSupporterGroupLinksData started...");
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch commitments data";
                string Query = "SELECT CM.ID, CM.Organisation.ID, CM.Need.NeedKey, CM.SupporterGroup, CM.SupporterGroup.Type.lookupname, CM.SupporterGroup.BlackBaudConstituentId AS SG_BBID, CM.Event.ID FROM SCBS_CM.Commitment CM where CM.ID IN (" + string.Join(",", commitmentIds) + ")";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            FinancialDetails FObj = new FinancialDetails();
                            string[] values = row.Replace("'", "").Split('^');
                            FObj.commitment_id = values[0];
                            FObj.organisation_id = !string.IsNullOrEmpty(values[1]) ? values[1] : OrgID.ToString();
                            FObj.needkey = !string.IsNullOrEmpty(values[2]) ? values[2] : "";
                            FObj.supporter_group_id = !string.IsNullOrEmpty(values[3]) ? values[3] : "";
                            FObj.supporter_type = !string.IsNullOrEmpty(values[4]) ? values[4] : "";
                            FObj.bbid = !string.IsNullOrEmpty(values[5]) ? values[5] : "";
                            FObj.event_id = !string.IsNullOrEmpty(values[6]) ? values[6] : EventID.ToString();
                            /*FObj.total_of_financial_support_in_last_year += Convert.ToDecimal(FetchFinancialSupport(FObj.sup_grp_bbid, start_date_LY, end_date_LY));
                            FObj.no_of_gifts_in_last_year += Convert.ToInt32(FetchNumberOfGiftsGiven(FObj.sup_grp_bbid, start_date_LY, end_date_LY));
                            FObj.no_of_gifts_in_previous_year += Convert.ToDecimal(FetchFinancialSupport(FObj.sup_grp_bbid, start_date_PY, end_date_PY));
                            FObj.no_of_gifts_in_previous_year += Convert.ToInt32(FetchNumberOfGiftsGiven(FObj.sup_grp_bbid, start_date_PY, end_date_PY));
                            */
                            FDataList.Add(FObj);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterGroupIdsfromSupporterId: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("GetSupporterGroupLinksData ended...");
            return FDataList;
        }

        public void SyncFinancialData(List<FinancialDetails> fObjData, long OrgId, long EventId)
        {
            appLogger.Info("SyncFinancialData started...");

            List<FinancialDetails> AllDBRows = GetFinancialDetailsFromDB(OrgId, EventId);

            try
            {
                appLogger.Info("Inserting " + fObjData.Count() + " Record in Financial Details table");
                StringBuilder sCommand = new StringBuilder("INSERT INTO `FINANCIAL_DETAILS` (`COMMITMENT_ID`, `ORGANISATION_ID`, `EVENT_ID`, `NEEDKEY`, `SUPPORTER_GROUP_ID`, `SUPPORTER_TYPE`, `BBID`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR`, `NO_OF_GIFTS_IN_LAST_YEAR`, `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR`, `NO_OF_GIFTS_IN_PREVIOUS_YEAR`) VALUES ");

                using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    List<string> Rows = new List<string>();
                    foreach (FinancialDetails row in fObjData)
                    {
                        if (AllDBRows.Any(i => i.bbid == row.bbid && i.commitment_id == row.commitment_id))
                        {
                            UpdateFinancialDetailsInDb(row);// upsert in database
                            continue;
                        }

                        string singleRow = "'" + row.commitment_id + "', '" + row.organisation_id + "', '" + row.event_id + "', '" + row.needkey + "', '" + row.supporter_group_id + "', '" + row.supporter_type + "', '" + row.bbid + "', '" + row.total_of_financial_support_in_last_year + "', '" + row.no_of_gifts_in_last_year + "', '" + row.total_of_financial_support_in_previous_year + "', '" + row.no_of_gifts_in_previous_year + "'";
                        Rows.Add(string.Format("({0})", singleRow));
                    }
                    if (Rows.Count > 0)
                    {
                        sCommand.Append(string.Join(",", Rows));
                        sCommand.Replace("'null'", "null");
                        sCommand.Append(";");

                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Inserted query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Inserted query Ended. ");
                        }
                        appLogger.Info(fObjData.Count() + " Record in Financial Details table Inserted successfully");
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in SyncFinancialData: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("SyncFinancialData ended...");
        }

        public void FinacialDataInsertMain(long OrgId, long EventId)
        {
            try
            {
                List<string> commitmentIds = new List<string>();
                commitmentIds = GetCommitmentsIdsFromRNForFinancialDetails(OrgId, EventId);
                //List<string> commitmentIds = new List<string>() { "22777", "23228", "24089" };

                if (commitmentIds != null && commitmentIds.Count > 0)
                {
                    List<string> SupporterGroupIds = GetSupporterGroupIdsFromCommIds(commitmentIds);
                    List<FinancialDetails> LinkedSupportersList = GetSupporterGroupLinksData(SupporterGroupIds);
                    List<FinancialDetails> SupGrpDataList = GetCommitmentData(commitmentIds, OrgId, EventId);

                    foreach (FinancialDetails row in SupGrpDataList)
                    {
                        List<FinancialDetails> SupporterLists = LinkedSupportersList.FindAll(i => i.supporter_group_id == row.supporter_group_id);
                        foreach (FinancialDetails innerRow in SupporterLists)
                        {
                            innerRow.commitment_id = row.commitment_id;
                            innerRow.needkey = row.needkey;
                            innerRow.organisation_id = row.organisation_id;
                        }
                    }
                    SupGrpDataList.AddRange(LinkedSupportersList);
                    List<FinancialDetails> CommitmentDataList = new List<FinancialDetails>();
                    CommitmentDataList.AddRange(SupGrpDataList);
                    if (CommitmentDataList.Count > 0)
                    {
                        SyncFinancialData(CommitmentDataList, OrgId, EventId);
                        //UpdateFinanceBBDataInDB(OrgId);
                        SyncAllFinancialDetails(OrgId, EventId);
                    }
                }
                else
                {
                    if (EventId != 0)
                    {
                        appLogger.Info("No commitment records found from EventId: " + EventId);
                    }
                    else
                    {
                        appLogger.Info("No commitment records found from OrgId: " + OrgId);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FinacialDataInsertMain:" + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }

        }

        public void UpdateFinanceBBDataInDB(long OrgID)
        {
            appLogger.Info("UpdateFinanceBBDataInDB Started...");
            try
            {
                string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd");
                string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd");
                string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd");
                List<FinancialDetails> FinanceRecords = GetFinancialDetailsFromDB(OrgID, 0);
                foreach (FinancialDetails row in FinanceRecords)
                {
                    row.total_of_financial_support_in_last_year = FetchFinancialSupport(row.bbid, start_date_LY, end_date_LY);
                    row.no_of_gifts_in_last_year = FetchNumberOfGiftsGiven(row.bbid, start_date_LY, end_date_LY);
                    row.total_of_financial_support_in_previous_year = FetchFinancialSupport(row.bbid, start_date_PY, end_date_PY);
                    row.no_of_gifts_in_previous_year = FetchNumberOfGiftsGiven(row.bbid, start_date_PY, end_date_PY);
                    UpdateBBFinancialDetailsInDb(row);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateFinanceBBDataInDB: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            appLogger.Info("UpdateFinanceBBDataInDB Ended...");
        }

        public void UpdateBBFinancialDetailsInDb(FinancialDetails fObj)
        {
            appLogger.Info("UpdateBBFinancialDetailsInDb with Data:" + SimpleJson.SerializeObject(fObj));
            try
            {
                string BBIDFilter = string.IsNullOrEmpty(fObj.bbid) ? " BBID IS NULL " : "BBID ='" + fObj.bbid + "'";
                string Query = "UPDATE FINANCIAL_DETAILS SET TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR = '" + fObj.total_of_financial_support_in_last_year + "',NO_OF_GIFTS_IN_LAST_YEAR = '" + fObj.no_of_gifts_in_last_year + "',TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR = '" + fObj.total_of_financial_support_in_previous_year + "',NO_OF_GIFTS_IN_PREVIOUS_YEAR = '" + fObj.no_of_gifts_in_previous_year + "' WHERE COMMITMENT_ID=" + fObj.commitment_id + " AND " + BBIDFilter;

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                    appLogger.Info("BB Finantial Data updated in DB with CommitmentId:" + fObj.commitment_id + " AND BBID: " + fObj.bbid);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateBBFinancialDetailsInDb: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public OrgData GetFinancialSupportAndNoOfGiftFromFinancialDetailsTable(long OrgID, long EventID)
        {
            if (EventID != 0)
            {
                appLogger.Info("Get Financial Support And No Of Gift SUM Based On EventId (" + EventID + ") From FINANCIAL_DETAILS TABLE process started.");
            }
            else
            {
                appLogger.Info("Get Financial Support And No Of Gift SUM Based On OrgId (" + OrgID + ") From FINANCIAL_DETAILS TABLE process started.");
            }
            OrgData orgData = new OrgData();
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "";
                if (EventID != 0)
                {
                    query = "SELECT SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM (SELECT TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, NO_OF_GIFTS_IN_LAST_YEAR, TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM `FINANCIAL_DETAILS` WHERE EVENT_ID = " + EventID + " GROUP BY BBID) src";
                }
                else
                {
                    query = "SELECT SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, SUM(NO_OF_GIFTS_IN_LAST_YEAR) AS NO_OF_GIFTS_IN_LAST_YEAR, SUM(TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR) AS TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, SUM(NO_OF_GIFTS_IN_PREVIOUS_YEAR) AS NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM (SELECT TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR, NO_OF_GIFTS_IN_LAST_YEAR, TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR, NO_OF_GIFTS_IN_PREVIOUS_YEAR FROM `FINANCIAL_DETAILS` WHERE ORGANISATION_ID = " + OrgID + " GROUP BY BBID) src";
                }
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    orgData.Total_Of_Financial_Supp_In_Last_Year += !string.IsNullOrEmpty(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"].ToString()) ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR"]) : 0;
                    orgData.No_Of_Gifts_In_Last_Year += !string.IsNullOrEmpty(reader["NO_OF_GIFTS_IN_LAST_YEAR"].ToString()) ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_LAST_YEAR"]) : 0;
                    orgData.Total_Of_Financial_Supp_In_Previous_Year += !string.IsNullOrEmpty(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"].ToString()) ? Convert.ToInt32(reader["TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR"]) : 0;
                    orgData.No_Of_Gifts_In_Previous_Year += !string.IsNullOrEmpty(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"].ToString()) ? Convert.ToInt32(reader["NO_OF_GIFTS_IN_PREVIOUS_YEAR"]) : 0;
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetFinancialSupportAndNoOfGiftBasedOnOrgId for  : (" + (OrgID != 0 ? +OrgID : EventID) + ") " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            if (EventID != 0)
            {
                appLogger.Info("Get Financial Support And No Of Gift SUM Based On EventID (" + EventID + ") From FINANCIAL_DETAILS TABLE process ended.");
            }
            else
            {
                appLogger.Info("Get Financial Support And No Of Gift SUM Based On OrgId (" + OrgID + ") From FINANCIAL_DETAILS TABLE process ended.");
            }
            return orgData;
        }

        public void UpdateFinancialSupportAndNoOfGiftInOrgTable(long OrgID, long EventID)
        {
            appLogger.Info("UpdateFinancialSupportAndNoOfGiftInOrgTable Process Started.");
            try
            {
                OrgData OrgObj2 = new OrgData();
                OrgObj2 = GetFinancialSupportAndNoOfGiftFromFinancialDetailsTable(OrgID, EventID);
                int Total_Financial_Supp_In_Last_Year = Convert.ToInt32(OrgObj2.Total_Of_Financial_Supp_In_Last_Year);
                int Total_Financial_Supp_In_Previous_Year = Convert.ToInt32(OrgObj2.Total_Of_Financial_Supp_In_Previous_Year);
                int No_Gifts_In_Last_Year = Convert.ToInt32(OrgObj2.No_Of_Gifts_In_Last_Year);
                int No_Gifts_In_Previous_Year = Convert.ToInt32(OrgObj2.No_Of_Gifts_In_Previous_Year);
                string Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                string No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/empty_arrow.JPG";
                int Total_Change_In_Financial_Support;
                int Total_Change_In_No_Of_Gift;
                string Change_In_No_Of_Gift = "";
                string Change_In_Financial_Support = "";

                if (Total_Financial_Supp_In_Last_Year != 0 && Total_Financial_Supp_In_Previous_Year != 0)
                {
                    if (Total_Financial_Supp_In_Last_Year >= Total_Financial_Supp_In_Previous_Year) //Greater than
                    {
                        Total_Change_In_Financial_Support = (Total_Financial_Supp_In_Last_Year - Total_Financial_Supp_In_Previous_Year) * 100 / Total_Financial_Supp_In_Previous_Year;
                        if (Total_Change_In_Financial_Support != 0)
                        {
                            Financial_Support_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                            Change_In_Financial_Support = Convert.ToString(Total_Change_In_Financial_Support);
                        }
                    }
                }

                if (No_Gifts_In_Last_Year != 0 && No_Gifts_In_Previous_Year != 0)
                {
                    if (No_Gifts_In_Last_Year >= No_Gifts_In_Previous_Year) // Greater than
                    {

                        Total_Change_In_No_Of_Gift = (No_Gifts_In_Last_Year - No_Gifts_In_Previous_Year) * 100 / No_Gifts_In_Previous_Year;
                        if (Total_Change_In_No_Of_Gift != 0)
                        {
                            No_Of_Gift_Arrow_URL = "https://cukwebsite.co.uk/oneview/celebration_services/assets/up_arrow_green@2x.png"; // Up Arrow
                            Change_In_No_Of_Gift = Convert.ToString(Total_Change_In_No_Of_Gift);
                        }
                    }
                }

                string Total_Of_Financial_Supp_In_Last_Year = OrgObj2.Total_Of_Financial_Supp_In_Last_Year.ToString();
                string No_Of_Gifts_In_Last_Year = OrgObj2.No_Of_Gifts_In_Last_Year.ToString();
                string Total_Of_Financial_Supp_In_Previous_Year = OrgObj2.Total_Of_Financial_Supp_In_Previous_Year.ToString();
                string No_Of_Gifts_In_Previous_Year = OrgObj2.No_Of_Gifts_In_Previous_Year.ToString();

                string Query = "";

                if (EventID != 0)
                {
                    Query = "UPDATE EVENT SET `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR` = '" + Total_Of_Financial_Supp_In_Last_Year + "', `NO_OF_GIFTS_IN_LAST_YEAR` = '" + No_Of_Gifts_In_Last_Year + "', `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR` = '" + Total_Of_Financial_Supp_In_Previous_Year + "', `NO_OF_GIFTS_IN_PREVIOUS_YEAR` = '" + No_Of_Gifts_In_Previous_Year + "', `CHANGED_IN_FINANCIAL_SUPPORT` = '" + Change_In_Financial_Support + "', `FINANCIAL_SUPPORT_UP_DOWN_IMAGE` = '" + Financial_Support_Arrow_URL + "', `CHANGE_IN_NO_OF_GIFT` = '" + Change_In_No_Of_Gift + "', `NO_OF_GIFT_UP_DOWN_IMAGE` = '" + No_Of_Gift_Arrow_URL + "' WHERE `EVENT_ID` = " + EventID;
                }
                else
                {
                    Query = "UPDATE ORGANISATION SET `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR` = '" + Total_Of_Financial_Supp_In_Last_Year + "', `NO_OF_GIFTS_IN_LAST_YEAR` = '" + No_Of_Gifts_In_Last_Year + "', `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR` = '" + Total_Of_Financial_Supp_In_Previous_Year + "', `NO_OF_GIFTS_IN_PREVIOUS_YEAR` = '" + No_Of_Gifts_In_Previous_Year + "', `CHANGED_IN_FINANCIAL_SUPPORT` = '" + Change_In_Financial_Support + "', `FINANCIAL_SUPPORT_UP_DOWN_IMAGE` = '" + Financial_Support_Arrow_URL + "', `CHANGE_IN_NO_OF_GIFT` = '" + Change_In_No_Of_Gift + "', `NO_OF_GIFT_UP_DOWN_IMAGE` = '" + No_Of_Gift_Arrow_URL + "' WHERE `ORGANISATION_ID` = " + OrgID;
                }

                using (MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                    appLogger.Info("Update Financial Support And No Of Gift In Org Table for Org ID : " + OrgID);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateFinancialSupportAndNoOfGiftInOrgTable: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }

        public string GetBBIDFromFinancialDetailsTable(long OrgID, long EventID)
        {
            appLogger.Info("GetBBIDFromFinancialDetailsTable Process Started.");
            string BBIDs = "";
            MySqlConnection conn = new MySqlConnection(Mytcpt_pptdbConnectionString_cs);
            try
            {
                string query = "SELECT * FROM `FINANCIAL_DETAILS` ";
                if (EventID != 0)
                {
                    query += "WHERE EVENT_ID = '" + EventID + "' GROUP BY BBID";
                }
                else
                {
                    query += "WHERE ORGANISATION_ID = '" + OrgID + "' GROUP BY BBID";
                }
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    if (!string.IsNullOrEmpty(BBIDs))
                    {
                        BBIDs += reader["BBID"] != null ? "," + reader["BBID"].ToString() : "";
                    }
                    else
                    {
                        BBIDs += reader["BBID"] != null ? reader["BBID"].ToString() : "";
                    }
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetBBIDFromFinancialDetailsTable : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("GetBBIDFromFinancialDetailsTable Process Ended.");
            return BBIDs;
        }

        public void SyncAllFinancialDetails(long OrgID, long EventID)
        {
            try
            {
                string AllBBIds = GetBBIDFromFinancialDetailsTable(OrgID, EventID);
                string start_date_LY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd'T'HH:mm:ss.fff");
                string end_date_LY = DateTime.Now.ToString("yyyy-MM-dd'T'HH:mm:ss.fff");
                string start_date_PY = DateTime.Now.AddYears(-2).ToString("yyyy-MM-dd'T'HH:mm:ss.fff");
                string end_date_PY = DateTime.Now.AddYears(-1).ToString("yyyy-MM-dd'T'HH:mm:ss.fff");

                List<FinancialDetails> All_LY_Financial_Support = GetfinantialDataFromBBForCS(AllBBIds, start_date_LY, end_date_LY);
                UpdateLastYearFinancialSupport(All_LY_Financial_Support);

                List<FinancialDetails> All_PY_Financial_Support = GetfinantialDataFromBBForCS(AllBBIds, start_date_PY, end_date_PY);
                UpdatePreviousYearFinancialSupport(All_PY_Financial_Support);

                List<FinancialDetails> All_LY_Gifts_Given = GetNoOfGiftsGivenFromBBForCS(AllBBIds, start_date_LY, end_date_LY);
                UpdateLastYearGiftsGiven(All_LY_Gifts_Given);

                List<FinancialDetails> All_PY_Gifts_Given = GetNoOfGiftsGivenFromBBForCS(AllBBIds, start_date_PY, end_date_PY);
                UpdatePreviousYearGiftsGiven(All_PY_Gifts_Given);

            }
            catch (Exception e)
            {
                appLogger.Error("Error in SyncAllFinancialDetails : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdateLastYearFinancialSupport(List<FinancialDetails> LY_Financial_Support)
        {
            try
            {
                appLogger.Info("Starting Updating Last Year Financial Support.");
                StringBuilder sCommand = new StringBuilder("");

                using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    List<string> Rows = new List<string>();
                    int Counter = 0;
                    foreach (FinancialDetails row in LY_Financial_Support)
                    {
                        string BBID = row.bbid;
                        string financialsupportamount = row.financial_support_amount;
                        if (!string.IsNullOrEmpty(BBID))
                        {
                            string singleRow = "UPDATE `FINANCIAL_DETAILS` SET `TOTAL_OF_FINANCIAL_SUPPORT_IN_LAST_YEAR` = '" + financialsupportamount + "' WHERE `FINANCIAL_DETAILS`.`BBID` = '" + BBID + "'";
                            Rows.Add(string.Format("{0}", singleRow));
                            Counter++;
                        }

                    }

                    sCommand.Append(string.Join(";", Rows));
                    //sCommand.Replace("'null'", "null");
                    //sCommand.Append(";");
                    appLogger.Info("Query is : " + sCommand.ToString());
                    if (!string.IsNullOrEmpty(sCommand.ToString()))
                    {
                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Update query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Update query Ended. ");
                        }
                    } else
                    {
                        appLogger.Info("No data to updated empty query.");
                    }
                    appLogger.Info("Ended Updated Last Year Financial Support.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdateLastYearFinancialSupport : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdatePreviousYearFinancialSupport(List<FinancialDetails> PY_Financial_Support)
        {
            try
            {
                appLogger.Info("Starting Update Previous Year Financial Support.");
                StringBuilder sCommand = new StringBuilder("");

                using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    List<string> Rows = new List<string>();
                    int Counter = 0;
                    foreach (FinancialDetails row in PY_Financial_Support)
                    {
                        string BBID = row.bbid;
                        string financialsupportamount = row.financial_support_amount;
                        if (!string.IsNullOrEmpty(BBID))
                        {
                            string singleRow = "UPDATE `FINANCIAL_DETAILS` SET `TOTAL_OF_FINANCIAL_SUPPORT_IN_PREVIOUS_YEAR` = '" + financialsupportamount + "' WHERE `FINANCIAL_DETAILS`.`BBID` = '" + BBID + "'";
                            Rows.Add(string.Format("{0}", singleRow));
                            Counter++;
                        }
                    }

                    sCommand.Append(string.Join(";", Rows));
                    //sCommand.Replace("'null'", "null");
                    //sCommand.Append(";");
                    appLogger.Info("Query is : " + sCommand.ToString());
                    if (!string.IsNullOrEmpty(sCommand.ToString()))
                    {
                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Update query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Update query Ended. ");
                        }
                    } else
                    {
                        appLogger.Info("No data to updated empty query.");
                    }
                    appLogger.Info("Ended Update Previous Year Financial Support.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdatePreviousYearFinancialSupport : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdateLastYearGiftsGiven(List<FinancialDetails> LY_Gifts_Given)
        {
            try
            {
                appLogger.Info("Starting Update Last Year Financial Support.");
                StringBuilder sCommand = new StringBuilder("");

                using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    List<string> Rows = new List<string>();
                    int Counter = 0;
                    foreach (FinancialDetails row in LY_Gifts_Given)
                    {
                        string BBID = row.bbid;
                        string giftsupportcount = row.gift_support_count;
                        if (!string.IsNullOrEmpty(BBID))
                        {
                            string singleRow = "UPDATE `FINANCIAL_DETAILS` SET  `NO_OF_GIFTS_IN_LAST_YEAR` = '" + giftsupportcount + "' WHERE `FINANCIAL_DETAILS`.`BBID` = '" + BBID + "'";
                            Rows.Add(string.Format("{0}", singleRow));
                            Counter++;
                        }
                    }

                    sCommand.Append(string.Join(";", Rows));
                    //sCommand.Replace("'null'", "null");
                    //sCommand.Append(";");
                    appLogger.Info("Query is : " + sCommand.ToString());
                    if (!string.IsNullOrEmpty(sCommand.ToString())) {
                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Update query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            //myCmd.CommandText = sCommand.ToString();
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Update query Ended. ");
                        }
                    } else {
                        appLogger.Info("No data to updated empty query.");
                    }
                    appLogger.Info("Ended Update Last Year Financial Support.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdateLastYearFinancialSupport : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public void UpdatePreviousYearGiftsGiven(List<FinancialDetails> PY_Gifts_Given)
        {
            try
            {
                appLogger.Info("Starting Update Previous Year Gifts Given.");
                StringBuilder sCommand = new StringBuilder("");

                using (MySqlConnection mConnection = new MySqlConnection(Mytcpt_pptdbConnectionString_cs))
                {
                    List<string> Rows = new List<string>();
                    int Counter = 0;
                    foreach (FinancialDetails row in PY_Gifts_Given)
                    {
                        string BBID = row.bbid;
                        string giftsupportcount = row.gift_support_count;
                        if (!string.IsNullOrEmpty(BBID))
                        {
                            string singleRow = "UPDATE `FINANCIAL_DETAILS` SET `NO_OF_GIFTS_IN_PREVIOUS_YEAR` = '" + giftsupportcount + "' WHERE `FINANCIAL_DETAILS`.`BBID` = '" + BBID + "'";
                            Rows.Add(string.Format("{0}", singleRow));
                            Counter++;
                        }
                    }

                    sCommand.Append(string.Join(";", Rows));
                    //sCommand.Replace("'null'", "null");
                    //sCommand.Append(";");
                    appLogger.Info("Query is : " + sCommand.ToString());
                    if (!string.IsNullOrEmpty(sCommand.ToString()))
                    {
                        mConnection.Open();
                        using (MySqlCommand myCmd = new MySqlCommand(sCommand.ToString(), mConnection))
                        {
                            appLogger.Info("Executing Update query Started. ");
                            myCmd.CommandType = CommandType.Text;
                            myCmd.ExecuteNonQuery();
                            appLogger.Info("Executing Update query Ended. ");
                        }
                    } else
                    {
                        appLogger.Info("No data to updated empty query.");
                    }
                    appLogger.Info("Ended Update Previous Year Gifts Given.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getting UpdatePreviousYearGiftsGiven : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }

        public List<FinancialDetails> GetfinantialDataFromBBForCS(string LookupIds, string startdate, string enddate)
        {
            List<FinancialDetails> FDataList = new List<FinancialDetails>();
            BBTargetRepository.Model.Constant constant = new BBTargetRepository.Model.Constant();
            try
            {
                //string str = DateTime.Now.ToString("yyyy-MM-dd'T'HH:mm:ss.fff");
                //String.Join("', '", LookupIds)
                string Query = "select distinct sum([V_QUERY_REVENUE\"Revenue Splits].[AMOUNT]) as SumAmount, [V_QUERY_REVENUE\"Constituent].[LOOKUPID] as ConstituentLookupID, [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID] as [Application Details\"Base currency ID]from [dbo].[V_QUERY_REVENUE] as [V_QUERY_REVENUE]inner join [dbo].[V_QUERY_REVENUESPLIT] as [V_QUERY_REVENUE\"Revenue Splits] on [V_QUERY_REVENUE].[ID] = [V_QUERY_REVENUE\"Revenue Splits].[REVENUEID]inner join [dbo].[V_QUERY_CONSTITUENT] as [V_QUERY_REVENUE\"Constituent] on [V_QUERY_REVENUE].[CONSTITUENTID] = [V_QUERY_REVENUE\"Constituent].[ID]where [V_QUERY_REVENUE].[TRANSACTIONTYPE] = N'Payment' and [V_QUERY_REVENUE\"Constituent].[LOOKUPID] in (N'" + LookupIds.Replace(",", "', N'") + "') and /*SpecificDate*/[V_QUERY_REVENUE].[DATE] between '" + startdate + "' and '" + enddate + "' and [V_QUERY_REVENUE\"Revenue Splits].[AMOUNT] > 0 group by [V_QUERY_REVENUE\"Constituent].[LOOKUPID], [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID]";

                //string Query = "select distinct sum([V_QUERY_REVENUE\"Revenue Splits].[AMOUNT]) as SumAmount, [V_QUERY_REVENUE\"Constituent].[LOOKUPID] as ConstituentLookupID, [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID] as [Application Details\"Base currency ID] from [dbo].[V_QUERY_REVENUE] as [V_QUERY_REVENUE] inner join [dbo].[V_QUERY_REVENUESPLIT] as [V_QUERY_REVENUE\"Revenue Splits] on [V_QUERY_REVENUE].[ID] = [V_QUERY_REVENUE\"Revenue Splits].[REVENUEID] inner join [dbo].[V_QUERY_CONSTITUENT] as [V_QUERY_REVENUE\"Constituent] on [V_QUERY_REVENUE].[CONSTITUENTID] = [V_QUERY_REVENUE\"Constituent].[ID] where [V_QUERY_REVENUE].[TRANSACTIONTYPE] = N'Payment' and [V_QUERY_REVENUE\"Constituent].[LOOKUPID] in (N'8-10190526', N'8-10186876', N'8-10127470', N'8-10006495', N'8-10449342', N'8-10127778', N'8-10135586', N'8-10148184', N'8-10148186', N'8-10148187', N'8-10127470', N'8-10127778', N'8-10128213', N'8-10449341', N'8-10127778') and /*SpecificDate*/ [V_QUERY_REVENUE].[DATE] between '2020-10-27T00:00:00.000' and '2021-10-27T23:59:59.997' and [V_QUERY_REVENUE\"Revenue Splits].[AMOUNT] > 0 group by [V_QUERY_REVENUE\"Constituent].[LOOKUPID], [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID]";

                using (SqlConnection conn = new SqlConnection(constant.BB_CONNECTION_STRING))
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand(Query, conn);
                    SqlDataReader sqlData = cmd.ExecuteReader();
                    while (sqlData.Read())
                    {
                        FinancialDetails FObj = new FinancialDetails();
                        FObj.financial_support_amount = sqlData["SumAmount"].ToString();
                        FObj.bbid = sqlData["ConstituentLookupID"].ToString();
                        FDataList.Add(FObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("error in GetfinantialDataFromBBForCS : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return FDataList;
        }

        public List<FinancialDetails> GetNoOfGiftsGivenFromBBForCS(string LookupIds, string startdate, string enddate)
        {
            List<FinancialDetails> FDataList = new List<FinancialDetails>();
            BBTargetRepository.Model.Constant constant = new BBTargetRepository.Model.Constant();
            try
            {
                DateTime CurrentDt = DateTime.Now;
                DateTime LastYearDt = CurrentDt.AddYears(-1);

                //string str = DateTime.Now.ToString("yyyy-MM-dd'T'HH:mm:ss.fff");

                string Query = "select distinct count([V_QUERY_REVENUE\"Revenue Splits].[AMOUNT]) as CountAmount, [V_QUERY_REVENUE\"Constituent].[LOOKUPID] as ConstituentLookupID, [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID] as [Application Details\"Base currency ID] from [dbo].[V_QUERY_REVENUE] as [V_QUERY_REVENUE] inner join [dbo].[V_QUERY_REVENUESPLIT] as [V_QUERY_REVENUE\"Revenue Splits] on [V_QUERY_REVENUE].[ID] = [V_QUERY_REVENUE\"Revenue Splits].[REVENUEID] inner join [dbo].[V_QUERY_CONSTITUENT] as [V_QUERY_REVENUE\"Constituent] on [V_QUERY_REVENUE].[CONSTITUENTID] = [V_QUERY_REVENUE\"Constituent].[ID] inner join [dbo].[V_QUERY_DESIGNATION] as [V_QUERY_REVENUE\"Revenue Splits\"Designation] on [V_QUERY_REVENUE\"Revenue Splits].[DESIGNATIONID] = [V_QUERY_REVENUE\"Revenue Splits\"Designation].[ID] where [V_QUERY_REVENUE].[TRANSACTIONTYPE] = N'Payment' and /*SpecificDate*/ [V_QUERY_REVENUE].[DATE] between '" + startdate + "' and '" + enddate + "' and [V_QUERY_REVENUE\"Revenue Splits].[AMOUNT] > 0 and [V_QUERY_REVENUE\"Constituent].[LOOKUPID] in ('" + LookupIds.Replace(",", "','") + "') and [V_QUERY_REVENUE\"Revenue Splits\"Designation].[DESIGNATIONREPORT1CODEID] = N'68b09739-78ba-4c00-a0bb-511eacb1adcc' group by [V_QUERY_REVENUE\"Constituent].[LOOKUPID], [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID]";


                //string Query = "select distinct count([V_QUERY_REVENUE\"Revenue Splits].[AMOUNT]) as CountAmount, [V_QUERY_REVENUE\"Constituent].[LOOKUPID] as ConstituentLookupID, [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID] as [Application Details\"Base currency ID] from [dbo].[V_QUERY_REVENUE] as [V_QUERY_REVENUE] inner join [dbo].[V_QUERY_REVENUESPLIT] as [V_QUERY_REVENUE\"Revenue Splits] on [V_QUERY_REVENUE].[ID] = [V_QUERY_REVENUE\"Revenue Splits].[REVENUEID] inner join [dbo].[V_QUERY_CONSTITUENT] as [V_QUERY_REVENUE\"Constituent] on [V_QUERY_REVENUE].[CONSTITUENTID] = [V_QUERY_REVENUE\"Constituent].[ID] inner join [dbo].[V_QUERY_DESIGNATION] as [V_QUERY_REVENUE\"Revenue Splits\"Designation] on [V_QUERY_REVENUE\"Revenue Splits].[DESIGNATIONID] = [V_QUERY_REVENUE\"Revenue Splits\"Designation].[ID] where [V_QUERY_REVENUE].[TRANSACTIONTYPE] = N'Payment' and /*SpecificDate*/ [V_QUERY_REVENUE].[DATE] between '2020-08-01T00:00:00.000' and '2021-07-31T23:59:59.997' and [V_QUERY_REVENUE\"Revenue Splits].[AMOUNT] > 0 and [V_QUERY_REVENUE\"Constituent].[LOOKUPID] in (N'8-10112234', N'8-10112234') and [V_QUERY_REVENUE\"Revenue Splits\"Designation].[DESIGNATIONREPORT1CODEID] = N'68b09739-78ba-4c00-a0bb-511eacb1adcc' group by [V_QUERY_REVENUE\"Constituent].[LOOKUPID], [V_QUERY_REVENUE\"Revenue Splits].[BASECURRENCYID]";

                using (SqlConnection conn = new SqlConnection(constant.BB_CONNECTION_STRING))
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand(Query, conn);
                    SqlDataReader sqlData = cmd.ExecuteReader();
                    while (sqlData.Read())
                    {
                        FinancialDetails FObj = new FinancialDetails();
                        FObj.gift_support_count = sqlData["CountAmount"].ToString();
                        FObj.bbid = sqlData["ConstituentLookupID"].ToString();
                        FDataList.Add(FObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("error in GetNoOfGiftsGivenFromBBForCS: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return FDataList;
        }

        #endregion

        #region Cancel Sponsorship issue replicate section
        public void TransferSponserShip()
        {
            string json = "{'actionid':20101,'title':null,'firstname':'KE034700316','lastname':null,'postcode':null,'emailaddress':null,'Gender':'Female','DoNotMail':false,'Phoneno':null,'address':null,'city':null,'county':null,'RNID':null,'BBID':null,'RNSGID':null,'SGBBID':null,'NeedKey':null,'createCommitmentInBB':null,'sgname':null,'BBIDList':null,'primaryBBID':null,'CorrespondenceBBID':null,'sgtype':null,'AccountName':null,'AccountNumber':null,'SortCode':null,'Amount':0,'InstallmentFrequency':null,'PaymentMethod':null,'DDISource':null,'DDDate':null,'FirstFundedDate':null,'AdvanceNoticeSent':null,'GroupAccount':false,'Indicator':null,'ScannedDocExists':false,'GAStartDate':null,'GAMadeDate':null,'TaxPayerTitle':null,'TaxPayerFirstName':null,'TaxPayerLastName':null,'GiftAidStatus':false,'GlobalId':null,'CorresGlobalId':null,'BBCommitmentId':'sp-10073797','ChildLookUpId':'KE034700316','childPersonalName':'Shani','childName':'Shani Karisa','childGender':null,'isOrphan':'False','oldchildNeedkey':null,'childGlobalId':null,'ChildBirthDate':null,'IsSponPlus':null,'compassionoffice':null,'sefGUID':'{1098E172-B68D-9FEC-E91E-AF78B05BA237}','birthdayGiftAmount':'','christmasGiftAmount':'','AnnualBirthDate':'21-01-2022','AnnualChristmas':'21-10-2021','IsHillsongSponPlus':null,'priSupBlackbaudId':'8-10031239','supGrptype':'2'}";
            dynamic obj = JObject.Parse(json);
            string msg = "";
            string spcommitmentid = Convert.ToString(obj.BBCommitmentId);
            string DDISource = null;
            string OldNeedkey = null;
            string SrpGrpType = Convert.ToString(obj.supGrptype);
            string psBlackbaudid = Convert.ToString(obj.priSupBlackbaudId);//Primary supporter bbid
            string NewNeedkey = Convert.ToString(obj.ChildLookUpId);
            string AccountID = null;
            string lookupid = null;
            string constituentId = null;
            try
            {
                //appLogger.Info("Transfer Sponsorship Data received in BB : " + json + " at " + DateTime.Now);
                //Console.WriteLine("Transfer Sponsorship Data received in BB : " + json + " at " + DateTime.Now);
                //Cancel Recurring Gift
                if (SrpGrpType == "2" || SrpGrpType == "3" || SrpGrpType == "4")
                {
                    constituentId = GetConstituentOnLookupIDNew(psBlackbaudid).Output.Rows[0].Values[0];
                    lookupid = psBlackbaudid;
                }
                var SponsorshipRG = fetchRecurringGiftsForReassignSponsorship(constituentId);
                if (SponsorshipRG.Count > 0)
                {
                    DDISource = SponsorshipRG[0].Values[14] == null ? "" : SponsorshipRG[0].Values[14].ToString();
                    OldNeedkey = SponsorshipRG[0].Values[4].ToString();
                }
                if (!string.IsNullOrEmpty(OldNeedkey))
                {
                    //CancelOtherRecurringGift(OldNeedkey, lookupid, Convert.ToString(obj.sefGUID));//Cancel Recurring Gift
                }
                else
                {
                    appLogger.Info("OldChild not found failed to cancel other recurring gift with commitment id " + spcommitmentid);
                    Console.WriteLine("OldChild not found failed to cancel other recurring gift with commitment id " + spcommitmentid);
                }

                #region Transfer SponserShip 

                var childData = GetChildsearchOnLookupID(Convert.ToString(obj.ChildLookUpId));

                var commitmentdetails = GetCommitmentOnLookupID(Convert.ToString(obj.BBCommitmentId));
                if (commitmentdetails.Output.RowCount == 0)
                {
                    msg = "No active commitments found with sponsorship id : " + obj.BBCommitmentId + ".";
                    //if (!string.IsNullOrWhiteSpace(obj.sefGUID))
                    //  InsertSEFOperationResponse(obj.sefGUID, msg, MessageHeader.TransferSponsorshipInBB, false);
                    appLogger.Error("No active commitments found with sponsorship id : " + obj.BBCommitmentId);
                    //return msg;
                }
                else
                {
                    var financedetails = getFinancialOnChildIdForIndiaSupporter(commitmentdetails.Output.Rows[0].Values[4]);// "ET5550250"
                    /*if (childData.TotalRowsInReply < 1) {
                        Model.ChildDataModel childDetails = new Model.ChildDataModel();
                        childDetails.childKey = obj.ChildLookUpId;
                        childDetails.childName = obj.childName;
                        if (obj.Gender == "Male")
                        {
                            childDetails.gender = "M";
                        }
                        else if (obj.Gender == "Female")
                        {
                            childDetails.gender = "F";
                        }
                        else {
                            childDetails.gender = "";
                        }
                        childDetails.childPersonalName = obj.childPersonalName;
                        string addChildDetails = (new JavaScriptSerializer()).Serialize(childDetails);
                        bool success;
                        AddChild(addChildDetails, out success);
                        childData = GetChildsearchOnLookupID(Convert.ToString(obj.ChildLookUpId));
                    }*/
                    TransferSponsorshipEditFormData transfer = new TransferSponsorshipEditFormData();
                    transfer.RecordID = commitmentdetails.Output.Rows[0].Values[0];
                    //transfer.SPONSORSHIPCONSTITUENTID

                    transfer.SPONSORSHIPOPPORTUNITYIDCHILD = new Guid(childData.Output.Rows[0].Values[0]);
                    transfer.SPONSORSHIPREASONID = new Guid(GetDepartureReasonGUID());
                    if (obj.Gender == "Male")
                    {
                        transfer.GENDERCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.GENDERCODE.Male;
                    }
                    else if (obj.Gender == "Female")
                    {
                        transfer.GENDERCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.GENDERCODE.Female;
                    }
                    else
                    {
                        transfer.GENDERCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.GENDERCODE.Male;
                    }

                    transfer.ISHIVPOSITIVECODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.ISHIVPOSITIVECODE.No;
                    transfer.HASCONDITIONCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.HASCONDITIONCODE.No;

                    if (obj.isOrphan == "True")
                    {
                        transfer.ISORPHANEDCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.ISORPHANEDCODE.Yes;
                    }
                    else
                    {
                        transfer.ISORPHANEDCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.ISORPHANEDCODE.No;
                    }
                    if (financedetails.TotalRowsInReply > 0)
                    {
                        if (financedetails.Rows[0].Values[5] == "Annually")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Annually;
                        }
                        else if (financedetails.Rows[0].Values[5] == "Bimonthly")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Bimonthly;
                        }
                        else if (financedetails.Rows[0].Values[5] == "Biweekly")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Biweekly;
                        }
                        else if (financedetails.Rows[0].Values[5] == "Monthly")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Monthly;
                        }
                        else if (financedetails.Rows[0].Values[5] == "Quarterly")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Quarterly;
                        }
                        else if (financedetails.Rows[0].Values[5] == "SemiAnnually")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.SemiAnnually;
                        }
                        else if (financedetails.Rows[0].Values[5] == "SemiMonthly")
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.SemiMonthly;
                        }
                        else
                        {
                            transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Monthly;
                        }
                        if (financedetails.Rows[0].Values[6] == "Direct debit")
                        {
                            transfer.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.PAYMENTMETHODCODE.Direct_Debit;
                        }
                        else if (financedetails.Rows[0].Values[6] == "Credit card")
                        {
                            transfer.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.PAYMENTMETHODCODE.Credit_Card;
                        }
                        else
                        {
                            transfer.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.PAYMENTMETHODCODE.None;
                        }
                    }
                    else
                    {
                        transfer.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.FREQUENCYCODE.Monthly;
                        transfer.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Sponsorship.Catalog.WebApiClient.EditForms.Sponsorship.TransferSponsorshipEditFormEnums.PAYMENTMETHODCODE.None;
                    }

                    try
                    {
                        string str = "";//transfer.Save(provider());
                        msg = "Sponsorship Transfered in BB";
                        //if (!string.IsNullOrWhiteSpace(Convert.ToString(obj.sefGUID)))
                        //InsertSEFOperationResponse(Convert.ToString(obj.sefGUID), msg, MessageHeader.TransferSponsorshipInBB, true);
                        appLogger.Info("Sponsorship Transfered in BB for Commitment " + Convert.ToString(obj.BBCommitmentId) + " and Needkey " + Convert.ToString(obj.ChildLookUpId) + " at " + DateTime.Now);
                        Console.WriteLine("Sponsorship Transfered in BB for Commitment " + Convert.ToString(obj.BBCommitmentId) + " and Needkey " + Convert.ToString(obj.ChildLookUpId) + " at " + DateTime.Now);
                        //adding Recurring Gift
                        if (!string.IsNullOrEmpty(Convert.ToString(obj.birthdayGiftAmount)))
                        {
                            if (!string.IsNullOrEmpty(constituentId))
                            {
                                var finentialaccountlist = FinancialAccountListOnConsRecordid(constituentId);
                                foreach (ConstituentFinancialAccountsListRow finentialaccount in finentialaccountlist)
                                {
                                    if (finentialaccount.EFT_status == "EFT")
                                    {
                                        AccountID = finentialaccount.ID.ToString();
                                        break;
                                    }
                                }
                                //doCreateChildBirthdayRGService(constituentId, NewNeedkey, Convert.ToDouble(obj.birthdayGiftAmount), Convert.ToString(obj.AnnualBirthDate), AccountID, lookupid, DDISource, Convert.ToString(obj.sefGUID));

                                if (!string.IsNullOrEmpty(Convert.ToString(obj.christmasGiftAmount)))
                                {
                                    //doCreateChildChristmasRGService(constituentId, NewNeedkey, Convert.ToDouble(obj.christmasGiftAmount), Convert.ToString(obj.AnnualChristmas), AccountID, lookupid, DDISource, Convert.ToString(obj.sefGUID));
                                }
                                // CreateTracktochild(lookupid, NewNeedkey);//Create Track to child Birthday Recurring Gift
                            }
                            else
                            {
                                appLogger.Info("No constituent details found to add recurring gift with commitment id " + spcommitmentid);
                                Console.WriteLine("No constituent details found to add recurring gift with commitment id " + spcommitmentid);
                            }
                        }
                        //return msg;
                    }
                    catch (AppFxException e)
                    {
                        msg = "Error in transfering sponsorship in BB.";
                        //if (!string.IsNullOrWhiteSpace(Convert.ToString(obj.sefGUID)))
                        //  InsertSEFOperationResponse(Convert.ToString(obj.sefGUID), msg, MessageHeader.TransferSponsorshipInBB, false);
                        appLogger.Error("Error in Sponsorship Transfer " + e.Message);
                        Console.WriteLine("Error in Sponsorship Transfer " + e.Message);
                        //return msg;
                    }
                }
                #endregion

            }
            catch (Exception e)
            {
                msg = "Error in transfering sponsorship in BB.";
                //if (!string.IsNullOrWhiteSpace(Convert.ToString(obj.sefGUID)))
                //  InsertSEFOperationResponse(Convert.ToString(obj.sefGUID), msg, MessageHeader.TransferSponsorshipInBB, false);
                appLogger.Error("Error in Sponsorship Transfer " + e.Message);
                Console.WriteLine("Error in Sponsorship Transfer " + e.Message);
            }
        }
        public Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent.ConstituentFinancialAccountsListRow[] FinancialAccountListOnConsRecordid(string constituentRecordid)
        {

            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("18adb86f-bb23-4b71-820c-a0d91d12c8b6");
                req.ContextRecordID = constituentRecordid;

                Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent.ConstituentFinancialAccountsListRow[] rows = Blackbaud.AppFx.Constituent.Catalog.WebApiClient.DataLists.Constituent.ConstituentFinancialAccountsList.GetRows(provider(), req);
                return rows;
            }
            catch (Exception e)
            {
                appLogger.Error("Error while fetching Financial Account from lookup id : " + e.Message);
                Console.WriteLine("Error while fetching Financial Account from lookup id : " + e.Message);

                return null;
            }
        }
        public DataListLoadReply getFinancialOnChildIdForIndiaSupporter(string childId)
        {
            DataListLoadRequest req = new DataListLoadRequest();
            req.ClientAppInfo = GetRequestHeader();
            req.DataListID = new Guid("4d07957a-3a03-4500-bbb7-2adb926938cf"); // DataList for India children //6ccba68f-5696-4aff-8aa6-cac3f03815ac

            req.IncludeMetaData = true;
            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("SPONSORSHIPOPPORTUNITYLOOKUPID", childId);
            // fvSet.Add("SPONSORSHIPSSTATUS", "Active");
            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            req.Parameters = dfi;
            var datareply = _service.DataListLoad(req);
            return datareply;
        }
        private SearchListLoadReply GetCommitmentOnLookupID(string searchme)
        {

            var searchreq = new SearchListLoadRequest();

            searchreq.ClientAppInfo = GetRequestHeader();
            searchreq.SearchListID = new Guid("69233a7f-c0b2-42bd-be51-89e16393a758");
            searchreq.ReturnSearchFilters = true;
            searchreq.MaxRecords = 500;

            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("COMMITMENTID", searchme);

            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            searchreq.Filter = dfi;
            return _service.SearchListLoad(searchreq);
        }
        public List<DataListResultRow> fetchRecurringGiftsForReassignSponsorship(string constituentId)
        {
            //14 - DDI source
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                DataListLoadRequest request = new DataListLoadRequest();
                request.ClientAppInfo = GetRequestHeader();
                request.DataListID = new Guid("0be1b11f-854a-45b1-b90b-bc7947d17f17");   // Data List: Bacs Recurring gifts - sponsorship
                request.ContextRecordID = constituentId;
                request.IncludeMetaData = true;
                var result = _service.DataListLoad(request);

                if (result.TotalRowsInReply > 0)
                {

                    foreach (var res in result.Rows)
                    {
                        responseList.Add(res);
                    }
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching sponsorship recurring gifts for constituent for reassign Sponsorship : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }
        public SearchListLoadReply GetConstituentOnLookupIDNew(string searchme)
        {

            var searchreq = new SearchListLoadRequest();

            searchreq.ClientAppInfo = GetRequestHeader();
            searchreq.SearchListID = new Guid("23C5C603-D7D8-4106-AECC-65392B563887");
            searchreq.ReturnSearchFilters = true;
            searchreq.MaxRecords = 500;

            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("LOOkUPID", searchme);
            fvSet.Add("EXACTMATCHONLY", true);
            fvSet.Add("INCLUDEINACTIVE", true);

            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            searchreq.Filter = dfi;
            var reply = _service.SearchListLoad(searchreq);
            return _service.SearchListLoad(searchreq);

        }

        #endregion

        #region 0004208: S2B Whitemail Process - Lookup values in RightNow from Barcode
        public List<string> GetBarcodeFromDB()
        {
            List<string> Barcode = new List<string>();
            appLogger.Info("Get Barcode from DB where isprocessed is 3 started.");
            int count = 0;
            string S2B_Barcode;
            MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString);
            try
            {
                //string query = "SELECT Barcode FROM `wp_scanned_letter_details` WHERE isProcessed IS NOT NULL AND isProcessed = 3 AND Barcode IS NOT NULL";
                string query = "SELECT Barcode FROM `wp_scanned_letter_details_dev` WHERE isProcessed IS NOT NULL AND isProcessed = 3 AND Barcode IS NOT NULL";
                conn.Open();
                MySqlCommand command = new MySqlCommand(query, conn);
                MySqlDataReader reader = command.ExecuteReader();
                OnlineS2BDbModel onlineS2BDbModel = new OnlineS2BDbModel();
                if (reader.Read())
                {
                    while (reader.Read())
                    {
                        S2B_Barcode = reader["Barcode"] != null ? Convert.ToString(reader["Barcode"]) : "";
                        Barcode.Add(S2B_Barcode);
                        count++;
                    }
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetBarcodeFromDB " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                conn.Close();
            }
            appLogger.Info("Got " + count + " Barcode in DB with isprocessed is 3.");
            appLogger.Info("Get Barcode from DB where isprocessed is 3 ended.");
            return Barcode;
        }
        public void SyncS2BLookUpValFromBarcode()
        {
            appLogger.Info("SyncS2BLookUpValFromBarcode Start ");
            List<string> Barcodes = GetBarcodeFromDB();
            if (Barcodes.Count > 0)
            {
                appLogger.Info("Total Barcode found to sync in DB: " + Barcodes.Count);
                foreach (string Barcode in Barcodes)
                {
                    fetchLookupValInRNFromBarcode(Barcode);
                }
            }
            appLogger.Info("SyncS2BLookUpValFromBarcode Ended");
        }
        public void fetchLookupValInRNFromBarcode(string Barcode)
        {
            string BarcodeStr = Barcode; // "PE059300432000920482";
            string Need_Key = BarcodeStr.Substring(0, 11);
            string Con_Id = BarcodeStr.Replace(Need_Key + "000", "");
            if (BarcodeStr.Length == 20)
            {
                ClientInfoHeader info = new ClientInfoHeader
                {
                    AppID = "Fetch Barcode Data",
                };
                try
                {
                    string Query = "SELECT CM.Need.NeedKey, CM.Need.ID, CM.Need.Beneficiary_GlobalID, CM.SupporterGroup.CompassConID, CM.SupporterGroup.ID, CM.SupporterGroup.GlobalID FROM SCBS_CM.Commitment CM WHERE CM.Need.NeedKey = '" + Need_Key + "' AND CM.SupporterGroup.CompassConID = " + Con_Id;
                    APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                    byte[] byteArray;
                    CSVTableSet result;
                    int count = 0;
                    head = rightNowSyncPortClient.QueryCSV(info, api, Query, 100000, "^", false, true, out result, out byteArray);
                    count = result.CSVTables[0].Rows.Count();
                    if (count > 0)
                    {
                        appLogger.Info("Update Record for Barcode : " + BarcodeStr);
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Replace("'", "").Split('^');
                            //string[] values = result.CSVTables[0].Rows[0].Split(',');
                            string NeedKey = !string.IsNullOrEmpty(values[0]) ? values[0] : "";
                            string NeedID = !string.IsNullOrEmpty(values[1]) ? values[1] : "";
                            string BeneficiaryGlobalID = !string.IsNullOrEmpty(values[2]) ? values[2] : "";
                            string ConID = !string.IsNullOrEmpty(values[3]) ? values[3] : "";
                            string SupporterGroupID = !string.IsNullOrEmpty(values[4]) ? values[4] : "";
                            string SupporterGlobalID = !string.IsNullOrEmpty(values[5]) ? values[5] : "";
                            string isprocessed = "0";

                            //string Sql_Query = "UPDATE `wp_scanned_letter_details` SET `NeedKey` = '" + NeedKey + "', `NeedID` = '" + NeedID + "', `BeneficiaryGlobalID` = '" + BeneficiaryGlobalID + "', `ConID` = '" + ConID + "', `SupporterGroupID` = '" + SupporterGroupID + "', `SupporterGlobalID` = '" + SupporterGlobalID + "', `isProcessed` = '" + isprocessed + "' WHERE Barcode = '" + BarcodeStr + "'";
                            string Sql_Query = "UPDATE `wp_scanned_letter_details_dev` SET `NeedKey` = '" + NeedKey + "', `NeedID` = '" + NeedID + "', `BeneficiaryGlobalID` = '" + BeneficiaryGlobalID + "', `ConID` = '" + ConID + "', `SupporterGroupID` = '" + SupporterGroupID + "', `SupporterGlobalID` = '" + SupporterGlobalID + "', `isProcessed` = '" + isprocessed + "' WHERE Barcode = '" + BarcodeStr + "'";

                            using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                            {
                                conn.Open();
                                MySqlCommand cmd = new MySqlCommand(Sql_Query, conn);
                                cmd.ExecuteNonQuery();
                                appLogger.Info("Updated Record for " + BarcodeStr);
                            }

                        }
                    }
                    else
                    {
                        appLogger.Info("Not Data Found in RN for Barcode : " + BarcodeStr + " Needkey is " + Need_Key + " And ConId is " + Con_Id);
                    }
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in Fetch Lookup Value In RN From Barcode : " + e.Message);
                    appLogger.Error(e.InnerException);
                    appLogger.Error(e.StackTrace);
                }
            }
            else
            {
                appLogger.Info("Barcode : " + BarcodeStr + " is less than 20 digit. Therefore cannot Processed data.");
            }
        }
        #endregion

        #region DX161 and DX162 Correspondence Data Service Method

        public TemplateInfo GetTemplateIdAndTemplateNameFromDB(string CommKitID)
        {
            TemplateInfo info = new TemplateInfo();
            try
            {
                string Query = "SELECT *  FROM `wp_tcpt_online_s2b` WHERE `CompassionSBCID` LIKE '" + CommKitID + "'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand mycmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader = mycmd.ExecuteReader();
                    if (Reader.Read())
                    {
                        info.TemplateId = Reader["TemplateID"] != null ? Reader["TemplateID"].ToString() : "";
                        info.TemplateName = Reader["TemplateName"] != null ? Reader["TemplateName"].ToString() : "";
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetTemplateIdAndTemplateNameFromDB: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return info;
        }

        public S2BCommData GetCorrespondenceData(string Incidentrefid)
        {
            appLogger.Info("GetCorrespondenceData Started...");
            S2BCommData s2BComm = new S2BCommData();
            try
            {
                Correspondence corrData = GetIncidentData(Incidentrefid);
                if (corrData != null && !string.IsNullOrEmpty(corrData.CommKitID))
                {
                    s2BComm = GetS2BCommData(corrData);
                    s2BComm.success = true;
                    s2BComm.error = false;
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetCorrespondenceData: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                s2BComm.success = false;
                s2BComm.error = true;
            }
            appLogger.Info("GetCorrespondenceData Ended...");
            return s2BComm;
        }
        public Correspondence GetIncidentData(string Incidentrefid)
        {
            appLogger.Info("GetIncidentData request received with Incidentrefid: " + Incidentrefid);
            Correspondence ThreadData = new Correspondence();
            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Get incident data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;

                string queryString = "SELECT Incident.ID,Incident.threads.text FROM Incident WHERE Incident.lookupName = '" + Incidentrefid + "'";

                CSVTableSet queryCSV;
                head = rightNowSyncPortClient.QueryCSV(clientInfoHeader, api, queryString, 10000, "^", false, true, out queryCSV, out byteArray);
                CSVTable[] csvTables = queryCSV.CSVTables;
                if (csvTables[0].Rows.Length > 0)
                {
                    string[] values = csvTables[0].Rows[0].Split('^');

                    if (!string.IsNullOrEmpty(values[1]))
                    {
                        List<string> Columns = new List<string>();
                        string ThreadText = values[1].Trim('\"');
                        ThreadText = ThreadText.Replace(" -", ":");
                        ThreadText = ThreadText.Replace(" –", ":");
                        Columns.AddRange(ThreadText.Split('\n'));
                        Dictionary<string, string> ThreadTextDic = new Dictionary<string, string>();
                        foreach (string data in Columns)
                        {
                            if (data.Contains(":"))
                            {
                                string[] value = data.Split(':');
                                ThreadTextDic.Add(value[0].Replace(" ", ""), value[1].TrimStart(' '));
                            }
                        }
                        ThreadData = GetObject<Correspondence>(ThreadTextDic, "CorrespondenceThreadText");
                        ThreadData.IncidentID = Convert.ToInt64(values[0]);
                    }
                }
                else
                {
                    appLogger.Info("No incident records found for IncidentRefID: " + Incidentrefid);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetIncidentData : " + e.Message + " with incidentrefid: " + Incidentrefid);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                return null;
            }
            return ThreadData;
        }
        private S2BCommData GetS2BCommData(Correspondence corrObj)
        {
            S2BCommData s2bData = new S2BCommData();
            BBTargetRepository.Model.Constant constant = new BBTargetRepository.Model.Constant();
            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Get s2b data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;

                string queryString = "SELECT SupporterGroup.ID,SupporterGroup.Name,SupporterGroup.GlobalID,Need.AbbreviatedName,Need.NeedKey,Need.Beneficiary_GlobalID,TemplateID,TemplateName,ID,CommKitID,FileAttachments.id,Need.ID,SupporterGroup.PrioritySupporterId.lookupName,SupporterGroup.PrioritySupporterId,Type.lookupname,SourceID FROM SCBS_SUP.S2BCommunication WHERE CommKitID = '" + corrObj.CommKitID + "'";

                CSVTableSet queryCSV;
                head = rightNowSyncPortClient.QueryCSV(clientInfoHeader, api, queryString, 10000, "^", false, true, out queryCSV, out byteArray);
                CSVTable[] csvTables = queryCSV.CSVTables;
                if (csvTables[0].Rows.Length > 0)
                {
                    string[] values = csvTables[0].Rows[0].Split('^');
                    s2bData.SupporterGroupID = values[0];
                    s2bData.SupporterGroupName = values[1];
                    s2bData.SupporterGlobalID = values[2];
                    s2bData.ChildPreferredName = values[3];
                    s2bData.NeedKey = values[4];
                    s2bData.ChildGlobalID = values[5];
                    s2bData.TemplateID = values[6];
                    s2bData.TemplateName = values[7];
                    s2bData.OldS2BRecordID = values[8];
                    s2bData.OldCommkitID = values[9];
                    s2bData.FileId = values[10];
                    s2bData.NeedId = values[11];
                    s2bData.MessageFrom = values[12];
                    s2bData.SupporterId = values[13];
                    s2bData.Type = values[14];
                    s2bData.LetterId = values[15];
                    switch (s2bData.Type)
                    {
                        case "Letter (Whitemail)":
                            s2bData.Type = "WHITEMAIL";
                            break;
                        case "Christmas Card (Whitemail)":
                            s2bData.Type = "WHITEMAIL";
                            break;
                        case "Greetings Card (Whitemail)":
                            s2bData.Type = "WHITEMAIL";
                            break;
                    }
                    //s2bData.Type = "WHITEMAIL";
                    if (!string.IsNullOrEmpty(s2bData.OldS2BRecordID) && !string.IsNullOrEmpty(s2bData.FileId))
                    {
                        s2bData.FileAttachmentURL = GetS2BAttachment(Convert.ToInt64(s2bData.OldS2BRecordID), Convert.ToInt64(s2bData.FileId));
                    }
                    if (string.IsNullOrEmpty(s2bData.TemplateID) && string.IsNullOrEmpty(s2bData.TemplateName))
                    {
                        TemplateInfo info = new TemplateInfo();
                        info = GetTemplateIdAndTemplateNameFromDB(corrObj.CommKitID);
                        s2bData.TemplateID = info.TemplateId;
                        s2bData.TemplateName = info.TemplateName;
                    }
                    //To be fix for Template id 0 for mobile App
                    if (s2bData.TemplateID == "0")
                    {
                        s2bData.TemplateID = "7";
                    }
                    if (!string.IsNullOrEmpty(s2bData.TemplateID))
                    {
                        TemplateInfo Tinfo = GetTemplateURL(Convert.ToInt32(s2bData.TemplateID));
                        s2bData.TemplateURL = constant.HOSTNAME + "wp-content/themes/donation" + Tinfo.TemplateURL;
                        s2bData.LetterType = Tinfo.TemplateType;
                        if (!string.IsNullOrEmpty(s2bData.LetterType))
                        {
                            switch (s2bData.LetterType)
                            {
                                case "FIRST_LETTER":
                                    s2bData.LetterType = "LETTER";
                                    break;
                                case "SPECIAL_OCCASIONS":
                                    s2bData.LetterType = "BIRTHDAY_CARD";
                                    break;
                            }
                        }
                        if (!string.IsNullOrEmpty(s2bData.LetterId))
                        {
                            s2bData.LetterImage = GetLetterImageUrl(Convert.ToInt64(s2bData.LetterId), s2bData.LetterType);
                        }
                    }
                    //s2bData.Message = GetLetterMessage(corrObj.CommKitID);
                    string msg = GetLetterMessage(corrObj.CommKitID);
                    if (!string.IsNullOrEmpty(msg))
                    {
                        var bytes = Encoding.Default.GetBytes(msg); //To Remove â€˜ Char 
                        var text = Encoding.UTF8.GetString(bytes);
                        s2bData.Message = text;
                    }
                    s2bData.ThreadData = corrObj;
                }
                else
                {
                    appLogger.Info("No GetS2BCommData records found for ComkitId:" + corrObj.CommKitID);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching GetS2BCommData : " + e.Message + " with ComkitId: " + corrObj.CommKitID);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return s2bData;
        }
        private string GetS2BAttachment(long CorrespondenceId, long FileId)
        {
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Fetch Letter Attachments From Child";
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            GenericObject go = new GenericObject();

            //Set the object type
            RNObjectType objType = new RNObjectType();
            objType.Namespace = "SCBS_SUP";
            objType.TypeName = "S2BCommunication";

            go.ObjectType = objType;

            go.ID = new ID();
            go.ID.id = CorrespondenceId;
            go.ID.idSpecified = true;

            List<GenericField> gfs = new List<GenericField>();
            gfs.Add(createGenericField("FileAttachments", createDataValue(new Object[] { new GenericObject() }, ItemsChoiceType.ObjectValue), DataTypeEnum.OBJECT));
            go.GenericFields = gfs.ToArray();

            byte[] fileData;
            head = rightNowSyncPortClient.GetFileData(info, api, go, new ID() { id = FileId, idSpecified = true }, true, out fileData);
            string sFile = @""+ settings["B2S_LETTER_PATH"] + CorrespondenceId + "_" + FileId + ".pdf"; //Path
            string sFileName = Host + "/RightNowFetchServices/ChildLetters/" + CorrespondenceId + "_" + FileId + ".pdf"; //Path
            System.IO.File.WriteAllBytes(sFile, fileData);
            return sFileName;
        }
        private TemplateInfo GetTemplateURL(int TemplateID)
        {
            TemplateInfo info = new TemplateInfo();
            try
            {
                string Query = "SELECT * FROM template_info WHERE template_id=" + TemplateID;
                using (MySqlConnection conn = new MySqlConnection(MyConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        info.TemplateURL = reader["template url"].ToString();
                        info.TemplateType = reader["template type"].ToString();

                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetTemplateURL:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return info;
        }
        private string GetLetterMessage(string ComkitId)
        {
            string Message = "";
            try
            {
                string Query = "SELECT * FROM wp_tcpt_online_s2b WHERE CompassionSBCID ='" + ComkitId + "'";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        Message = reader["Message"].ToString();
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetLetterMessage: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);

            }
            return Message;
        }

        public string GetLetterImageUrl(long LetterId, string Type)
        {
            string letterImageUrl = null;
            //string Type = "LETTER";
            //long LetterId = 364772;
            string Table = "SupLetter";
            if (Type != "LETTER")
            {
                Table = "BirthdayCard";
            }
            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Get letter image";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                byte[] byteArray;

                string queryString = "SELECT FileAttachments.id FROM SCBS_WEB." + Table + " WHERE SCBS_WEB." + Table + ".ID=" + LetterId;
                appLogger.Info("Query :"+ queryString);
                CSVTableSet queryCSV;
                head = rightNowSyncPortClient.QueryCSV(clientInfoHeader, api, queryString, 10000, "^", false, true, out queryCSV, out byteArray);
                CSVTable[] csvTables = queryCSV.CSVTables;
                if (csvTables[0].Rows.Length > 0)
                {
                    if (!string.IsNullOrEmpty(csvTables[0].Rows[0]))
                    {
                        long FileId = Convert.ToInt64(csvTables[0].Rows[0]);
                        letterImageUrl = GetLetterImageAttachmentUrl(Table, LetterId, FileId);
                    }
                }
                else
                {
                    appLogger.Info("No SCBS_WEB." + Table + " record found with given SCBS_WEB." + Table + "ID: " + LetterId);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetLetterImage: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return letterImageUrl;
        }

        public string GetLetterImageAttachmentUrl(string Table, long letterId, long FileId)
        {
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Fetch Letter Attachments From Child";
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            GenericObject go = new GenericObject();

            //Set the object type
            RNObjectType objType = new RNObjectType();
            objType.Namespace = "SCBS_WEB";
            objType.TypeName = Table;

            go.ObjectType = objType;

            go.ID = new ID();
            go.ID.id = letterId;
            go.ID.idSpecified = true;

            List<GenericField> gfs = new List<GenericField>();
            gfs.Add(createGenericField("FileAttachments", createDataValue(new Object[] { new GenericObject() }, ItemsChoiceType.ObjectValue), DataTypeEnum.OBJECT));
            go.GenericFields = gfs.ToArray();

            byte[] fileData;
            head = rightNowSyncPortClient.GetFileData(info, api, go, new ID() { id = FileId, idSpecified = true }, true, out fileData);
            string sFile = @""+ settings["LETTER_IMAGES_PATH"] + letterId + "_" + FileId + ".png"; //Path
            string sFileName = Host+"/RightNowFetchServices/LetterImages/" + letterId + "_" + FileId + ".png"; //Path
            System.IO.File.WriteAllBytes(sFile, fileData);
            return sFileName;
        }

        #endregion

        #region  EASY OSJ service

        public string GetSpondorshipDataOnID(string SponsorshipId)
        {
            string RevenueId = "";
            appLogger.Info("GetSpondorshipDataOnID started with sponsorshipid: " + SponsorshipId);
            /*try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("9108ef7d-c1cc-4858-8883-0c34b08d5eb8");//Data List: Easy OSJ query for individual commitment
                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SPONSORSHIPSCOMMITMENTID", SponsorshipId);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                if (result.TotalRowsInReply > 0)
                {
                    RevenueId = result.Rows[0].Values[0];
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSpondorshipDataOnID: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                {
                    appLogger.Info("Retrying...");
                    return GetSpondorshipDataOnID(SponsorshipId);
                }
            }*/

            int retryCount = 0;
            while (retryCount < 4)
            {
                retryCount++;
                try
                {
                    DataListLoadRequest req = new DataListLoadRequest();
                    req.ClientAppInfo = GetRequestHeader();
                    req.DataListID = new Guid("9108ef7d-c1cc-4858-8883-0c34b08d5eb8");//Data List: Easy OSJ query for individual commitment
                    req.IncludeMetaData = true;
                    var fvSet = new DataFormFieldValueSet();
                    fvSet.Add("SPONSORSHIPSCOMMITMENTID", SponsorshipId);
                    var dfi = new DataFormItem();
                    dfi.Values = fvSet;
                    req.Parameters = dfi;
                    var result = _service.DataListLoad(req);
                    if (result.TotalRowsInReply > 0)
                    {
                        RevenueId = result.Rows[0].Values[0];
                    }
                    break;
                }
                catch (Exception e)
                {
                    if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                    {

                        if (retryCount == 4)
                        {

                            appLogger.Error("Error in GetSpondorshipDataOnID try : " + e.Message);
                            appLogger.Error(e.InnerException);
                            appLogger.Error(e.StackTrace);
                            throw e;

                        }
                        else
                        {
                            appLogger.Info("Retrying in GetSpondorshipDataOnID...");
                        }
                    }
                    else
                    {
                        appLogger.Error("Error in GetSpondorshipDataOnID main : " + e.Message);
                        appLogger.Error(e.InnerException);
                        appLogger.Error(e.StackTrace);
                        throw e;

                    }
                }
            }
            appLogger.Info("GetSpondorshipDataOnID ended...");
            return RevenueId;
        }

        #endregion
        #region S2BCommDraft Create, Update and Delete methods
        public S2BCommDraftData GetS2BCommDraft(long SupporterId)
        {
            appLogger.Info("GetS2BCommDraft started with supporterid: " + SupporterId);
            S2BCommDraftData s2bobj = new S2BCommDraftData();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT ID,Message,NeedID,SBCStatus,SupporterGroupID,SupporterID,TemplateID,CreatedTime,SBCStatus.lookupname FROM SCBS_SUP.S2BCommDraft WHERE SupporterID=" + SupporterId;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        s2bobj.ID = Convert.ToInt64(values[0]);
                        s2bobj.Message = string.IsNullOrEmpty(values[1]) ? "" : values[1];
                        s2bobj.NeedID = Convert.ToInt64(values[2]);
                        s2bobj.SBCStatus = string.IsNullOrEmpty(values[3]) ? 0 : Convert.ToInt32(values[3]);
                        s2bobj.SupporterGroupID = Convert.ToInt64(values[4]);
                        s2bobj.SupporterID = Convert.ToInt64(values[5]);
                        s2bobj.TemplateID = Convert.ToInt32(values[6]);
                        if (!string.IsNullOrEmpty(values[7]))
                        {
                            DateTime dt = DateTime.ParseExact(values[7], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                            s2bobj.CreatedTime = dt.ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        s2bobj.SBCStatusLookupName = string.IsNullOrEmpty(values[8]) ? "" : values[8];
                    }
                    else
                    {
                        s2bobj = null;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetS2BCommDraft: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return s2bobj;
        }
        public Message GetS2BCommDraftTile(long SupporterId)
        {
            Message message = null;
            S2BCommDraftData draft = new S2BCommDraftData();
            draft = GetS2BCommDraft(SupporterId);
            Child child = new Child();
            if (draft != null && draft.NeedID != 0)
            {
                child = GetChildrenData(draft.NeedID);
                child.SupporterId = SupporterId;
                SupporterGroup SupGrp = GetSupGrpDetails(draft.NeedID);
                child.SupporterGroupId = SupGrp.SupporterGroupID;
                child.SupporterGroupName = SupGrp.Name;
                child.SupporterGroupPreferredName = SupGrp.PreferredName;
                TemplateInfo temInfo = GetTemplateURL(draft.TemplateID);
                if (temInfo != null)
                {
                    draft.TemplateUrl = Model.AutomationBot.Constant.HOSTNAME + "wp-content/themes/donation" + temInfo.TemplateURL;
                }
                try
                {
                    message = new Message
                    {
                        Type = "Draft",
                        SubType = "DR0",
                        Title = "Draft",
                        Body = "You have a draft Short Note to " + child.PreferredName + ", which you last saved on " + Convert.ToDateTime(draft.CreatedTime).ToString("dd MMM yyyy"),
                        ActionText = child.PreferredName,
                        ActionDestination = "Letter",
                        Draft = draft,
                        Child = child
                    };
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in GetDraftTile: " + e.Message);
                    appLogger.Error(e.StackTrace);
                    appLogger.Error(e.InnerException);

                }
            }
            else
            {
                message = null;
            }

            return message;
        }
        private Child GetChildrenData(long NeedId)
        {
            Child child = new Child();
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                ClientInfoHeader info = new ClientInfoHeader
                {
                    AppID = "Fetch Child"
                };


                string Query = "Select SCBS_CHILD.Need from SCBS_CHILD.Need where SCBS_CHILD.Need.ID=" + NeedId;// AND SCBS_CHILD.Need.NeedStatus = 5
                GenericObject genobj = new GenericObject();

                RNObjectType rntype = new RNObjectType
                {
                    Namespace = "SCBS_CHILD",
                    TypeName = "Need"
                };

                genobj.ObjectType = rntype;

                RNObject[] rnobject = new RNObject[] { genobj };

                QueryResultData[] result = null;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, rnobject, 10000, out result);
                foreach (QueryResultData fetchresult in result)
                {
                    foreach (RNObject rn in fetchresult.RNObjectsResult)
                    {
                        long needId = rn.ID.id;
                        child.NeedId = needId;
                        GenericObject fetchgen = (GenericObject)rn;
                        foreach (GenericField fetchchildfields in fetchgen.GenericFields)
                        {
                            switch (fetchchildfields.name)
                            {
                                case "Beneficiary_GlobalID":
                                    child.BeneficiaryGlobalId = FetchChildData(fetchchildfields);
                                    break;
                                case "BirthDate":
                                    string dateStr = FetchChildData(fetchchildfields);
                                    if (dateStr != "Null data")
                                    {
                                        child.BirthDate = DateTime.ParseExact(dateStr, "dd-MM-yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
                                        child.Age = (int)Math.Floor((DateTime.Now - child.BirthDate).TotalDays / 365.25D);
                                    }
                                    break;
                                case "FileAttachments":
                                    child.Image = FetchChildData(fetchchildfields);
                                    break;
                                case "ICP_ID":
                                    child.IcpId = FetchChildData(fetchchildfields);
                                    break;
                                case "ProjectName":
                                    child.ProjectName = FetchChildData(fetchchildfields);
                                    break;
                                case "NeedKey":
                                    child.ChildNeedKey = FetchChildData(fetchchildfields);
                                    break;
                                case "Name":
                                    child.FirstName = FetchChildData(fetchchildfields);
                                    break;
                                case "Gender":
                                    child.Gender = FetchChildData(fetchchildfields);
                                    if (child.Gender == "2")
                                        child.Gender = "Male";
                                    else if (child.Gender == "3")
                                        child.Gender = "Female";
                                    else
                                        child.Gender = "Unknown";
                                    break;
                                case "CountryName":
                                    child.Country = FetchChildData(fetchchildfields);
                                    break;
                                case "Country":
                                    string countryId = FetchChildData(fetchchildfields);
                                    if (countryId != "Null data")
                                        child.CountryId = Convert.ToInt64(countryId);
                                    break;
                                case "Latitude":
                                    string latitude = FetchChildData(fetchchildfields);
                                    if (latitude != "Null data")
                                        child.Latitude = latitude;
                                    else
                                        child.Latitude = "0";
                                    break;
                                case "Longitude":
                                    string longitude = FetchChildData(fetchchildfields);
                                    if (longitude != "Null data")
                                        child.Longitude = longitude;
                                    else
                                        child.Longitude = "0";
                                    break;
                                case "FullBodyImageURL":
                                    child.FullBodyImageURL = FetchChildData(fetchchildfields);
                                    break;
                                case "AbbreviatedName":
                                    string preferredName = FetchChildData(fetchchildfields);
                                    child.PreferredName = ((preferredName != "Null data") ? preferredName : "");
                                    break;
                                case "ProgramDeliveryType":
                                    string ProgramDeliveryType = FetchChildData(fetchchildfields);
                                    child.ProgramDeliveryType = ((ProgramDeliveryType != "Null data") ? ProgramDeliveryType : "");
                                    break;
                            }
                        }

                        if (!string.IsNullOrWhiteSpace(child.FullBodyImageURL) && child.FullBodyImageURL != "Null data")
                            child.ImageURL = child.FullBodyImageURL.Replace("/w_150/", "/w_210,h_245,c_thumb,g_face/");
                        else
                            child.ImageURL = "https://services.ukpc.ci.org/services/display.php?key=1egmp78dy43&id=" + child.ChildNeedKey + "&&w=120&h=160";
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error for Need : " + NeedId + " in GetChildrenData : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return child;
        }
        private static string FetchChildData(GenericField fetchchildfields)
        {
            string value = "";
            if (fetchchildfields.DataValue != null)
            {
                foreach (object field1 in fetchchildfields.DataValue.Items)
                {

                    if (fetchchildfields.dataType.ToString().Equals("NAMED_ID"))
                    {
                        GenericField testField = (GenericField)fetchchildfields;
                        NamedID NamedIdVal = (NamedID)field1;
                        value = "Null data";
                        if (NamedIdVal.ID != null)
                            value = NamedIdVal.ID.id.ToString();
                    }
                    else if (fetchchildfields.dataType == DataTypeEnum.DATETIME)
                    {
                        DataValue sponserdata = fetchchildfields.DataValue;
                        foreach (object spoerdvvalue in sponserdata.Items)
                        {
                            if (spoerdvvalue != null)
                            {
                                DateTime dateTime = (DateTime)spoerdvvalue;
                                value = dateTime.ToString("dd-MM-yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
                            }
                        }
                    }
                    else
                    {
                        DataValue sponserdata = fetchchildfields.DataValue;
                        foreach (object spoerdvvalue in sponserdata.Items)
                        {
                            if (spoerdvvalue != null)
                            {
                                value = spoerdvvalue.ToString();
                            }
                        }
                    }
                }
            }
            else
            {
                value = "Null data";
            }
            return value;
        }
        public long CreateS2BCommDraft(S2BCommDraftData obj)
        {
            appLogger.Info("Data Received for CreateS2BCommDraft: " + SimpleJson.SerializeObject(obj));
            long RecordId = 0;
            try
            {
                CreateProcessingOptions createProcessingOptions = new CreateProcessingOptions();
                createProcessingOptions.SuppressExternalEvents = false;
                createProcessingOptions.SuppressRules = false;

                GenericObject S2BCommDraft = new GenericObject();

                RNObjectType rnObj = new RNObjectType();
                rnObj.Namespace = "SCBS_SUP";
                rnObj.TypeName = "S2BCommDraft";
                S2BCommDraft.ObjectType = rnObj;

                GenericField SupporterGroupIDGenericField = null;
                GenericField NeedIDGenericField = null;
                GenericField TemplateIDGenericField = null;
                GenericField SupporterIDGenericField = null;
                GenericField MessageGenericField = null;
                GenericField SBCStatusGenericField = null;

                if (obj.SupporterGroupID != 0)
                {
                    SupporterGroupIDGenericField = createGenericfield("SupporterGroupID", createNamedIdDataValue(obj.SupporterGroupID), DataTypeEnum.NAMED_ID);
                }
                if (obj.NeedID != 0)
                {
                    NeedIDGenericField = createGenericfield("NeedID", createNamedIdDataValue(obj.NeedID), DataTypeEnum.NAMED_ID);
                }
                if (obj.TemplateID != 0)
                {
                    TemplateIDGenericField = createGenericfield("TemplateID", createIntegerdataValue(obj.TemplateID), DataTypeEnum.INTEGER);
                }
                if (obj.SupporterID != 0)
                {
                    SupporterIDGenericField = createGenericfield("SupporterID", createNamedIdDataValue(obj.SupporterID), DataTypeEnum.NAMED_ID);
                }
                if (!string.IsNullOrEmpty(obj.Message))
                {
                    MessageGenericField = createGenericfield("Message", createStringdataValue(obj.Message), DataTypeEnum.STRING);
                }
                if (obj.SBCStatus != 0)
                {
                    SBCStatusGenericField = createGenericfield("SBCStatus", createNamedIdDataValue(obj.SBCStatus), DataTypeEnum.NAMED_ID);
                }

                S2BCommDraft.GenericFields = new GenericField[] { SupporterGroupIDGenericField, NeedIDGenericField, TemplateIDGenericField, SupporterIDGenericField, MessageGenericField, SBCStatusGenericField };

                RNObject[] createS2BCommDraft = new RNObject[] { S2BCommDraft };

                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Create S2BCommDraft record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                RNObject[] S2BCommDraftResult; ;
                head = rightNowSyncPortClient.Create(clientInfoHeader, api, createS2BCommDraft, createProcessingOptions, out S2BCommDraftResult);
                GenericObject s2bDraftId = (GenericObject)S2BCommDraftResult[0];
                appLogger.Info("S2BCommDraft record is created with ID: " + s2bDraftId.ID.id);
                RecordId = s2bDraftId.ID.id;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in WriteS2BCommDraft: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return RecordId;
        }
        public bool UpdateS2BCommDraft(S2BCommDraftData obj)
        {
            appLogger.Info("Data Received for UpdateS2BCommDraft: " + SimpleJson.SerializeObject(obj));
            bool IsSuccess = false;
            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Update S2BCommDraft Record";

                GenericObject genericObject = new GenericObject();
                RNObjectType objType = new RNObjectType();
                objType.Namespace = "SCBS_SUP";
                objType.TypeName = "S2BCommDraft";
                genericObject.ObjectType = objType;

                UpdateProcessingOptions options = new UpdateProcessingOptions();
                options.SuppressExternalEvents = false;
                options.SuppressRules = false;

                ID objID = new ID();
                objID.id = obj.ID;
                objID.idSpecified = true;

                genericObject.ID = objID;

                List<GenericField> genFieldsList = new List<GenericField>();
                GenericField SupporterGroupIDGenericField = null;
                GenericField NeedIDGenericField = null;
                GenericField TemplateIDGenericField = null;
                GenericField SupporterIDGenericField = null;
                GenericField MessageGenericField = null;
                GenericField SBCStatusGenericField = null;

                if (obj.SupporterGroupID != 0)
                {
                    SupporterGroupIDGenericField = createGenericfield("SupporterGroupID", createNamedIdDataValue(obj.SupporterGroupID), DataTypeEnum.NAMED_ID);
                    genFieldsList.Add(SupporterGroupIDGenericField);
                }
                if (obj.NeedID != 0)
                {
                    NeedIDGenericField = createGenericfield("NeedID", createNamedIdDataValue(obj.NeedID), DataTypeEnum.NAMED_ID);
                    genFieldsList.Add(NeedIDGenericField);
                }
                if (obj.TemplateID != 0)
                {
                    TemplateIDGenericField = createGenericfield("TemplateID", createIntegerdataValue(obj.TemplateID), DataTypeEnum.INTEGER);
                    genFieldsList.Add(TemplateIDGenericField);
                }
                if (obj.SupporterID != 0)
                {
                    SupporterIDGenericField = createGenericfield("SupporterID", createNamedIdDataValue(obj.SupporterID), DataTypeEnum.NAMED_ID);
                    genFieldsList.Add(SupporterIDGenericField);
                }
                if (!string.IsNullOrEmpty(obj.Message))
                {
                    string message = obj.Message.Replace("\n", Environment.NewLine);
                    MessageGenericField = createGenericfield("Message", createStringdataValue(message), DataTypeEnum.STRING);
                    genFieldsList.Add(MessageGenericField);
                }
                if (obj.SBCStatus != 0)
                {
                    SBCStatusGenericField = createGenericfield("SBCStatus", createNamedIdDataValue(obj.SBCStatus), DataTypeEnum.NAMED_ID);
                    genFieldsList.Add(SBCStatusGenericField);
                }

                genericObject.GenericFields = genFieldsList.ToArray();
                RNObject[] createObjects = new RNObject[] { genericObject };
                rightNowSyncPortClient.Update(clientInfoHeader, api, createObjects, options);
                appLogger.Info("S2BCommDraft record is updated for ID: " + obj.ID);
                IsSuccess = true;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateS2BCommDraft: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                IsSuccess = false;
            }
            return IsSuccess;
        }
        public bool DeleteS2BCommDraft(long SupporterID)
        {
            appLogger.Info("DeleteS2BCommDraft started with SupporterID: " + SupporterID);
            bool IsSuccess = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT ID FROM SCBS_SUP.S2BCommDraft WHERE SupporterID=" + SupporterID;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        long S2BCommDraftID = Convert.ToInt64(result.CSVTables[0].Rows[0]);
                        ClientInfoHeader _clientInfoHeader = new ClientInfoHeader();
                        _clientInfoHeader.AppID = "Destroy S2BCommDraft";
                        GenericObject go = new GenericObject();

                        //Set the object type
                        RNObjectType objType = new RNObjectType();
                        objType.Namespace = "SCBS_SUP";
                        objType.TypeName = "S2BCommDraft";
                        go.ObjectType = objType;

                        go.ID = new ID();
                        go.ID.id = S2BCommDraftID;
                        go.ID.idSpecified = true;

                        DestroyProcessingOptions dpo = new DestroyProcessingOptions();
                        dpo.SuppressExternalEvents = false;
                        dpo.SuppressRules = false;

                        rightNowSyncPortClient.Destroy(_clientInfoHeader, api, new RNObject[] { go }, dpo);
                        appLogger.Info("S2BCommDraft Destroy successfully for S2BCommDraftID : " + S2BCommDraftID + " and SupporterId: " + SupporterID);
                        IsSuccess = true;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in DeleteS2BCommDraft: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                IsSuccess = false;
            }
            return IsSuccess;
        }
        public string UpsertS2BCommDraft(S2BCommDraftData obj)
        {
            string ResponceMessage = "";
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT ID FROM SCBS_SUP.S2BCommDraft WHERE SupporterID=" + obj.SupporterID;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        //Update
                        obj.ID = Convert.ToInt64(result.CSVTables[0].Rows[0]);
                        UpdateS2BCommDraft(obj);
                        ResponceMessage = "S2BCommDraft record is updated in RN.";
                    }
                    else
                    {
                        //Insert
                        CreateS2BCommDraft(obj);
                        ResponceMessage = "S2BCommDraft record is created in RN.";
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpsertS2BCommDraft: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                ResponceMessage = "Error in UpsertS2BCommDraft" + e.Message;
            }
            return ResponceMessage;
        }
        public SupporterGroup GetSupGrpDetails(long NeedId)
        {
            SupporterGroup supGrpObj = new SupporterGroup();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT SCBS_CM.Commitment.SupporterGroup.ID,SCBS_CM.Commitment.SupporterGroup.Name,SCBS_CM.Commitment.SupporterGroup.PreferredName FROM SCBS_CM.Commitment WHERE SCBS_CM.Commitment.Need.ID =" + NeedId;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        supGrpObj.SupporterGroupID = Convert.ToInt64(values[0]);
                        supGrpObj.Name = values[1];
                        supGrpObj.PreferredName = values[2];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupGrpDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return supGrpObj;
        }
        #endregion
        
        #region Send Notification
        public void SendNotificationOperation(string Type, string Env)
        {
            Notifications nObj = new Notifications();

            long Supporterid = 229207;
            string Needkey = "NI033500089";

            string PreferredName = "Ana";
            long CorrespondenceID = 0;
            long FileID = 0;
            string image = "https://media.ci.org/w_150,h_150,c_thumb,g_face,q_60/v1619038483/ChildPhotos/Published/08463862_xwhcca.jpg";// Ana Image
            string RevenueID = "";

            if (Env == "dev")
            {
                CorrespondenceID = 954950;
                FileID = 33939414;
                RevenueID = "rev-26776824";
            }
            else if (Env == "live")
            {
                
                CorrespondenceID = 1044630;
                FileID = 34176784;
                //Nathenial
                RevenueID = "rev-27628417";
                PreferredName = "Luciana";
                Needkey = "CO061900351";
                Supporterid = 397069;
                
            }
            try
            {
                switch (Type)
                {
                    case "Birthday":
                        nObj.NEEDKEY = Needkey;
                        nObj.SUPPORTER_ID = Supporterid;
                        nObj.MESSAGE_TITLE = "Birthday Reminder";
                        nObj.MESSAGE_BODY = "It's 3 months until " + PreferredName + " has a birthday. Send your greeting today!";
                        nObj.MESSAGE_TYPE = "Letter";
                        nObj.DESTINATION = "Letter";
                        nObj.image = image;
                        NotificationCommonFunction(nObj, Env, Type);
                        break;
                    case "Letter":
                        nObj.NEEDKEY = Needkey;
                        nObj.SUPPORTER_ID = Supporterid;
                        nObj.MESSAGE_TITLE = "New Letter!";
                        nObj.MESSAGE_BODY = PreferredName + " has sent you a message! Read your new letter now.";
                        nObj.MESSAGE_TYPE = "Letter";
                        nObj.DESTINATION = "Letter";
                        nObj.CorrespondenceID = CorrespondenceID;
                        nObj.FileID = FileID;
                        nObj.image = image;
                        NotificationCommonFunction(nObj, Env, Type);
                        break;
                    case "Gift_TR":
                        nObj.NEEDKEY = Needkey;
                        nObj.SUPPORTER_ID = Supporterid;
                        nObj.MESSAGE_TITLE = "Gift Update";
                        nObj.MESSAGE_BODY = PreferredName + " has received your gift";
                        nObj.MESSAGE_TYPE = "Gift Update";
                        nObj.DESTINATION = "Gift Update";
                        nObj.image = image;
                        nObj.Revenueid = RevenueID;
                        NotificationCommonFunction(nObj, Env, Type);
                        break;
                    case "Letter_TR":
                        nObj.NEEDKEY = Needkey;
                        nObj.SUPPORTER_ID = Supporterid;
                        nObj.MESSAGE_TITLE = "Letter Update";
                        nObj.MESSAGE_BODY = "Your letter to " + PreferredName + " has been translated and printed for delivery! Tap to learn more.";
                        nObj.MESSAGE_TYPE = "Letter Update";
                        nObj.DESTINATION = "Letter Update";
                        nObj.CorrespondenceID = CorrespondenceID;
                        nObj.FileID = FileID;
                        nObj.image = image;
                        NotificationCommonFunction(nObj, Env, Type);
                        break;
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in SendNotificationOperation: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void SendNotificationOnType(string Type, string env)
        {
            try
            {

            }
            catch (Exception e)
            {
                appLogger.Error("Error in SendNotificationOnType: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void NotificationCommonFunction(Notifications nObj, string Env, string Type)
        {
            string ConnectionString = "";
            string IOSNotificationTopic = "";
            string AndroidNotificationTopic = "";
            if (Env == "dev")
            {
                ConnectionString = "server=172.23.161.10;uid=cukdevco_comapp;" + "pwd=Geecon0404;database=cukdevco_comukapp_v2; convert zero datetime=True;AutoEnlist=false";
                IOSNotificationTopic = "/topics/topic_generic_dev_" + nObj.SUPPORTER_ID;
                AndroidNotificationTopic = "/topics/topic_generic_android_dev_" + nObj.SUPPORTER_ID;
            }
            else if (Env == "live")
            {
                ConnectionString = "server=172.23.161.30;uid=oneview_comapp;" + "pwd=Geecon0404;database=oneview_comukapp_v2; convert zero datetime=True;AutoEnlist=false";
                IOSNotificationTopic = "/topics/topic_child_prod_" + nObj.SUPPORTER_ID;
                AndroidNotificationTopic = "/topics/topic_child_android_prod_" + nObj.SUPPORTER_ID;

            }
            try
            {
                NotificationsModel notificationObj = new NotificationsModel();
                notificationObj.RecordID = storeNotificationsInMySQLDB(nObj, ConnectionString, Type);

                notificationObj.mutable_content = true;
                notificationObj.to = IOSNotificationTopic;
                notificationObj.notification = new NotificationContent();
                notificationObj.notification.title = nObj.MESSAGE_TITLE;
                notificationObj.notification.body = nObj.MESSAGE_BODY;
                notificationObj.notification.sound = "default";
                notificationObj.notification.badge = 1;
                notificationObj.data = new NotificationData();
                notificationObj.data.destination = nObj.DESTINATION;
                notificationObj.data.CorrespondenceID = nObj.CorrespondenceID;
                notificationObj.data.FileID = nObj.FileID;
                notificationObj.data.image = nObj.image;
                notificationObj.data.revenueid = nObj.Revenueid;


                string JsonString = (new JavaScriptSerializer() { MaxJsonLength = int.MaxValue, RecursionLimit = 100 }).Serialize(notificationObj);
                appLogger.Info("IOS App: " + JsonString);
                SendNotification(notificationObj, "IOS", ConnectionString);

                Model.NotificationsModel androidnotificationObj = new Model.NotificationsModel();
                androidnotificationObj.RecordID = notificationObj.RecordID;
                androidnotificationObj.to = AndroidNotificationTopic;
                androidnotificationObj.data = new Model.NotificationData();
                androidnotificationObj.data.title = nObj.MESSAGE_TITLE;
                androidnotificationObj.data.badge = 1;
                androidnotificationObj.data.body = nObj.MESSAGE_BODY;
                androidnotificationObj.data.needkey = nObj.NEEDKEY;
                androidnotificationObj.data.destination = nObj.DESTINATION;
                androidnotificationObj.data.CorrespondenceID = nObj.CorrespondenceID;
                androidnotificationObj.data.FileID = nObj.FileID;
                androidnotificationObj.data.image = nObj.image;
                androidnotificationObj.data.revenueid = nObj.Revenueid;

                JsonString = (new JavaScriptSerializer() { MaxJsonLength = int.MaxValue, RecursionLimit = 100 }).Serialize(androidnotificationObj);
                appLogger.Info("Android App: " + JsonString);
                SendNotification(androidnotificationObj, "Android", ConnectionString);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in NotificationCommonFunction: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void SendNotification(NotificationsModel notificationObj, string source, string connectionstring)
        {
            var restClient = new RestClient("https://fcm.googleapis.com/fcm/send");     // REST Client URL
            string content = "";
            string requestObj = "";
            //string FCMkey = "";
            string FCMkey = "AAAAn6NWbGI:APA91bEohCIio551M8kjaPxVPA1BrnFlcW_2llZjQqJTed4Kj4u4f0hoGZQZZqk9q_ypkIC8qicuq94fWB9sefU7FofGVkrZABJ2V1VpJLY2HTDtnT6oD5ATYpMKuhnEKPtZfN4dc0VeMsXWawdi3zyWgWdetLBEaw";
            try
            {
                var request = new RestRequest(Method.POST);                 // REST HTTP Verb ie Method for passing request to client
                request.AddHeader("Authorization", "key=" + FCMkey);                    // Pass Compassion FCM App Service Key for Authentication
                request.AddHeader("Accept", "application/json, text/javascript, */*; q=0.01");      // Accept response in one of the listed type
                request.RequestFormat = DataFormat.Json;                    // Data format of the request

                request.AddBody(notificationObj);
                requestObj = SimpleJson.SerializeObject(notificationObj);
                IRestResponse response = restClient.Execute(request);
                content = response.Content; // raw content as string                

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    UpdateFCMID(content, notificationObj.RecordID, source, connectionstring);
                    appLogger.Info("Notifications sent successfully to topic : " + notificationObj.to);
                }
                else
                {
                    appLogger.Info("Could not send notification to topic " + notificationObj.to);
                }
                appLogger.Info("Response : " + content);
            }
            catch (Exception e)
            {
                appLogger.Error("Request Body : " + requestObj);
                appLogger.Error("Response : " + content);
                appLogger.Error("Error in sending notifications to supporters : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);

            }
        }
        public void UpdateFCMID(string FCMID, long RecordID, string source, string ConnectionString)
        {
            string Query = "";
            string DateTimeNow = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            MySql.Data.MySqlClient.MySqlConnection conn;
            conn = new MySql.Data.MySqlClient.MySqlConnection();
            if (RecordID > 0)
            {
                try
                {
                    conn.ConnectionString = ConnectionString;
                    conn.Open();
                    Query = "";
                    if (source == "Android")
                    {
                        Query = "update notifications set STATUS='Success',ANDROIDFCMMESSAGEID='" + FCMID + "',NOTIFICATONSENTTIME='" + DateTimeNow + "' where ID=" + RecordID;
                    }
                    else
                    {
                        Query = "update notifications set STATUS='Success',IOSFCMMESSAGEID='" + FCMID + "',NOTIFICATONSENTTIME='" + DateTimeNow + "' where ID=" + RecordID;
                    }
                    MySqlCommand updateCommand = new MySqlCommand(Query, conn);
                    MySqlDataReader dataReader;
                    dataReader = updateCommand.ExecuteReader();     // Here our query will be executed and data saved into the database.

                    conn.Close();
                }
                catch (Exception ex)
                {
                    appLogger.Error("Error in updating FCMID in DB for ID " + RecordID + ex.Message);
                    appLogger.Error(ex.StackTrace);
                }
                finally
                {
                    conn.Close();
                }
            }
        }
        public long storeNotificationsInMySQLDB(Notifications Notiobj, string ConnectionString, string Type)
        {
            MySqlConnection conn;
            string Query = "";
            long recordId = 0;
            string NOTIFICATIONSCHEDULETIME = DateTime.Now.ToString("yyyy-MM-dd HH:mm");
            string DATA = "";

            if (Type == "Gift_TR")
            {
                DATA = Notiobj.Revenueid;
            }
            else if (Type == "Letter" || Type == "Letter_TR")
            {
                DATA = "{^CorrespondenceID^:" + Notiobj.CorrespondenceID + ",^FileID^:" + Notiobj.FileID + ",^Image^:^" + Notiobj.image + "^}";
            }

            conn = new MySql.Data.MySqlClient.MySqlConnection();
            try
            {

                conn.ConnectionString = ConnectionString;
                conn.Open();

                Query = "insert into notifications(SUPPORTER_ID,NEEDKEY,MESSAGE_TITLE,MESSAGE_BODY,MESSAGE_TYPE,NOTIFICATIONSCHEDULETIME,DESTINATION,DATA) VALUES(" + Notiobj.SUPPORTER_ID + ",'" + Notiobj.NEEDKEY + "','" + Notiobj.MESSAGE_TITLE + "','" + Notiobj.MESSAGE_BODY + "','" + Notiobj.MESSAGE_TYPE + "','" + NOTIFICATIONSCHEDULETIME + "','" + Notiobj.DESTINATION + "','" + DATA.Replace('^', '"') + "')";
                MySqlCommand insertCommand = new MySqlCommand(Query, conn);
                MySqlDataReader dataReader;
                dataReader = insertCommand.ExecuteReader();     // Here our query will be executed and data saved into the database.
                recordId = insertCommand.LastInsertedId;
                appLogger.Info("Notification Record in DB : " + recordId);
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in storeNotificationsInMySQLDB: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                if (conn.State == System.Data.ConnectionState.Open)
                {
                    conn.Close();
                }
            }
            return recordId;
        }
        #endregion

        #region Optimization of GetS2BDraft Tile

        private void GetChildrenData(object threadContext)
        {
            ManualResetEvent doneEvent = (ManualResetEvent)threadContext;
            Child child = new Child();
            child.SupporterGroupId = DraftTileObj.Child.SupporterGroupId;
            child.SupporterGroupName = DraftTileObj.Child.SupporterGroupName;
            child.SupporterGroupPreferredName = DraftTileObj.Child.SupporterGroupPreferredName;
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                ClientInfoHeader info = new ClientInfoHeader
                {
                    AppID = "Fetch Child"
                };


                string Query = "Select SCBS_CHILD.Need from SCBS_CHILD.Need where SCBS_CHILD.Need.ID=" + DraftTileObj.Draft.NeedID;
                GenericObject genobj = new GenericObject();

                RNObjectType rntype = new RNObjectType
                {
                    Namespace = "SCBS_CHILD",
                    TypeName = "Need"
                };

                genobj.ObjectType = rntype;

                RNObject[] rnobject = new RNObject[] { genobj };

                QueryResultData[] result = null;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, rnobject, 10000, out result);
                foreach (QueryResultData fetchresult in result)
                {
                    foreach (RNObject rn in fetchresult.RNObjectsResult)
                    {
                        long needId = rn.ID.id;
                        child.NeedId = needId;
                        GenericObject fetchgen = (GenericObject)rn;
                        foreach (GenericField fetchchildfields in fetchgen.GenericFields)
                        {
                            switch (fetchchildfields.name)
                            {
                                case "Beneficiary_GlobalID":
                                    child.BeneficiaryGlobalId = FetchChildData(fetchchildfields);
                                    break;
                                case "BirthDate":
                                    string dateStr = FetchChildData(fetchchildfields);
                                    if (dateStr != "Null data")
                                    {
                                        child.BirthDate = DateTime.ParseExact(dateStr, "dd-MM-yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
                                        child.Age = (int)Math.Floor((DateTime.Now - child.BirthDate).TotalDays / 365.25D);
                                    }
                                    break;
                                case "FileAttachments":
                                    child.Image = FetchChildData(fetchchildfields);
                                    break;
                                case "ICP_ID":
                                    child.IcpId = FetchChildData(fetchchildfields);
                                    break;
                                case "ProjectName":
                                    child.ProjectName = FetchChildData(fetchchildfields);
                                    break;
                                case "NeedKey":
                                    child.ChildNeedKey = FetchChildData(fetchchildfields);
                                    break;
                                case "Name":
                                    child.FirstName = FetchChildData(fetchchildfields);
                                    break;
                                case "Gender":
                                    child.Gender = FetchChildData(fetchchildfields);
                                    if (child.Gender == "2")
                                        child.Gender = "Male";
                                    else if (child.Gender == "3")
                                        child.Gender = "Female";
                                    else
                                        child.Gender = "Unknown";
                                    break;
                                case "CountryName":
                                    child.Country = FetchChildData(fetchchildfields);
                                    break;
                                case "Country":
                                    string countryId = FetchChildData(fetchchildfields);
                                    if (countryId != "Null data")
                                        child.CountryId = Convert.ToInt64(countryId);
                                    break;
                                case "Latitude":
                                    string latitude = FetchChildData(fetchchildfields);
                                    if (latitude != "Null data")
                                        child.Latitude = latitude;
                                    else
                                        child.Latitude = "0";
                                    break;
                                case "Longitude":
                                    string longitude = FetchChildData(fetchchildfields);
                                    if (longitude != "Null data")
                                        child.Longitude = longitude;
                                    else
                                        child.Longitude = "0";
                                    break;
                                case "FullBodyImageURL":
                                    child.FullBodyImageURL = FetchChildData(fetchchildfields);
                                    break;
                                case "AbbreviatedName":
                                    string preferredName = FetchChildData(fetchchildfields);
                                    child.PreferredName = ((preferredName != "Null data") ? preferredName : "");
                                    break;
                                case "ProgramDeliveryType":
                                    string ProgramDeliveryType = FetchChildData(fetchchildfields);
                                    child.ProgramDeliveryType = ((ProgramDeliveryType != "Null data") ? ProgramDeliveryType : "");
                                    break;
                            }
                        }

                        if (!string.IsNullOrWhiteSpace(child.FullBodyImageURL) && child.FullBodyImageURL != "Null data")
                            child.ImageURL = child.FullBodyImageURL.Replace("/w_150/", "/w_210,h_245,c_thumb,g_face/");
                        else
                            child.ImageURL = "https://services.ukpc.ci.org/services/display.php?key=1egmp78dy43&id=" + child.ChildNeedKey + "&&w=120&h=160";
                        lock (lockThis)
                        {
                            DraftTileObj.Child = child;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error for Need : " + DraftTileObj.Draft.NeedID + " in GetChildrenData : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            finally
            {
                doneEvent.Set();
            }
        }
        public void GetS2BCommDraftV2(long SupporterId)
        {
            appLogger.Info("GetS2BCommDraft started with supporterid: " + SupporterId);
            S2BCommDraftData s2bobj = new S2BCommDraftData();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT ID,Message,NeedID,SBCStatus,SupporterGroupID,SupporterID,TemplateID,CreatedTime,SBCStatus.lookupname,SupporterGroupID.Name,SupporterGroupID.PreferredName FROM SCBS_SUP.S2BCommDraft WHERE SupporterID=" + SupporterId;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        s2bobj.ID = Convert.ToInt64(values[0]);
                        //s2bobj.Message = string.IsNullOrEmpty(values[1]) ? "" : values[1];
                        s2bobj.NeedID = Convert.ToInt64(values[2]);
                        s2bobj.SBCStatus = string.IsNullOrEmpty(values[3]) ? 0 : Convert.ToInt32(values[3]);
                        s2bobj.SupporterGroupID = Convert.ToInt64(values[4]);
                        s2bobj.SupporterID = Convert.ToInt64(values[5]);
                        s2bobj.TemplateID = Convert.ToInt32(values[6]);
                        if (!string.IsNullOrEmpty(values[7]))
                        {
                            DateTime dt = DateTime.ParseExact(values[7], "yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.CultureInfo.InvariantCulture);
                            s2bobj.CreatedTime = dt.ToString("yyyy-MM-dd HH:mm:ss");
                        }
                        s2bobj.SBCStatusLookupName = string.IsNullOrEmpty(values[8]) ? "" : values[8];
                        DraftTileObj.Child.SupporterGroupId = Convert.ToInt64(values[4]);
                        DraftTileObj.Child.SupporterGroupName = values[9];
                        DraftTileObj.Child.SupporterGroupPreferredName = values[10];
                        DraftTileObj.Draft = s2bobj;
                    }
                    else
                    {
                        s2bobj = null;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetS2BCommDraft: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public void GetSupGrpDetails(object threadContext)
        {
            ManualResetEvent doneEvent = (ManualResetEvent)threadContext;
            SupporterGroup supGrpObj = new SupporterGroup();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT SCBS_CM.Commitment.SupporterGroup.ID,SCBS_CM.Commitment.SupporterGroup.Name,SCBS_CM.Commitment.SupporterGroup.PreferredName FROM SCBS_CM.Commitment WHERE SCBS_CM.Commitment.Need.ID =" + DraftTileObj.Draft.NeedID;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        DraftTileObj.Child.SupporterGroupId = Convert.ToInt64(values[0]);
                        DraftTileObj.Child.SupporterGroupName = values[1];
                        DraftTileObj.Child.SupporterGroupPreferredName = values[2];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupGrpDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                doneEvent.Set();
            }
        }
        public void GetSupGrpDetailsv2(long NeedId)
        {

            SupporterGroup supGrpObj = new SupporterGroup();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get S2BCommDraft Record";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT SCBS_CM.Commitment.SupporterGroup.ID,SCBS_CM.Commitment.SupporterGroup.Name,SCBS_CM.Commitment.SupporterGroup.PreferredName FROM SCBS_CM.Commitment WHERE SCBS_CM.Commitment.Need.ID =" + NeedId;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        DraftTileObj.Child.SupporterGroupId = Convert.ToInt64(values[0]);
                        DraftTileObj.Child.SupporterGroupName = values[1];
                        DraftTileObj.Child.SupporterGroupPreferredName = values[2];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupGrpDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

        }
        public Message OptimizeGetS2BCommDraftTile(long SupporterId)
        {
            try
            {
                S2BCommDraftData s2bDraft = new S2BCommDraftData();
                Child child = new Child();

                DraftTileObj.Draft = s2bDraft;
                DraftTileObj.Child = child;
                GetS2BCommDraftV2(SupporterId);

                if (DraftTileObj.Draft.ID != 0)
                {
                    List<ManualResetEvent> doneEvents = new List<ManualResetEvent>();

                    ManualResetEvent doneEvent = new ManualResetEvent(false);
                    doneEvents.Add(doneEvent);
                    ThreadPool.QueueUserWorkItem(GetChildrenData, doneEvent);

                    doneEvent = new ManualResetEvent(false);
                    doneEvents.Add(doneEvent);
                    ThreadPool.QueueUserWorkItem(GetDraftMessage, doneEvent);


                    WaitHandle.WaitAll(doneEvents.ToArray());

                    if (DraftTileObj.Child.NeedId != 0)
                    {
                        TemplateInfo temInfo = GetTemplateURL(DraftTileObj.Draft.TemplateID);
                        if (temInfo != null)
                        {
                            DraftTileObj.Draft.TemplateUrl = Model.AutomationBot.Constant.HOSTNAME + "wp-content/themes/donation" + temInfo.TemplateURL;
                        }
                        DraftTileObj = new Message
                        {
                            Type = "Draft",
                            SubType = "DR0",
                            Title = "Continue Draft",
                            Body = "You have a draft message to " + DraftTileObj.Child.PreferredName + ", which was saved on " + Convert.ToDateTime(DraftTileObj.Draft.CreatedTime).ToString("dd MMM yyyy"),
                            ActionText = DraftTileObj.Child.PreferredName,
                            ActionDestination = "Letter",
                            Draft = DraftTileObj.Draft,
                            Child = DraftTileObj.Child
                        };
                    }
                }
                else
                {
                    DraftTileObj = null;
                }

                return DraftTileObj;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in OptimizeGetS2BCommDraftTile" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return null;
            }
        }
        public void GetDraftMessage(object threadContext)
        {
            ManualResetEvent doneEvent = (ManualResetEvent)threadContext;
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get S2BCommDraft";
            string Query = "Select SCBS_SUP.S2BCommDraft from SCBS_SUP.S2BCommDraft where SupporterID = " + DraftTileObj.Draft.SupporterID;

            GenericObject genobj = new GenericObject();

            RNObjectType rntype = new RNObjectType();
            rntype.Namespace = "SCBS_SUP";
            rntype.TypeName = "S2BCommDraft";

            genobj.ObjectType = rntype;

            RNObject[] rnobject = new RNObject[] { genobj };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

            try
            {
                QueryResultData[] results;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, rnobject, 10000, out results);

                foreach (QueryResultData fetchresult in results)
                {
                    foreach (RNObject rn in fetchresult.RNObjectsResult)
                    {
                        GenericObject fetchgen = (GenericObject)rn;
                        foreach (GenericField fetchchildfields in fetchgen.GenericFields)
                        {
                            switch (fetchchildfields.name)
                            {
                                case "Message":
                                    string Message = fetchchilddata(fetchchildfields);
                                    DraftTileObj.Draft.Message = (Message != "Null data") ? Message : "";
                                    break;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDraftMessage: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                doneEvent.Set();
            }
        }
        public S2BCommDraftData GetDraftDetails(long SupporterId)
        {
            S2BCommDraftData s2bobj = new S2BCommDraftData();

            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get S2BCommDraft";
            string Query = "Select SCBS_SUP.S2BCommDraft from SCBS_SUP.S2BCommDraft where SupporterID = " + SupporterId;

            GenericObject genobj = new GenericObject();

            RNObjectType rntype = new RNObjectType();
            rntype.Namespace = "SCBS_SUP";
            rntype.TypeName = "S2BCommDraft";

            genobj.ObjectType = rntype;

            RNObject[] rnobject = new RNObject[] { genobj };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

            try
            {
                QueryResultData[] results;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, rnobject, 10000, out results);

                foreach (QueryResultData fetchresult in results)
                {
                    foreach (RNObject rn in fetchresult.RNObjectsResult)
                    {
                        GenericObject fetchgen = (GenericObject)rn;
                        s2bobj.ID = fetchgen.ID.id;
                        foreach (GenericField fetchchildfields in fetchgen.GenericFields)
                        {
                            switch (fetchchildfields.name)
                            {
                                case "Message":
                                    string Message = fetchchilddata(fetchchildfields);
                                    s2bobj.Message = (Message != "Null data") ? Message : "";
                                    break;
                                case "NeedID":
                                    string NeedID = fetchchilddata(fetchchildfields);
                                    s2bobj.NeedID = (NeedID != "Null data") ? Convert.ToInt32(NeedID) : 0;
                                    break;
                                case "SBCStatus":
                                    string SBCStatus = fetchchilddata(fetchchildfields);
                                    s2bobj.SBCStatus = (SBCStatus != "Null data") ? Convert.ToInt32(SBCStatus) : 0;
                                    break;
                                case "SupporterGroupID":
                                    string SupporterGroupID = fetchchilddata(fetchchildfields);
                                    s2bobj.SBCStatus = (SupporterGroupID != "Null data") ? Convert.ToInt32(SupporterGroupID) : 0;
                                    break;
                                case "SupporterID":
                                    string SupporterID = fetchchilddata(fetchchildfields);
                                    s2bobj.SBCStatus = (SupporterID != "Null data") ? Convert.ToInt32(SupporterID) : 0;
                                    break;
                                case "TemplateID":
                                    string TemplateID = fetchchilddata(fetchchildfields);
                                    s2bobj.SBCStatus = (TemplateID != "Null data") ? Convert.ToInt32(TemplateID) : 0;
                                    break;
                                case "CreatedTime":
                                    string CreatedTime = fetchchilddata(fetchchildfields);
                                    s2bobj.CreatedTime = (CreatedTime != "Null data") ? Convert.ToDateTime(CreatedTime).ToString("yyyy-MM-dd HH:mm:ss") : "";
                                    break;
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDraftDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                s2bobj = null;
            }
            return s2bobj;
        }

        #endregion
        public void getS2BIdByComKit(string comKitId)
        {

            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Get S2BId from ComKitId";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                byte[] byteArray;
                String queryString = "SELECT SCBS_SUP.S2BCommunication.ID FROM SCBS_SUP.S2BCommunication Where SCBS_SUP.S2BCommunication.CommKitID = '" + comKitId + "' AND SCBS_SUP.S2BCommunication.Visible IN (1,0) ";
                CSVTableSet queryCSV;
                head = rightNowSyncPortClient.QueryCSV(clientInfoHeader, api, queryString, 10000, "^", false, true, out queryCSV, out byteArray);
                CSVTable[] csvTables = queryCSV.CSVTables;

                if (csvTables[0].Rows.Length > 0)
                {

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching S2BCommunication record with comkit id : " + comKitId);
                appLogger.Error(e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }


        }
        public void GetChildSupporterData(string NeedKey)
        {
            
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch Data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "SELECT C.Need.AbbreviatedName,C.SupporterGroup.PrioritySupporterId,C.Need.ID FROM SCBS_CM.Commitment C WHERE C.Need.NeedKey  = '" + NeedKey + "'";
                byte[] byteArray;

                CSVTableSet result = null;
                head = rightNowSyncPortClient.QueryCSV(info,api, query, 100000, ",", false, true,out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split(',');
                        
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetChildSupporterData: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                

            }
            
        }
        public void CheckAccountMethod()
        {
            getConstituentDetailOnAccountNo("73841060", "159900");
        }
        public List<DataListResultRow> getConstituentDetailOnAccountNo(string Accountno, string sortcode)
        {

            DataListLoadRequest req = new DataListLoadRequest();
            req.ClientAppInfo = GetRequestHeader();
            req.DataListID = new Guid("edefea1f-2f73-43a2-85b8-3018d4f7f67e");
            req.IncludeMetaData = true;
            var fvSet = new DataFormFieldValueSet();

            fvSet.Add("REVENUESTANDINGORDERACCOUNTACCOUNTNUMBER", Accountno);
            fvSet.Add("REVENUESTANDINGORDERACCOUNTFINANCIALINSTITUTIONSORTCODE", sortcode);


            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            req.Parameters = dfi;
            
            List<DataListResultRow> row = new List<DataListResultRow>();
            try
            {
                var result = _service.DataListLoad(req);
                if (result.TotalRowsInReply > 0)
                {
                    foreach (var res in result.Rows)
                    {
                        row.Add(res);
                    }
                }
            }
            catch (AppFxWebServiceException e)
            {
                appLogger.Error("Error in getConstituentDetailOnAccountNo : " + e.Message + " for " + Accountno + " And Sortcode: " + sortcode + " at Time " + DateTime.Now);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getConstituentDetailOnAccountNo : " + e.Message + " for " + Accountno + " And Sortcode: " + sortcode + " at Time " + DateTime.Now);
            }
            return row;

        }
        public void DigitalChoiceCheck(long contactid)
        {
            string DigitalChoice = "";
            SupporterPreferences spObj = FetchSupporterPreferences(contactid);
            
            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && (spObj.Comments == "No Pack" || spObj.Comments == "I don't want a physical pack in the post" || string.IsNullOrEmpty(spObj.Comments))) { DigitalChoice = "Digital"; }
            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && (spObj.Comments == "Welcome Pack" || spObj.Comments == "I do want a physical pack in the post")) { DigitalChoice = "Hybrid Welcome Pack"; }
            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-Out" && spObj.Comments == "Photo Only") { DigitalChoice = "Hybrid Photo Pack"; }
            if (!string.IsNullOrEmpty(spObj.Post) && spObj.Post == "Opt-In") { DigitalChoice = "Traditional"; }
        }



        #region Exit to Resolve Automation

        public void FindDepartedEnqueriesRecords()
        {
            appLogger.Info("FindDepartedEnqueriesRecords process started at " + DateTime.Now);
            try
            {
                UpdateDailySchedulerStatus("TriggerExitToResolve", "In Progress", "UPDATE_STATUS");
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                string fromTime = null;
                TimeScale scale = GetTimeScaleData();
                string ClosedTimeFilter = null;
                int Unit = Convert.ToInt32(scale.Unit);
                if (scale != null)
                {
                    switch (scale.TimescaleType)
                    {
                        case "Hours":
                            fromTime = DateTime.Now.AddHours(-Unit).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                            break;
                        case "Days":
                            fromTime = DateTime.Now.AddDays(-Unit).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                            break;
                        case "Weeks":
                            fromTime = DateTime.Now.AddDays(-(Unit * 7)).ToString("yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'");
                            break;

                    }
                    //ClosedTimeFilter = " AND I.closedTime < date_add( sysdate(), -"+ scale.Unit + ", '"+ TimescaleType + "',1)";

                    ClosedTimeFilter = " AND I.closedTime < '" + fromTime + "'";
                }

                #region Find Exit to resolve records operation
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get Incident Data";
                /*
                 87 - E C - Unplanned Exits to comm. (Calls)
                 84 - E C - Unplanned Exits to comm. (Letters)
                 85 - E C - Planned Exits to comm. (Planned)
                 83 - E C - Project Closures

                */
                /*
                        As discussed with Jess, to find Supporter Enquiries to start the process, the enquiry will be Resolved,
                           have a disposition of Child Change - Auto Sub Child Pending and have been closed 3 weeks ago.
                */

                //Closed	Date() - 3 weeks

                string Query = @"SELECT 
                                  Incident
                                FROM
                                  Incident I
                                WHERE
                                  I.queue IN(87, 84, 85, 83) 
                                  AND I.statusWithType.status.lookupname IN(
                                    'Resolved (Automated)', 'Resolved'
                                  ) 
                                  AND (I.customFields.c.setupstatus IS NULL OR I.customFields.c.setupstatus.lookupname = 'Retry')
                                  AND I.disposition.lookupName = 'Child change [auto-sub child pending]'
                                  AND I.customFields.c.campaignformtype IN (1542, 1543, 1544) " + ClosedTimeFilter;

                //AND I.closedTime > date_add( sysdate(), -4, 'hour',1)
                //AND I.closedTime > date_add( sysdate(), -21, 'day',1)

                //1542 - Departure Enquiry
                //1543 - Departure Enquiry - Project Closure
                //1544 - Departure Enquiry - Graduation

                Incident contactTemplate = new Incident();
                RNObject[] objectTemplates = new RNObject[] { contactTemplate };
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);
                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;
                if (rnObjects != null && rnObjects.Length > 0)
                {
                    appLogger.Info("Total record found " + rnObjects.Length);
                    foreach (QueryResultData queryResultData in queryObjects)
                    {
                        foreach (RNObject data in queryResultData.RNObjectsResult)
                        {
                            appLogger.Info("ETR process started for incident id: " + data.ID.id);
                            TriggerExitToResolveAutomationProcess(data.ID.id);
                        }
                    }
                }
                else
                {
                    appLogger.Info("No ExitToResolve records found for (Incident.CreatedTime >= '" + fromTime + "' OR Incident.UpdatedTime>= '" + fromTime + "')");
                }
                #endregion

                UpdateDailySchedulerStatus("TriggerExitToResolve", "Completed", "UPDATE_STATUS_FINAL");
            }
            catch (Exception e)
            {
                UpdateDailySchedulerStatus("TriggerExitToResolve", "Completed", "UPDATE_STATUS_FINAL");
                appLogger.Error("Error in FindDepartedEnqueriesRecords: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            finally
            {
                UpdateDailySchedulerStatus("TriggerExitToResolve", "Completed", "UPDATE_STATUS_FINAL");
            }
            appLogger.Info("FindDepartedEnqueriesRecords process ended at " + DateTime.Now);

        }
        public void TriggerExitToResolveAutomationProcess(long IncidentId)
        {
            ExitToResolveExceptions Exceptions = new ExitToResolveExceptions();
            Exceptions.Exception = new List<string>();
            bool CreateManualEnquiry = false;
            bool CreateAutomatedEnquiry = true;
            bool DoNotIgnoreException = true;
            Guid Guid = Guid.NewGuid();
            string SEFGUID = "{" + Guid.ToString().ToUpper() + "}";

            appLogger.Info("TriggerExitToResolveAutomationProcess started with incidentid: " + IncidentId);
            try
            {
                //Get incident data
                ExitEnquiryData iData = GetDepartureEnquiryData(IncidentId);

                /*if (!string.IsNullOrEmpty(iData.SefGuid))
                {
                    SEFGUID = iData.SefGuid;
                }*/

                UpdateDepartureSetupStatus(IncidentId, SEFGUID, false);
                if (iData.Thread != null)
                {
                    if (!string.IsNullOrEmpty(iData.IgnoreException) && iData.IgnoreException == "Yes")
                    {
                        DoNotIgnoreException = false;
                        CreateAutomatedEnquiry = true;
                    }

                    //Exception 2 is for BB
                    bool IsReduceRateOrDonationBreakInBB = IsConstituentReduceRateOrDonationBreakInBB(iData.Thread.LocalBeneficiaryID);
                    if (IsReduceRateOrDonationBreakInBB)
                    {

                        Exceptions.Length++;
                        Exceptions.Exception.Add("on donation break / reduced rate");
                        CreateManualEnquiry = true;

                    }
                    else
                    {
                        appLogger.Info("Exception 2 not found. (donation break / reduced rate)");
                    }

                    //Exception 3 CheckIFSupporterHaveAOpenEnquiry
                    bool IsSupporterHasAOpenEnquiry = CheckIFSupporterHaveAOpenEnquiry(iData.ContactId);
                    if (IsSupporterHasAOpenEnquiry)
                    {

                        Exceptions.Length++;
                        Exceptions.Exception.Add("open enquiry");
                        CreateManualEnquiry = true;
                    }
                    else
                    {
                        appLogger.Info("Exception 3 not found. (open enquiry)");
                    }

                    if (DoNotIgnoreException)
                    {
                        #region Check Exit to resolve Exceptions
                        // Find automation state
                        ResolveExceptionConfigurationRow recData = FindAutomationState(iData.Thread);
                        if (recData != null)
                        {
                            if (recData.AutomationState == "Manual")
                            {
                                Exceptions.Length++;
                                Exceptions.Exception.Add("Sensitive exit");
                                CreateManualEnquiry = true;
                            }
                            else if (recData.AutomationState == "Automate")
                            {
                                CreateAutomatedEnquiry = true;
                            }
                        }
                        else
                        {
                            appLogger.Info("recData object is null for incidentid: " + IncidentId);
                        }

                        //Exception 4 IsSupporterHasOtherReasonInDepSubPreference
                        bool IsSupporterHasOtherReason = IsSupporterHasOtherReasonInDepSubPreference(iData.Thread.LocalBeneficiaryID);
                        if (IsSupporterHasOtherReason)
                        {

                            Exceptions.Length++;
                            Exceptions.Exception.Add("other reason in dep sub preferences");
                            CreateManualEnquiry = true;

                        }
                        else
                        {
                            appLogger.Info("Exception 4 not found. (other reason in dep sub preferences)");
                        }

                        //Exception 5 The supporter is a vulnerable supporter
                        bool IsVulnerableSup = IsVulnerableSupporter(iData.ContactId);
                        if (IsVulnerableSup)
                        {

                            Exceptions.Length++;
                            Exceptions.Exception.Add("PVC");
                            CreateManualEnquiry = true;

                        }
                        else
                        {
                            appLogger.Info("Exception 5 not found. (PVC vulnerable supporter)");
                        }
                        //Exception 6 IsSubChildOnSupporterGroupAreTrue
                        bool IsSubChildOnSupporterGroup = IsSubChildOnSupporterGroupAreTrue(iData.Thread.LocalBeneficiaryID);
                        if (IsSubChildOnSupporterGroup)
                        {

                            Exceptions.Length++;
                            Exceptions.Exception.Add("sub preference no");
                            CreateManualEnquiry = true;
                        }
                        else
                        {
                            appLogger.Info("Exception 6 not found. (sub preference no)");
                        }

                        #endregion
                    }


                    #region Create Manual Enquiry

                    if (CreateManualEnquiry)
                    {
                        UpdateSetupBotStatusCheck(IncidentId, "In Progress");
                        InsertSEFOperationResponse(SEFGUID, "Manual exception created for this record.", "ExitToResolve", true);//SEF Log
                        CreateIncidentData data = new CreateIncidentData();
                        data.ContactId = iData.ContactId;
                        data.NeedKey = iData.Thread.LocalBeneficiaryID;
                        data.ExceptionCount = Exceptions.Length;
                        data.Exceptions = Exceptions.Exception;
                        data.SEFGUID = SEFGUID;
                        CreateExitToResolveManualEnquiry(data);
                        CreateAutomatedEnquiry = false;
                        UpdateSetupBotStatusCheck(IncidentId, "Manual");
                        UpdateRTEenquiryManualStatus(IncidentId);
                    }

                    #endregion

                    #region Create Automated Enquiry

                    if (CreateAutomatedEnquiry)
                    {
                        bool IsReadyToSetup = false;
                        long Automation_IncidentId = 0;
                        InsertSEFOperationResponse(SEFGUID, "Create automated enquiry process started...", "ExitToResolve", true);//SEF Log
                        UpdateSetupBotStatusCheck(IncidentId, "In Progress");
                        CreateIncidentData data = new CreateIncidentData();
                        data.ContactId = iData.ContactId;
                        data.NeedKey = iData.Thread.LocalBeneficiaryID;
                        data.ExceptionCount = Exceptions.Length;
                        data.Exceptions = Exceptions.Exception;
                        data.Thread = iData.Thread;
                        data.SEFGUID = SEFGUID;
                        DupSubPreferences depsub = new DupSubPreferences();
                        depsub = GetDepSubPreferences(data.NeedKey);
                        depsub.IncidentId = IncidentId;
                        depsub.SetupStatus = iData.SetupStatus;
                        depsub.SefGuid = SEFGUID;
                        PrivateNote privateNote = FindAndHoldChildMainFunction(depsub);

                        if (privateNote.HoldId == null || privateNote.HoldId == "null")
                        {

                            long AutomatedIncidentId = 0;

                            if (!string.IsNullOrEmpty(iData.SetupStatus) && iData.SetupStatus == "Retry")
                            {
                                appLogger.Info("SetupStatus is already set to retry as we are setting SetupStatus to Failed");
                                long ManualIncidentId = CreateIncidentNoChildAvailable(data);
                                UpdateSetupBotStatusCheck(IncidentId, "Failed");
                                if (ManualIncidentId == 0)
                                {
                                    appLogger.Info("Failed to create Manual enquiry for No Child Available Case.");
                                }
                                else
                                {
                                    InsertSEFOperationResponse(SEFGUID, "Manual enquiry is created for No Child Available", "ExitToResolve", true);//SEF Log
                                }
                            }
                            else
                            {
                                AutomatedIncidentId = CreateIncidentAutoSubChildFaild(data);
                                appLogger.Info("Set SetupStatus to Retry as Automated Enquiry No Child Available.");
                                UpdateSetupBotStatusCheck(IncidentId, "Retry");
                            }

                            #region Check if Automated & Manual Enquiry is Created for No Child Available Case 

                            if (AutomatedIncidentId == 0)
                            {
                                appLogger.Info("Failed to create Automated enquiry for Auto Sub Child Failed case.");
                            }
                            else
                            {
                                InsertSEFOperationResponse(SEFGUID, "Automated enquiry is created for Sub Child Failed", "ExitToResolve", true);//SEF Log
                            }

                            #endregion
                        }
                        else
                        {
                            data.privateNote = privateNote;
                            //if Automated incident already created
                            if (!string.IsNullOrEmpty(iData.SetupStatus) && iData.SetupStatus == "Retry")
                            {
                                Automation_IncidentId = CheckIfAutomatedEnquiryIsCreated(iData.ContactId, false);
                                if (Automation_IncidentId == 0)
                                {
                                    Automation_IncidentId = CheckIfAutomatedEnquiryIsCreated(iData.ContactId, true); //Check for success case for automated enquiry
                                }
                                if (Automation_IncidentId != 0)
                                {
                                    UpdateAutomatedEnquiry(Automation_IncidentId, data);
                                }
                                else
                                {
                                    appLogger.Info("No automated enquiry found for supporter: " + iData.ContactId + " Case: (SetupStatus = Retry)");
                                }
                            }
                            else
                            {
                                Automation_IncidentId = CheckIfAutomatedEnquiryIsCreated(iData.ContactId, true);
                                if (Automation_IncidentId == 0)
                                {
                                    Automation_IncidentId = CreateExitToResolveAutomatedEnquiry(data);
                                }
                            }

                            if (Automation_IncidentId != 0)
                            {
                                //UpdateSetupBotStatusCheck(IncidentId, "Succeeded");
                                InsertSEFOperationResponse(SEFGUID, "Automated enquiry created with incidentId: " + Automation_IncidentId, "ExitToResolve", true);//SEF Log
                                IsReadyToSetup = true;
                            }
                            else
                            {
                                appLogger.Info("Child search and hold work successfully but Failed to create automated enquiry");
                                InsertSEFOperationResponse(SEFGUID, "Failed to create automated enquiry in RN", "ExitToResolve", true);//SEF Log
                            }
                        }
                        InsertSEFOperationResponse(SEFGUID, "Create automated enquiry process ended...", "ExitToResolve", true);//SEF Log

                        if (IsReadyToSetup)
                        {

                            int Amount = GetRGAmountFromNeedkey(data.NeedKey);

                            //Start SEF Departure process
                            if (Amount != 0)
                            {
                                DepartureSEF dObj = new DepartureSEF();
                                dObj.ContactId = data.ContactId;
                                dObj.NewNeedKey = data.privateNote.NeedKey;
                                dObj.OldNeedKey = data.NeedKey;
                                dObj.RTXIncidentId = Automation_IncidentId;
                                dObj.ETREnquiryId = IncidentId;
                                dObj.SEFGUID = SEFGUID;
                                dObj.Amount = Amount;
                                AssignedAndSendDepartureRequestToESB(dObj);
                            }
                            else
                            {
                                CreateIncidentAutomationOfSubFailedAtSEF(data);
                                UpdateSetupBotStatusCheck(IncidentId, "Failed");
                                UpdateRTEenquiryStatus(IncidentId, false);
                                InsertSEFOperationResponse(SEFGUID, "Stopping the automation as amount is blank.", "ExitToResolve", false);//SEF Log
                            }
                        }
                        else
                        {
                            appLogger.Info("IsReadyToSetup is false.");
                        }
                    }

                    #endregion
                }
                else
                {
                    appLogger.Info("Enquiry thread data is null for incidentid: " + IncidentId);
                    InsertSEFOperationResponse(SEFGUID, "Data is not available in enquiry thread", "ExitToResolve", false);//SEF Log
                    UpdateSetupBotStatusCheck(IncidentId, "Failed");
                    UpdateRTEenquiryStatus(IncidentId, false);
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in TriggerExitToResolveAutomationProcess: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("TriggerExitToResolveAutomationProcess ended with incidentid: " + IncidentId);
        }
        public long CheckIfAutomatedEnquiryIsCreated(long ContactId, bool IsSuccesCase)
        {
            long IncidentId = 0;
            int disposition = 1287;//1192 tst1 - 1287 prod - Auto-sub child failed
            if (IsSuccesCase)
            {
                disposition = 1288;//1188 tst1 - 1288 prod Child change [auto-sub child allocated]

            }

            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = @"SELECT 
                      I.ID
                    FROM
                      Incident I
                    WHERE
                      I.queue = 125 AND disposition = " + disposition + " AND I.PrimaryContact.Contact.ID = " + ContactId;

                //"E C - Exits to Resolve - automated" - 116 tst1 / 125 prod
                

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        if (!string.IsNullOrEmpty(result.CSVTables[0].Rows[0]))
                        {
                            IncidentId = Convert.ToInt64(result.CSVTables[0].Rows[0]);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error($"Error in CheckIfAutomatedEnquiryIsCreated {e.Message}");
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentId;
        }
        public ResolveExceptionConfigurationRow FindAutomationState(ExitEnquiryThreadData thread)
        {
            ResolveExceptionConfigurationRow data = new ResolveExceptionConfigurationRow();
            try
            {
                MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString);

                string Query = "SELECT * FROM ResolveExceptionConfiguration WHERE Type='" + thread.ExitType.Replace(" ", "") + "' AND SubType='" + thread.ExitReason + "'";
                conn.Open();
                MySqlCommand cmd = new MySqlCommand(Query, conn);
                MySqlDataReader reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    data.SequenceID = Convert.ToInt64(reader[0]);
                    data.Type = reader[1] != null ? reader[1].ToString() : "";
                    data.SubType = reader[2] != null ? reader[2].ToString() : "";
                    data.Priority = Convert.ToInt32(reader[3]);
                    data.AutomationState = reader[4] != null ? reader[4].ToString() : "";
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FindAutomationState:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return null;
            }
            return data;
        }
        public ExitEnquiryData GetDepartureEnquiryData(long IncidentId)
        {
            appLogger.Info("GetDepartureEnquiryData started with incidentid: " + IncidentId);
            ExitEnquiryData iData = new ExitEnquiryData();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = @"SELECT 
                      Incident.primaryContact.contact.name, 
                      Incident.threads.text, 
                      Incident.category.lookupName, 
                      Incident.Customfields.c.setupstatus.lookupname, 
                      Incident.PrimaryContact.Contact.ID, 
                      Incident.Customfields.c.internalsubject,
                      Incident.Customfields.c.ignoreexceptions.lookupName,
                      Incident.Customfields.c.setupstatus.lookupName,
                      Incident.Customfields.c.setupguid
                    FROM
                      Incident
                    WHERE
                      Incident.ID = " + IncidentId + " ORDER BY Incident.threads.createdTime ASC limit 0, 1";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        iData.SupporterName = !string.IsNullOrEmpty(values[0]) ? values[0] : "";

                        if (!string.IsNullOrEmpty(values[1]))
                        {
                            List<string> Columns = new List<string>();
                            string ThreadText = values[1].Trim('\"');
                            Columns.AddRange(ThreadText.Split('\n'));
                            Dictionary<string, string> ThreadDictionary = new Dictionary<string, string>();
                            foreach (string data in Columns)
                            {
                                if (data.Contains(":"))
                                {
                                    string[] value = data.Split(':');
                                    ThreadDictionary.Add(value[0].Replace(" ", ""), value[1].TrimStart(' ').TrimEnd(' '));
                                }
                            }
                            ExitEnquiryThreadData Thread = GetObject<ExitEnquiryThreadData>(ThreadDictionary, "IncidentThreadText");

                            if (Thread.LocalBeneficiaryID != null)
                            {
                                iData.Thread = Thread;
                            }
                            else
                            {
                                iData.Thread = null;
                            }
                        }
                        iData.Category = !string.IsNullOrEmpty(values[2]) ? values[2] : "";
                        iData.SetupStatus = !string.IsNullOrEmpty(values[3]) ? values[3] : "";
                        iData.ContactId = !string.IsNullOrEmpty(values[4]) ? Convert.ToInt64(values[4]) : 0;
                        iData.InternalSubject = !string.IsNullOrEmpty(values[5]) ? values[5] : "";
                        iData.IgnoreException = !string.IsNullOrEmpty(values[6]) ? values[6] : "";
                        iData.SetupStatus = !string.IsNullOrEmpty(values[7]) ? values[7] : "";
                        iData.SefGuid = !string.IsNullOrEmpty(values[8]) ? values[8] : "";
                    }
                    else
                    {
                        appLogger.Info("No data available in GetDepartureEnquiryData row field");
                    }
                }
                else
                {
                    appLogger.Info("No incident record found with GetDepartureEnquiryData function");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDepartureEnquiryData: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return null;
            }
            appLogger.Info("GetDepartureEnquiryData ended with incidentid: " + IncidentId);
            return iData;
        }
        public bool CheckIFSupporterHaveAOpenEnquiry(long ContactId)
        {
            appLogger.Info("CheckIFSupporterHaveAOpenEnquiry started with supporterid: " + ContactId);
            bool IsSupporterHaveOpenEnquaries = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter id";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT I.ID FROM Incident I WHERE I.PrimaryContact.Contact.ID = " + ContactId;
                string status = " AND ( I.statusWithType.status.lookupname NOT IN ('Resolved (Automated)','Resolved','Resolved (No Contact)','Resolved (Message Left)','Resolved (India)')";

                //string disposition = " OR I.disposition.lookupname = 'Follow up')"; //Or a relevant disposition (which is anything in the ‘Follow up’ disposition folder in RN).
                string disposition = " OR I.disposition.level2 = 1272)";//1272 - Follow up prod

                query = query + status + disposition;

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);

                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        IsSupporterHaveOpenEnquaries = true;
                    }
                    else
                    {
                        appLogger.Info("No data available in row field");
                    }
                }
                else
                {
                    appLogger.Info("No contact record found");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIFSupporterHaveAOpenEnquiry: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            return IsSupporterHaveOpenEnquaries;
        }
        public bool IsSupporterHasOtherReasonInDepSubPreference(string Needkey)
        {
            appLogger.Info("IsSupporterHasOtherReasonInDepSubPreference Check started with Needkey :" + Needkey);
            bool IsSupporterHasOtherReason = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "commitment data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT C.SupporterGroup.SubPreferences FROM SCBS_CM.Commitment C WHERE C.Need.NeedKey = '" + Needkey + "' AND C.SponsorshipAct != 1106 AND C.EndDate IS NULL";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);

                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        if (!string.IsNullOrEmpty(result.CSVTables[0].Rows[0]))
                        {
                            IsSupporterHasOtherReason = true;
                        }
                        else
                        {
                            appLogger.Info("SubPreferences is not contain any values");
                        }
                    }
                    else
                    {
                        appLogger.Info("No row record found");
                    }
                }
                else
                {
                    appLogger.Info("No SubPreferences record found");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in IsSupporterHasOtherReasonInDepSubPreference: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IsSupporterHasOtherReason;
        }
        public bool IsSubChildOnSupporterGroupAreTrue(string Needkey)
        {
            appLogger.Info("IsSubChildOnSupporterGroupAreTrue started with needkey: " + Needkey);
            bool IsSubChildOnSupporterGroupAreFalse = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "commitment data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT C.SupporterGroup.SubChildren FROM SCBS_CM.Commitment C WHERE C.Need.NeedKey = '" + Needkey + "' AND C.SponsorshipAct != 1106 AND C.EndDate IS NULL";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);

                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        if (!string.IsNullOrEmpty(result.CSVTables[0].Rows[0]))
                        {
                            if (result.CSVTables[0].Rows[0] == "0")
                            {
                                IsSubChildOnSupporterGroupAreFalse = true;
                            }
                        }
                        else
                        {
                            appLogger.Info("SubChildren field is empty.");
                        }
                    }
                    else
                    {
                        appLogger.Info("No row record found.");
                    }
                }
                else
                {
                    appLogger.Info("No supporter group subchild record found");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in IsSubChildOnSupporterGroupAreTrue: " + e.Message + " with needkey: " + Needkey);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IsSubChildOnSupporterGroupAreFalse;
        }
        public bool IsVulnerableSupporter(long ContactId)
        {
            appLogger.Info("IsVulnerableSupporter started with contactid: " + ContactId);
            bool IsVulnerableSupporter = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Fetch supporter details";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                String query = "SELECT Contact.id FROM Contact WHERE Contact.banner.importanceFlag.lookupName = 'High' AND Contact.ID =" + ContactId;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);

                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        IsVulnerableSupporter = true;
                    }
                    else
                    {
                        appLogger.Info("No data available in row field");
                    }
                }
                else
                {
                    appLogger.Info("No contacts record found for IsVulnerableSupporter Check");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in IsVulnerableSupporter: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IsVulnerableSupporter;
        }
        public void CreateExitToResolveManualEnquiry(CreateIncidentData data)
        {
            appLogger.Info("CreateExitToResolveManualEnquiry started with Data: " + SimpleJson.SerializeObject(data));
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {

                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = data.ContactId,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = 124,//115 - E C - Exits to Resolve - Manual tst1/prod 124
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 545,
                                idSpecified = true
                            }
                        }
                    },
                    Subject = "A message from Compassion UK",
                };

                string InternalSubject = "Resolution for Exit of " + data.NeedKey + " (manual)";

                if (data.Exceptions.Count > 1)
                {
                    InternalSubject += " - multiple";
                    string Thread = string.Join(",", data.Exceptions.ToArray());
                    RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];

                    thrd[0] = new RightNowServices.Thread();
                    thrd[0].action = ActionEnum.add;
                    thrd[0].actionSpecified = true;
                    thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                    //thrd[0].ContentType = new NamedID { ID = new ID { id = 2, idSpecified = true } };
                    thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                    thrd[0].Text = Thread;
                    incident.Threads = thrd;
                }
                else
                {
                    InternalSubject += " - " + data.Exceptions.FirstOrDefault();
                }

                GenericField internalsubjectGenericField = createGenericfield("internalsubject", createStringdataValue(InternalSubject), DataTypeEnum.STRING);
                GenericField campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1813), DataTypeEnum.NAMED_ID);//Exit to Resolve - Manual TST1 1744 / PROD 1813
                GenericField setupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Manual"]), DataTypeEnum.NAMED_ID);
                GenericField SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(data.SEFGUID), DataTypeEnum.STRING);

                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { internalsubjectGenericField, campaignFormTypeField, setupStatusGenericField, SetupGUIDGenericField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("ExitToResolve Manual Incident Created with ID " + createResult[0].ID.id);
                Console.WriteLine("ExitToResolve Manual Incident Created with ID " + createResult[0].ID.id);

            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateExitToResolveManualEnquiry: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public long CreateExitToResolveAutomatedEnquiry(CreateIncidentData data)
        {
            appLogger.Info("CreateExitToResolveAutomatedEnquiry started with Data: " + SimpleJson.SerializeObject(data));
            long IncidentId = 0;
            int Category = data.Thread.ExitType == "Planned Exit" ? 1022 : 1021;
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {

                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = data.ContactId,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = 125,//116 tst1 - E C - Exits to Resolve - automated/125 prod - E C - Exits to Resolve - automated
                            idSpecified = true
                        }
                    },
                    Category = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = Category,
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 545,
                                idSpecified = true
                            }
                        }
                    },
                    Product = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 444, //444 - Departures
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 303, //Supporting Compassion
                                    idSpecified = true
                                }
                            }
                        }
                    },
                    Disposition = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 1288,//1188 tst1 - Child change [auto-sub child allocated]// 1288 prod - Child change [auto-sub child allocated]
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 1128, //1128 - Child Exits
                                    idSpecified = true
                                }
                            }
                        }
                    },
                    StatusWithType = new StatusWithType
                    {
                        Status = new NamedID
                        {
                            ID = new ID
                            {
                                id = 107,//107 - Resolved (Automated)
                                idSpecified = true
                            }
                        }
                    },
                    Subject = "A message from Compassion UK",
                };

                string ExitDate = !string.IsNullOrEmpty(data.Thread.CreatedDate) ? Convert.ToDateTime(data.Thread.CreatedDate).ToString("dd-MM-yyyy") : "";

                string InternalSubject = "Sub child allocated for exit of " + data.Thread.LocalBeneficiaryID + " (" + data.Thread.BeneficiaryPreferredName + ") " + ExitDate + " - " + data.Thread.ExitType;


                RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];
                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                thrd[0].Text = "New commitment: [" + data.privateNote.NeedKey + "]" + Environment.NewLine +
                    "HoldId: " + data.privateNote.HoldId + Environment.NewLine +
                    "Age: " + data.privateNote.Age + Environment.NewLine +
                    "Gender: " + data.privateNote.Gender + Environment.NewLine +
                    "Country: " + data.privateNote.Country + Environment.NewLine +
                    "Greatest need: " + data.privateNote.GreatestNeed;


                incident.Threads = thrd;


                GenericField internalsubjectGenericField = createGenericfield("internalsubject", createStringdataValue(InternalSubject), DataTypeEnum.STRING);

                GenericField campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1814), DataTypeEnum.NAMED_ID);//Exit to Resolve - Auto TST1 1745 / PROD 1814



                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { internalsubjectGenericField, campaignFormTypeField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("ExitToResolve Automated Incident Created with ID " + createResult[0].ID.id);
                Console.WriteLine("ExitToResolve Automated Incident Created with ID " + createResult[0].ID.id);
                IncidentId = createResult[0].ID.id;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateExitToResolveAutomatedEnquiry: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentId;
        }
        public bool IsConstituentReduceRateOrDonationBreakInBB(string Needkey)
        {
            appLogger.Info("IsConstituentReduceRateOrDonationBreakInBB started with needkey: " + Needkey);
            bool IsConstituentReduceRateOrDonationBreakInBB_Bool = false;
            /*try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("b71f9633-5194-4be9-a032-7c6c7c9b0edd");//Data List: Exit to resolve payment query


                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SPONSORSHIPSSPONSORSHIPOPPORTUNITYCHILDFIRSTNAME", Needkey);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = _service.DataListLoad(req);
                if (result.TotalRowsInReply > 0)
                {
                    IsConstituentReduceRateOrDonationBreakInBB_Bool = true;
                }
                else
                {
                    appLogger.Info("No reduce rate or donation break record found in BB.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in IsConstituentReduceRateOrDonationBreakInBB: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                {
                    appLogger.Info("Retrying...");
                    return IsConstituentReduceRateOrDonationBreakInBB(Needkey);
                }
            }*/

            int retryCount = 0;
            while (retryCount < 4)
            {
                retryCount++;
                try
                {
                    DataListLoadRequest req = new DataListLoadRequest();
                    req.ClientAppInfo = GetRequestHeader();
                    req.DataListID = new Guid("b71f9633-5194-4be9-a032-7c6c7c9b0edd");//Data List: Exit to resolve payment query


                    req.IncludeMetaData = true;
                    var fvSet = new DataFormFieldValueSet();
                    fvSet.Add("SPONSORSHIPSSPONSORSHIPOPPORTUNITYCHILDFIRSTNAME", Needkey);
                    var dfi = new DataFormItem();
                    dfi.Values = fvSet;
                    req.Parameters = dfi;
                    var result = _service.DataListLoad(req);
                    if (result.TotalRowsInReply > 0)
                    {
                        IsConstituentReduceRateOrDonationBreakInBB_Bool = true;
                    }
                    else
                    {
                        appLogger.Info("No reduce rate or donation break record found in BB.");
                    }
                    break;
                }
                catch (Exception e)
                {
                    if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                    {

                        if (retryCount == 4)
                        {

                            appLogger.Error("Error in IsConstituentReduceRateOrDonationBreakInBB try : " + e.Message);
                            appLogger.Error(e.InnerException);
                            appLogger.Error(e.StackTrace);
                            throw e;

                        }
                        else
                        {
                            appLogger.Info("Retrying...");
                        }
                    }
                    else
                    {
                        appLogger.Error("Error in IsConstituentReduceRateOrDonationBreakInBB main : " + e.Message);
                        appLogger.Error(e.InnerException);
                        appLogger.Error(e.StackTrace);
                        throw e;

                    }
                }
            }
            return IsConstituentReduceRateOrDonationBreakInBB_Bool;
        }
        public TimeScale GetTimeScaleData()
        {
            TimeScale scale = new TimeScale();
            MySqlConnection conn = new MySqlConnection();
            try
            {


                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                string Query = "SELECT * FROM `TimeScaleConfiguration` WHERE ID = 1";
                MySqlCommand MyCommand2 = new MySqlCommand(Query, conn);
                MySqlDataReader MyReader2;
                MyReader2 = MyCommand2.ExecuteReader();
                if (MyReader2.Read())
                {
                    scale.Unit = MyReader2["Unit"].ToString();
                    scale.TimescaleType = MyReader2["TimescaleType"].ToString();
                }
                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetTimeScaleData: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return null;
            }
            finally
            {
                conn.Close();
            }
            return scale;
        }

        public void UpdateAutomatedEnquiry(long IncidentId, CreateIncidentData data)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                    Disposition = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 1288,//1188 tst1 - Child change [auto-sub child allocated]/1288 (prod) - Child change [auto-sub child allocated]

                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 1128, //1128 - Child Exits
                                    idSpecified = true
                                }
                            }
                        }
                    },
                };


                RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];
                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                thrd[0].Text = "New commitment: [" + data.privateNote.NeedKey + "]" + Environment.NewLine +
                    "HoldId: " + data.privateNote.HoldId + Environment.NewLine +
                    "Age: " + data.privateNote.Age + Environment.NewLine +
                    "Gender: " + data.privateNote.Gender + Environment.NewLine +
                    "Country: " + data.privateNote.Country + Environment.NewLine +
                    "Greatest need: " + data.privateNote.GreatestNeed;


                incident.Threads = thrd;


                GenericField SetupStatusGenericField = null;

                SetupStatusGenericField = new GenericField();
                SetupStatusGenericField.dataType = DataTypeEnum.STRING;
                SetupStatusGenericField.dataTypeSpecified = true;
                SetupStatusGenericField.name = "setupstatus";
                SetupStatusGenericField.DataValue = null;


                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("Automated enquiry successfully updated with incidentId : " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateAutomatedEnquiry: " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }

        #region Child search and hold 

        public PrivateNote FindAndHoldChildMainFunction(DupSubPreferences depsub)
        {
            appLogger.Info("FindAndHoldChildMainFunction started...");
            InsertSEFOperationResponse(depsub.SefGuid, "Search child in connect process started", "ExitToResolve", true);//SEF Log
            PrivateNote privateNote = new PrivateNote();
            try
            {
                Response benSearchRes = new Response();
                bool IsChildFound = false;

                #region Set continent countries
                if (!string.IsNullOrEmpty(depsub.Continent))
                {
                    List<string> MultipleCountries = new List<string>();
                    switch (depsub.Continent)
                    {
                        case "Asia":
                            MultipleCountries = new List<string>() { "Bangladesh", "India", "Sri Lanka" };
                            break;
                        case "Africa":
                            MultipleCountries = new List<string>() { "Ethiopia", "Kenya", "Rwanda", "Tanzania", "Uganda", "Burkina Faso", "Ghana", "Togo" };
                            break;
                        case "Central America":
                            MultipleCountries = new List<string>() { "Dominican Republic", "El Salvador", "Guatemala", "Haiti", "Honduras", "Mexico", "Nicaragua" };
                            break;
                        case "South America":
                            MultipleCountries = new List<string>() { "Bolivia", "Brazil", "Colombia", "Ecuador", "Peru" };
                            break;
                    }

                    depsub.ContinentCountries = MultipleCountries;

                }
                #endregion

                #region Searching child with DupSubPreferences Data
                if (depsub.Countries.Count > 0)
                {
                    foreach (string country in depsub.Countries)
                    {
                        benSearchRes = GetBeneficiaryData(depsub, country);
                        if (benSearchRes != null && benSearchRes.BeneficiarySearchResponseList.Length > 0)
                        {
                            IsChildFound = true;
                        }
                    }
                }
                else
                {
                    appLogger.Info("No country record found in DupSubPreferences object. We are searching child without country.");
                    benSearchRes = GetBeneficiaryData(depsub, null);
                    if (benSearchRes != null && benSearchRes.BeneficiarySearchResponseList.Length > 0)
                    {
                        IsChildFound = true;
                    }
                }

                //Still not found child Search child from continent
                if (!IsChildFound)
                {
                    if (depsub.ContinentCountries != null && depsub.ContinentCountries.Count > 0)
                    {
                        benSearchRes = GetBeneficiaryData(depsub, null);
                        if (benSearchRes != null && benSearchRes.BeneficiarySearchResponseList.Length > 0)
                        {
                            IsChildFound = true;
                        }
                    }
                }
                #endregion


                if (IsChildFound)
                {
                    // Hold child for 15 min 
                    List<Beneficiaryholdrequestlist> childListToHold = new List<Beneficiaryholdrequestlist>();
                    if (benSearchRes.BeneficiarySearchResponseList != null)
                    {
                        for (int i = 0; i < benSearchRes.BeneficiarySearchResponseList.Length; i++)
                        {
                            Beneficiaryholdrequestlist childtoHold = new Beneficiaryholdrequestlist();
                            childtoHold.BeneficiaryState = "E-Commerce Hold";
                            childtoHold.Beneficiary_GlobalID = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_GlobalID;
                            childtoHold.Beneficiary_LocalID = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_LocalID;
                            childtoHold.HoldEndDate = DateTime.Now.AddMinutes(15);
                            childtoHold.IsSpecialHandling = false;
                            childtoHold.PrimaryHoldOwner = "Compassion UK";
                            childtoHold.SecondaryHoldOwner = "Compassion UK";
                            childtoHold.GlobalPartner_ID = "CU";
                            childtoHold.SourceCode = "Unknown - SEF";
                            childListToHold.Add(childtoHold);
                            privateNote.NeedKey = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_LocalID;
                            privateNote.Gender = benSearchRes.BeneficiarySearchResponseList[i].Gender;
                            privateNote.Age = benSearchRes.BeneficiarySearchResponseList[i].Age;
                            privateNote.Country = benSearchRes.BeneficiarySearchResponseList[i].ICP_Country;
                            privateNote.GreatestNeed = depsub.GreatestNeed ? "True" : "False";
                            InsertSEFOperationResponse(depsub.SefGuid, "Child found for hold and import with Beneficiary_LocalID: " + childtoHold.Beneficiary_LocalID, "ExitToResolve", true);//SEF Log
                            break;//Select only one child
                        }



                        #region Child hold and Import
                        int RetryCounter = 1;
                        string TryCounter = "1st";
                        bool IsChildHoldSuccess = false;
                        BeneficiaryHoldResponse childholdres = new BeneficiaryHoldResponse();
                        InsertSEFOperationResponse(depsub.SefGuid, "Trying to hold child for " + TryCounter + " time.", "ExitToResolve", true);//SEF Log
                        childholdres = HoldBeneficiary(childListToHold.ToArray());
                        RetryCounter++;
                        if (childholdres == null || childholdres.Error != null)
                        {
                            do
                            {
                                switch (RetryCounter)
                                {
                                    case 2:
                                        TryCounter = "2nd";
                                        break;
                                    case 3:
                                        TryCounter = "3rd";
                                        break;
                                }
                                //Try to Hold 3 times
                                InsertSEFOperationResponse(depsub.SefGuid, "Trying to hold child for " + TryCounter + " time.", "ExitToResolve", true);//SEF Log
                                childholdres = HoldBeneficiary(childListToHold.ToArray());
                                if (childholdres == null || childholdres.Error != null)
                                {
                                    RetryCounter++;
                                }
                                else
                                {
                                    IsChildHoldSuccess = true;
                                    break;
                                }
                            } while (RetryCounter < 3);
                        }
                        else
                        {
                            IsChildHoldSuccess = true;
                            InsertSEFOperationResponse(depsub.SefGuid, "Hold successful in " + TryCounter + " attempt.", "ExitToResolve", true);//SEF Log
                        }

                        if (IsChildHoldSuccess)
                        {
                            TCPTR4Service.Beneficiaryholdrequestlist childholdobj = new TCPTR4Service.Beneficiaryholdrequestlist();
                            List<TCPTR4Service.Beneficiaryholdrequestlist> childholdobjList = new List<TCPTR4Service.Beneficiaryholdrequestlist>();
                            List<TCPTR4Service.AddChildRequest> childimportobjList = new List<TCPTR4Service.AddChildRequest>();
                            TCPTR4Service.AddChildRequest childimportobj = new TCPTR4Service.AddChildRequest();
                            TCPTR4Service.BeneficiaryHoldResponse holdResponse = new TCPTR4Service.BeneficiaryHoldResponse();

                            if (childholdres.BeneficiaryHoldResponseList != null)
                            {
                                for (int i = 0; i < childholdres.BeneficiaryHoldResponseList.Length; i++)
                                {
                                    #region Holding and Importing child in RN
                                    benSearchRes.BeneficiarySearchResponseList[i].HoldId = childholdres.BeneficiaryHoldResponseList[i].HoldID;
                                    childimportobj.globalId = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_GlobalID;
                                    childimportobj.localId = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_LocalID;
                                    childimportobj.icpId = benSearchRes.BeneficiarySearchResponseList[i].ICP_ID;
                                    childimportobj.fullName = benSearchRes.BeneficiarySearchResponseList[i].FullName;
                                    childimportobj.firstName = benSearchRes.BeneficiarySearchResponseList[i].FirstName;
                                    childimportobj.lastName = benSearchRes.BeneficiarySearchResponseList[i].LastName;
                                    childimportobj.preferredName = benSearchRes.BeneficiarySearchResponseList[i].PreferredName;
                                    childimportobj.fullbodyimageUrl = benSearchRes.BeneficiarySearchResponseList[i].FullBodyImageURL;
                                    childimportobj.gender = benSearchRes.BeneficiarySearchResponseList[i].Gender;
                                    childimportobj.Age = Convert.ToInt32(benSearchRes.BeneficiarySearchResponseList[i].Age);
                                    childimportobj.birthDate = benSearchRes.BeneficiarySearchResponseList[i].BirthDate;
                                    childimportobj.IsInHIVAffectedArea = benSearchRes.BeneficiarySearchResponseList[i].IsInHIVAffectedArea;
                                    childimportobj.IsSpecialNeeds = benSearchRes.BeneficiarySearchResponseList[i].IsSpecialNeeds;
                                    childimportobj.orphan = benSearchRes.BeneficiarySearchResponseList[i].IsOrphan;
                                    childimportobj.needStatus = 9;
                                    childimportobj.isImportToBB = 1;

                                    childimportobjList.Add(childimportobj);

                                    InsertSEFOperationResponse(depsub.SefGuid, "Holding and Importing child in RN with Beneficiary_LocalID: " + childimportobj.localId, "ExitToResolve", true);//SEF Log
                                    privateNote.HoldId = childholdres.BeneficiaryHoldResponseList[i].HoldID;

                                    childholdobj.BeneficiaryState = "Consignment Hold";
                                    childholdobj.EstimatedNoMoneyYieldRate = null;
                                    childholdobj.HoldEndDate = DateTime.Now.AddDays(3);//yyyy-MM-ddTHH:mm:ss
                                    childholdobj.HoldID = childholdres.BeneficiaryHoldResponseList[i].HoldID;
                                    childholdobj.HoldYieldRate = null;
                                    childholdobj.IsSpecialHandling = false;
                                    childholdobj.PrimaryHoldOwner = "GC_2";
                                    childholdobj.SecondaryHoldOwner = "enable@compassionuk.org";
                                    childholdobj.SourceCode = "Unknown - SEF";
                                    childholdobj.Beneficiary_GlobalID = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_GlobalID;
                                    childholdobj.Channel_Name = "Unknown - SEF";
                                    childholdobj.GlobalPartner_ID = "CU";

                                    childholdobjList.Add(childholdobj);


                                    try
                                    {
                                        TCPTR4Service.TCPTR4ServiceClient tcpt = new TCPTR4Service.TCPTR4ServiceClient();
                                        holdResponse = tcpt.ReleaseAndImportBeneficiaries(null, childholdobjList.ToArray(), childimportobjList.ToArray());
                                        if (holdResponse.Error == null)
                                        {
                                            appLogger.Info("Child imported successfully with holdResponse: " + SimpleJson.SerializeObject(holdResponse));
                                            InsertSEFOperationResponse(depsub.SefGuid, "Child successfully imported in RN", "ExitToResolve", true);//SEF Log
                                        }
                                        else
                                        {
                                            appLogger.Info("Error while holding and importing child: " + SimpleJson.SerializeObject(holdResponse.Error));
                                            InsertSEFOperationResponse(depsub.SefGuid, "Failed to Hold and Import child in RN", "ExitToResolve", false);//SEF Log
                                        }
                                    }
                                    catch (Exception e)
                                    {
                                        appLogger.Error("Error in ReleaseAndImportBeneficiaries: "+e.Message);
                                        appLogger.Error("childholdobjList: "+ SimpleJson.SerializeObject(childholdobjList));
                                        appLogger.Error("childimportobjList: " + SimpleJson.SerializeObject(childimportobjList));
                                    }


                                    #endregion
                                }
                            }

                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(depsub.SetupStatus) && depsub.SetupStatus == "Retry")
                            {
                                UpdateSetupBotStatusCheck(depsub.IncidentId, "Failed");
                                appLogger.Info("Setting up setupStatus to Failed as Child hold failed due to :" + SimpleJson.SerializeObject(childholdres) + " and SetupStatu is already set to Retry.");
                                InsertSEFOperationResponse(depsub.SefGuid, "Setting up setupStatus to Failed as Child hold failed and SetupStatu is already set to Retry.", "ExitToResolve", false);//SEF Log
                            }
                            else
                            {
                                UpdateSetupBotStatusCheck(depsub.IncidentId, "Retry");
                                appLogger.Info("Setting up setupStatus to Retry as Child hold failed due to :" + SimpleJson.SerializeObject(childholdres));
                                InsertSEFOperationResponse(depsub.SefGuid, "Setting up setupStatus to Retry as Child hold failed.", "ExitToResolve", false);//SEF Log
                            }
                        }
                        #endregion
                    }
                }
                else
                {

                    if (!string.IsNullOrEmpty(depsub.SetupStatus) && depsub.SetupStatus == "Retry")
                    {
                        UpdateSetupBotStatusCheck(depsub.IncidentId, "Failed");
                        appLogger.Info("Setting up setupStatus to Failed as No child found in GMC with given DupSubPreferences data: " + SimpleJson.SerializeObject(depsub) + " and SetupStatus is already set to Retry.");
                        InsertSEFOperationResponse(depsub.SefGuid, "Setting up setupStatus to Failed as No child found in GMC with given DupSubPreferences data and SetupStatus is already set to Retry.", "ExitToResolve", false);//SEF Log
                    }
                    else
                    {
                        UpdateSetupBotStatusCheck(depsub.IncidentId, "Retry");
                        appLogger.Info("Setting up setupStatus to Retry as No child found in GMC with given DupSubPreferences data: " + SimpleJson.SerializeObject(depsub));
                        InsertSEFOperationResponse(depsub.SefGuid, "Setting up setupStatus to Retry as No child found in GMC with given DupSubPreferences data.", "ExitToResolve", false);//SEF Log
                    }
                }
                appLogger.Info("FindAndHoldChildMainFunction ended...");
                InsertSEFOperationResponse(depsub.SefGuid, "Search child in connect process ended", "ExitToResolve", true);//SEF Log
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FindAndHoldChild: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            return privateNote;
        }
        public DupSubPreferences GetDepSubPreferences(string Needkey)
        {
            appLogger.Info("GetDepSubPreferences started with Needkey :" + Needkey);
            DupSubPreferences dupSub = new DupSubPreferences();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "commitment data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = @"SELECT 
                                  C.SupporterGroup.SubPreferences,
                                  C.SupporterGroup.SubChildren,
                                  C.SupporterGroup.DepPref_Age, 
                                  C.SupporterGroup.DepPref_AgeMax, 
                                  C.SupporterGroup.DepPref_AgeMin, 
                                  C.SupporterGroup.DepPref_Continent.lookupname, 
                                  C.SupporterGroup.DepPref_Country1.lookupname, 
                                  C.SupporterGroup.DepPref_Country2.lookupname, 
                                  C.SupporterGroup.DepPref_Country3.lookupname, 
                                  C.SupporterGroup.DepPref_Gender.lookupname, 
                                  C.SupporterGroup.DepPref_HighPriority, 
                                  C.SupporterGroup.DepPref_MostNeededFund
                                FROM
                                  SCBS_CM.Commitment C
                                WHERE
                                  C.Need.NeedKey = '" + Needkey + "'";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);

                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Split('^');
                            dupSub.OtherPreference = !string.IsNullOrEmpty(values[0]) ? values[0] : null;
                            dupSub.SubChildren = !string.IsNullOrEmpty(values[1]) && values[1] == "1" ? true : false;
                            dupSub.Age = !string.IsNullOrEmpty(values[2]) ? Convert.ToInt32(values[2]) : 0;
                            dupSub.MaxAge = !string.IsNullOrEmpty(values[3]) ? Convert.ToInt32(values[3]) : 0;
                            dupSub.MinAge = !string.IsNullOrEmpty(values[4]) ? Convert.ToInt32(values[4]) : 0;
                            dupSub.Continent = !string.IsNullOrEmpty(values[5]) ? values[5] : null;
                            dupSub.Country1 = !string.IsNullOrEmpty(values[6]) ? values[6] : null;
                            dupSub.Country2 = !string.IsNullOrEmpty(values[7]) ? values[7] : null;
                            dupSub.Country3 = !string.IsNullOrEmpty(values[8]) ? values[8] : null;
                            dupSub.Countries = new List<string>();
                            if (!string.IsNullOrEmpty(dupSub.Country1))
                            {
                                dupSub.Countries.Add(dupSub.Country1);
                            }

                            if (!string.IsNullOrEmpty(dupSub.Country2))
                            {
                                dupSub.Countries.Add(dupSub.Country2);
                            }

                            if (!string.IsNullOrEmpty(dupSub.Country3))
                            {
                                dupSub.Countries.Add(dupSub.Country3);
                            }

                            dupSub.Gender = !string.IsNullOrEmpty(values[9]) ? values[9] : null;
                            dupSub.GreatestNeed = !string.IsNullOrEmpty(values[10]) && values[10] == "1" ? true : false;
                            dupSub.MostNeededFund = !string.IsNullOrEmpty(values[11]) && values[11] == "1" ? true : false;
                        }
                    }
                    else
                    {
                        appLogger.Info("No DepSubPreferences row record found");
                    }
                }
                else
                {
                    appLogger.Info("No DepSubPreferences record found");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDepSubPreferences: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return dupSub;
        }
        public Response beneficiarySearchForAutomation(dynamic beneficiarySearchchildobj)
        {
            getAuthToken(); //To get authorization
            string content = null;
            try
            {
                string ServiceUrl = "https://api2.compassion.com/ci/v2/beneficiaries/availabilitysearch?api_key=" + api_key + "&gpid=CU";   // prod

                if (beneficiarySearchchildobj.LongWaiting == "T")
                {
                    ServiceUrl = "https://api2.compassion.com/ci/v2/beneficiaries/availabilitysearch/longwaiting?api_key=" + api_key;
                }
                var restClient = new RestClient(ServiceUrl);

                var request = new RestRequest(Method.GET);
                request.AddHeader("Authorization", token_type + " " + access_token);
                request.AddParameter("skip", beneficiarySearchchildobj.skip);
                request.AddParameter("take", beneficiarySearchchildobj.take);

                if (beneficiarySearchchildobj.multipleCountries != null)
                {
                    if (beneficiarySearchchildobj.multipleCountries.Length > 0)
                    {
                        request.AddParameter("countries", string.Join(",", beneficiarySearchchildobj.multipleCountries));
                    }
                }

                if (!string.IsNullOrEmpty(beneficiarySearchchildobj.gender))
                {
                    request.AddParameter("gender", beneficiarySearchchildobj.gender);
                }
                if (!string.IsNullOrEmpty(beneficiarySearchchildobj.lowage))
                {
                    request.AddParameter("minAge", beneficiarySearchchildobj.lowage);
                }
                if (!string.IsNullOrEmpty(beneficiarySearchchildobj.highage))
                {
                    request.AddParameter("maxAge", beneficiarySearchchildobj.highage);
                }

                request.AddHeader("Accept", "application/json, text/javascript, */*; q=0.01");

                IRestResponse response = restClient.Execute(request);
                content = response.Content; // raw content as string

                Response beneficiarySearchResponse = SimpleJson.DeserializeObject<Response>(content);

                if (beneficiarySearchResponse.Error != null)
                {
                    appLogger.Error("Error in BeneficiarySearchResponse : " + beneficiarySearchResponse.Error.ErrorMessage);
                    return beneficiarySearchResponse;
                }
                return beneficiarySearchResponse;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in beneficiary search for SEF method : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                if (content != null)
                {
                    appLogger.Error("Beneficiary search for SEF response content : " + content);
                }
                return null;
            }
        }
        public void SearchChildAndHold(BeneficiaryRequestModel beneficiarySearchchildobj)
        {
            try
            {
                Response benSearchRes = beneficiarySearchForAutomation(beneficiarySearchchildobj);
                List<Beneficiaryholdrequestlist> childListToHold = new List<Beneficiaryholdrequestlist>();
                if (benSearchRes.BeneficiarySearchResponseList != null)
                {
                    for (int i = 0; i < benSearchRes.BeneficiarySearchResponseList.Length; i++)
                    {
                        Beneficiaryholdrequestlist childtoHold = new Beneficiaryholdrequestlist();
                        childtoHold.BeneficiaryState = "E-Commerce Hold";
                        childtoHold.Beneficiary_GlobalID = benSearchRes.BeneficiarySearchResponseList[i].Beneficiary_GlobalID;
                        childtoHold.HoldEndDate = DateTime.Now.AddMinutes(15);
                        childtoHold.IsSpecialHandling = false;
                        childtoHold.PrimaryHoldOwner = "Compassion UK";
                        childtoHold.SecondaryHoldOwner = "Compassion UK";
                        childtoHold.GlobalPartner_ID = "CU";
                        childtoHold.SourceCode = "Unknown - SEF";
                        childListToHold.Add(childtoHold);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public Response GetBeneficiaryData(DupSubPreferences depsub, string Country)
        {
            Response benSearchRes = new Response();
            try
            {
                BeneficiaryRequestModel beneficiarySearchchildobj = new BeneficiaryRequestModel();
                beneficiarySearchchildobj.lowage = "0";
                beneficiarySearchchildobj.highage = "0";

                if (depsub.Age != 0)
                {
                    beneficiarySearchchildobj.lowage = depsub.Age.ToString();
                    beneficiarySearchchildobj.highage = depsub.Age.ToString();
                }
                else
                {

                    if (depsub.MinAge != 0)
                    {
                        beneficiarySearchchildobj.lowage = depsub.MinAge.ToString();
                    }
                    if (depsub.MaxAge != 0)
                    {
                        beneficiarySearchchildobj.highage = depsub.MaxAge.ToString();
                    }
                }

                if (!string.IsNullOrEmpty(depsub.Gender))
                {
                    beneficiarySearchchildobj.gender = depsub.Gender == "Male" ? "M" : "F";
                }

                if (depsub.GreatestNeed)
                {
                    beneficiarySearchchildobj.LongWaiting = "T";
                }

                if (!string.IsNullOrEmpty(Country))
                {
                    beneficiarySearchchildobj.multipleCountries = new string[] { Country };
                }
                else
                {
                    if (depsub.ContinentCountries != null && depsub.ContinentCountries.Count > 0)
                    {
                        beneficiarySearchchildobj.multipleCountries = depsub.ContinentCountries.ToArray();
                    }
                }
                benSearchRes = beneficiarySearchForAutomation(beneficiarySearchchildobj);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FindChildAndHold: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return null;
            }
            return benSearchRes;
        }
        public long InsertInAuditlog(dynamic data, string messagetype, int status, string error)
        {
            MySql.Data.MySqlClient.MySqlConnection conn;
            string Query = "";
            long recordId = 0;
            try
            {
                conn = new MySql.Data.MySqlClient.MySqlConnection();
                conn.ConnectionString = mycuk_tcpt4ConnectionString;
                conn.Open();
                data = data.Replace("'", "''");
                error = error.Replace("'", "''");
                Query = "INSERT INTO `Tcpt_Audit_Log` (MessageType, Data, Status, Error,Remarks) VALUES ('" + messagetype + "', '" + data + "', " + status + ", '" + error + "','NO Remarks')";

                MySqlCommand insertCommand = new MySqlCommand(Query, conn);
                MySqlDataReader dataReader;
                dataReader = insertCommand.ExecuteReader();     // Here our query will be executed and data saved into the database.
                recordId = insertCommand.LastInsertedId;

                conn.Close();
            }
            catch (Exception e)
            {
                appLogger.Error("Error in inserting record in DB : " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return -1;
            }
            return recordId;
        }
        public BeneficiaryHoldResponse HoldBeneficiary(Beneficiaryholdrequestlist[] childobj)
        {
            getAuthToken();
            string content = null;
            try
            {
                var restClient = new RestClient("https://api2.compassion.com/ci/v2/beneficiaries/holds?api_key=" + api_key);// Stage

                var request = new RestRequest(Method.POST);
                request.AddHeader("Authorization", token_type + " " + access_token);
                request.RequestFormat = DataFormat.Json;

                BeneficiaryHoldRequest requestBody = new BeneficiaryHoldRequest();

                requestBody.BeneficiaryHoldRequestList = childobj;

                request.AddBody(requestBody);
                request.AddHeader("Accept", "application/json, text/javascript, */*; q=0.01");

                IRestResponse response = restClient.Execute(request);
                content = response.Content; // raw content as string

                BeneficiaryHoldResponse beneficiariesHoldResponse = SimpleJson.DeserializeObject<BeneficiaryHoldResponse>(content);
                int status = 1;
                string error = "No";
                string requestObject = SimpleJson.SerializeObject(childobj);
                error = SimpleJson.SerializeObject(beneficiariesHoldResponse);
                if (beneficiariesHoldResponse.Status != 200)
                {
                    status = 0;
                    error = content;
                }
                if (beneficiariesHoldResponse.Error != null)
                {
                    status = 0;
                    appLogger.Error("Error in Beneficiary Hold Response : " + beneficiariesHoldResponse.Error.ErrorMessage);
                }

                long auditLog = InsertInAuditlog(requestObject, "Beneficiary Hold", status, error);
                appLogger.Info("Beneficiary Hold Response : " + SimpleJson.SerializeObject(beneficiariesHoldResponse));
                return beneficiariesHoldResponse;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in HoldBeneficiary method : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
                return null;
            }
        }
        public void AddHoldIdAndNeedKeyToIncident(long IncidentId, string ThreadMsg)
        {
            appLogger.Info("AddHoldIdAndNeedKeyToIncident started with incident id: " + IncidentId);
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];

                thrd[0] = new RightNowServices.Thread();
                thrd[0].action = ActionEnum.add;
                thrd[0].actionSpecified = true;
                thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                //thrd[0].ContentType = new NamedID { ID = new ID { id = 2, idSpecified = true } };
                thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                thrd[0].Text = ThreadMsg;
                incident.Threads = thrd;



                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("AddHoldIdAndNeedKeyToIncident updated successfully with threadtxt: " + ThreadMsg + " with incidentid: " + IncidentId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in AddHoldIdAndNeedKeyToIncident: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        #endregion


        #region Create enquiry for No child available and auto-sub child failed
        public long CreateIncidentNoChildAvailable(CreateIncidentData data)
        {
            long IncidentId = 0;
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {

                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = data.ContactId,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = 124,//115 - E C - Exits to Resolve - Manual tst1/prod 124
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 545,
                                idSpecified = true
                            }
                        }
                    },
                    Subject = "A message from Compassion UK",
                };

                string InternalSubject = "Resolution for Exit of " + data.NeedKey + " (manual) - no child available";

                GenericField internalsubjectGenericField = createGenericfield("internalsubject", createStringdataValue(InternalSubject), DataTypeEnum.STRING);
                GenericField campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1813), DataTypeEnum.NAMED_ID);//Exit to Resolve - Manual TST1 1744 / PROD 1813
                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Manual"]), DataTypeEnum.NAMED_ID);

                GenericField SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(data.SEFGUID), DataTypeEnum.STRING);

                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { internalsubjectGenericField, campaignFormTypeField, SetupStatusGenericField, SetupGUIDGenericField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("Incident for No Child Available Manual Incident Created with ID " + createResult[0].ID.id);
                Console.WriteLine("Incident for No Child Available Manual Incident Created with ID " + createResult[0].ID.id);
                IncidentId = createResult[0].ID.id;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateIncidentNoChildAvailable: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentId;
        }
        public long CreateIncidentAutoSubChildFaild(CreateIncidentData data)
        {
            appLogger.Info("CreateIncidentAutoSubChildFaild started with Data: " + SimpleJson.SerializeObject(data));
            int Category = data.Thread.ExitType == "Planned Exit" ? 1022 : 1021;
            long IncidentId = 0;
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {

                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = data.ContactId,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = 125,//116 - (tst1) - E C - Exits to Resolve - automated / 125 - E C - Exits to Resolve - automated (prod)

                            idSpecified = true
                        }
                    },
                    Category = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = Category,
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 545,
                                idSpecified = true
                            }
                        }
                    },
                    Product = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 444, //444 - Departures
                            idSpecified = true
                        },
                        Parents = new NamedReadOnlyID[]
                        {
                            new NamedReadOnlyID
                            {
                                ID = new ID
                                {
                                    id = 303, //Supporting Compassion
                                    idSpecified = true
                                }
                            }
                        }
                    },
                    Disposition = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 1287,//tst1 1192 - Auto-sub child failed / (prod) 1287 - Auto-sub child failed
                            idSpecified = true
                        }
                    },
                    StatusWithType = new StatusWithType
                    {
                        Status = new NamedID
                        {
                            ID = new ID
                            {
                                id = 107,//107 - Resolved (Automated)
                                idSpecified = true
                            }
                        }
                    },
                    Subject = "A message from Compassion UK",
                };

                string ExitDate = !string.IsNullOrEmpty(data.Thread.CreatedDate) ? Convert.ToDateTime(data.Thread.CreatedDate).ToString("dd-MM-yyyy") : "";
                string InternalSubject = "Sub child allocated for exit of " + data.Thread.LocalBeneficiaryID + " (" + data.Thread.BeneficiaryPreferredName + ") " + ExitDate + " - " + data.Thread.ExitType;

                GenericField internalsubjectGenericField = createGenericfield("internalsubject", createStringdataValue(InternalSubject), DataTypeEnum.STRING);
                GenericField campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1814), DataTypeEnum.NAMED_ID);//Exit to Resolve - Auto TST1 1745 / PROD 1814
                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Failed"]), DataTypeEnum.NAMED_ID);
                GenericField SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(data.SEFGUID), DataTypeEnum.STRING);

                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { internalsubjectGenericField, campaignFormTypeField, SetupStatusGenericField, SetupGUIDGenericField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("Auto Sub Child Faild Automated Incident Created with ID " + createResult[0].ID.id);
                Console.WriteLine("Auto Sub Child Faild Automated Incident Created with ID " + createResult[0].ID.id);
                IncidentId = createResult[0].ID.id;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateIncidentAutoSubChildFaild: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("CreateIncidentAutoSubChildFaild ended...");
            return IncidentId;
        }
        public long CreateIncidentAutomationOfSubFailedAtSEF(CreateIncidentData data)
        {
            long IncidentId = 0;
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {

                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = data.ContactId,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = 124,//115 - E C - Exits to Resolve - Manual tst1/prod 124
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 545,
                                idSpecified = true
                            }
                        }
                    },
                    Subject = "A message from Compassion UK",
                };

                string InternalSubject = "Resolution for Exit of " + data.NeedKey + " (manual) - automation of sub failed at SEF";

                GenericField internalsubjectGenericField = createGenericfield("internalsubject", createStringdataValue(InternalSubject), DataTypeEnum.STRING);
                GenericField campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1813), DataTypeEnum.NAMED_ID);//Exit to Resolve - Manual TST1 1744 / PROD 1813
                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Manual"]), DataTypeEnum.NAMED_ID);

                GenericField SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(data.SEFGUID), DataTypeEnum.STRING);

                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { internalsubjectGenericField, campaignFormTypeField, SetupStatusGenericField, SetupGUIDGenericField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("Incident for automation of sub failed at SEF Manual Incident Created with ID " + createResult[0].ID.id);
                Console.WriteLine("Incident for automation of sub failed at SEF Manual Incident Created with ID " + createResult[0].ID.id);
                IncidentId = createResult[0].ID.id;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateIncidentAutomationOfSubFailedAtSEF: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentId;
        }
        public long CreateIncidentAutomationOfSubFailedAtSEF(long ContactId, string Needkey, string SEFGUID)
        {
            long IncidentId = 0;
            try
            {
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                Incident incident = new Incident
                {

                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = ContactId,
                                idSpecified = true
                            }
                        }
                    },
                    Queue = new NamedID
                    {
                        ID = new ID
                        {
                            id = 124,//115 - E C - Exits to Resolve - Manual tst1/prod 124
                            idSpecified = true
                        }
                    },
                    AssignedTo = new GroupAccount
                    {
                        Account = new NamedIDHierarchy
                        {
                            ID = new ID
                            {
                                id = 545,
                                idSpecified = true
                            }
                        }
                    },
                    Subject = "A message from Compassion UK",
                };

                string InternalSubject = "Resolution for Exit of " + Needkey + " (manual) - automation of sub failed at SEF";

                GenericField internalsubjectGenericField = createGenericfield("internalsubject", createStringdataValue(InternalSubject), DataTypeEnum.STRING);
                GenericField campaignFormTypeField = createGenericfield("campaignformtype", createNamedIdDataValue(1813), DataTypeEnum.NAMED_ID);//Exit to Resolve - Manual TST1 1744 / PROD 1813
                GenericField SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Manual"]), DataTypeEnum.NAMED_ID);

                GenericField SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(SEFGUID), DataTypeEnum.STRING);

                GenericObject genericObject = new GenericObject();
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };
                genericObject.GenericFields = new GenericField[] { internalsubjectGenericField, campaignFormTypeField, SetupStatusGenericField, SetupGUIDGenericField };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createResult;
                head = rightNowSyncPortClient.Create(new ClientInfoHeader { AppID = "Creating incident" }, api,
                                          new RNObject[] { incident },
                                          new CreateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false }, out createResult);

                appLogger.Info("Incident for automation of sub failed at SEF Manual Incident Created with ID " + createResult[0].ID.id);
                Console.WriteLine("Incident for automation of sub failed at SEF Manual Incident Created with ID " + createResult[0].ID.id);
                IncidentId = createResult[0].ID.id;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateIncidentAutomationOfSubFailedAtSEF: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentId;
        }
        #endregion

        public string FetchBBIDfromSrpGrpid(int groupId)
        {
            string PrimarySupporterblackbaudid = "";
            try
            {

                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch blackbaud id";
                String query = "Select C.customFields.c.blackbaudid from SCBS_SUP.SupporterGroup S INNER JOIN S.PrioritySupporterId C where SCBS_SUP.SupporterGroup.ID=" + groupId;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        PrimarySupporterblackbaudid = result.CSVTables[0].Rows[0].ToString();
                    }
                }
                appLogger.Info("blackbaudid " + PrimarySupporterblackbaudid + "found for SupportergroupId  " + groupId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in FetchBBIDfromSrpGrpid" + e.Message);
            }
            return PrimarySupporterblackbaudid;
        }
        public List<DataListResultRow> fetchOtherRecurring(string constituentId)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {

                //var constituentDetails = GetConstituentOnCommitmentID(CommitmentID);
                /*if (!string.IsNullOrWhiteSpace(constituentId))
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    request.DataListID = new Guid("573dbbaf-5bf0-4808-bc6b-37fc4c1eb7b7");// GUID for Data List: Other Recurring gifts - Linked                    
                    request.ContextRecordID = constituentId;
                    request.IncludeMetaData = true;
                    var result = _service.DataListLoad(request);

                    if (result.TotalRowsInReply > 0)
                    {
                        foreach (var res in result.Rows)
                        {
                            responseList.Add(res);
                        }
                    }
                }*/

                int retryCount = 0;
                while (retryCount < 4)
                {
                    retryCount++;
                    try
                    {
                        if (!string.IsNullOrWhiteSpace(constituentId))
                        {
                            DataListLoadRequest request = new DataListLoadRequest();

                            request.ClientAppInfo = GetRequestHeader();
                            request.DataListID = new Guid("573dbbaf-5bf0-4808-bc6b-37fc4c1eb7b7");// GUID for Data List: Other Recurring gifts - Linked                    
                            request.ContextRecordID = constituentId;
                            request.IncludeMetaData = true;
                            var result = _service.DataListLoad(request);

                            if (result.TotalRowsInReply > 0)
                            {
                                foreach (var res in result.Rows)
                                {
                                    responseList.Add(res);
                                }
                            }
                        }
                        break;
                    }
                    catch (Exception e)
                    {
                        if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                        {

                            if (retryCount == 4)
                            {

                                appLogger.Error("Error in fetchOtherRecurring try : " + e.Message);
                                appLogger.Error(e.InnerException);
                                appLogger.Error(e.StackTrace);
                                throw e;

                            }
                            else
                            {
                                appLogger.Info("Retrying...");
                            }
                        }
                        else
                        {
                            appLogger.Error("Error in fetchOtherRecurring main : " + e.Message);
                            appLogger.Error(e.InnerException);
                            appLogger.Error(e.StackTrace);
                            throw e;

                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching other recurring gifts for Sponsorship Cancel screen  : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }
        public List<RGDetails> FetchAllRecurringGiftIndividual(string bbid, string Needkey)
        {
            List<RGDetails> childRGList = new List<RGDetails>();
            /*try
            {
                string constituentId = GetConstituentOnLookupID(bbid).Output.Rows[0].Values[0];
                if (!string.IsNullOrEmpty(constituentId))
                {
                    var orgdata = fetchOtherRecurring(constituentId);
                    if (orgdata.Count > 0)
                    {
                        for (int i = 0; i < orgdata.Count; i++)
                        {
                            RGDetails ChildRG = new RGDetails();
                            if ((orgdata[i].Values[0] == "Active" || orgdata[i].Values[0] == "Held") && orgdata[i].Values[7] != "Christmas fund" && orgdata[i].Values[7] != "Sponsorship Plus")//
                            {
                                //4 Needkey
                                if (orgdata[i].Values[7] == "Child birthday gift" && orgdata[i].Values[4] == Needkey)
                                {
                                    ChildRG.RGType = "Birthday Gift";
                                    double Amount = Convert.ToDouble(orgdata[i].Values[1]);
                                    ChildRG.RGAmount = Amount.ToString();
                                    childRGList.Add(ChildRG);
                                }
                            }
                        }
                    }
                }
                else
                {
                    appLogger.Info("Cannot find constituent data using bbid " + bbid);
                }
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in Fetching Other Recurring Gift for Child Deb-sub process with bbid" + bbid);
                appLogger.Error(ex.Message);
            }*/


            int retryCount = 0;
            while (retryCount < 4)
            {
                retryCount++;
                try
                {
                    string constituentId = GetConstituentOnLookupID(bbid).Output.Rows[0].Values[0];
                    if (!string.IsNullOrEmpty(constituentId))
                    {
                        var orgdata = fetchOtherRecurring(constituentId);
                        if (orgdata.Count > 0)
                        {
                            for (int i = 0; i < orgdata.Count; i++)
                            {
                                RGDetails ChildRG = new RGDetails();
                                if ((orgdata[i].Values[0] == "Active" || orgdata[i].Values[0] == "Held") && orgdata[i].Values[7] != "Christmas fund" && orgdata[i].Values[7] != "Sponsorship Plus")//
                                {
                                    //4 Needkey
                                    if (orgdata[i].Values[7] == "Child birthday gift" && orgdata[i].Values[4] == Needkey)
                                    {
                                        ChildRG.RGType = "Birthday Gift";
                                        double Amount = Convert.ToDouble(orgdata[i].Values[1]);
                                        ChildRG.RGAmount = Amount.ToString();
                                        childRGList.Add(ChildRG);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        appLogger.Info("Cannot find constituent data using bbid " + bbid);
                    }
                    break;
                }
                catch (Exception e)
                {
                    if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                    {

                        if (retryCount == 4)
                        {

                            appLogger.Error("Error in FetchAllRecurringGiftIndividual try : " + e.Message);
                            appLogger.Error(e.InnerException);
                            appLogger.Error(e.StackTrace);
                            throw e;

                        }
                        else
                        {
                            appLogger.Info("Retrying...");
                        }
                    }
                    else
                    {
                        appLogger.Error("Error in FetchAllRecurringGiftIndividual main : " + e.Message);
                        appLogger.Error(e.InnerException);
                        appLogger.Error(e.StackTrace);
                        throw e;

                    }
                }
            }

            return childRGList;
        }
        public List<DataListResultRow> FetchConstituentRecordIDOnCommitmentIDNew(string commitmentId)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("ef7f23a0-444c-48ad-96d5-6e1be04668c5");// datalist : Fetch Constituent details on Commitment id
                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SPONSORSPONSORSHIPSCOMMITMENTID", commitmentId);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var datareply = _service.DataListLoad(req);
                if (datareply.TotalRowsInReply > 0)
                {

                    foreach (var res in datareply.Rows)
                    {
                        responseList.Add(res);
                    }
                }
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in fetching Constituent Details  with commitment BBID : " + commitmentId + " " + ex.Message);
            }
            return responseList;
        }
        public void AssignedAndSendDepartureRequestToESB(DepartureSEF DepSEF)
        {
            appLogger.Info("AssignedAndSendDepartureRequestToESB started...");
            try
            {
                string GroupType = "";
                Guid Guid = Guid.NewGuid();
                string SEFGUID = DepSEF.SEFGUID;
                UpdateSetupBotStatusCheck(DepSEF.RTXIncidentId, "In Progress");
                UpdateDepartureSetupStatus(DepSEF.RTXIncidentId, SEFGUID, false);
                Model.CIFModel sefcommitobj = new Model.CIFModel();
                SEFModel sefobj = new SEFModel();
                ExistingCommitmentData eData = new ExistingCommitmentData();
                SupporterDataList slObj = new SupporterDataList();
                NewChildData NewChild = new NewChildData();
                
                sefcommitobj.RTXIncidentId = DepSEF.RTXIncidentId;
                sefcommitobj.ETREnquiryId = DepSEF.ETREnquiryId;
                //sefobj = GetDepartureSupporterData(DepSEF.ContactId);
                eData = GetSupporterGrpAndCommitmentData(DepSEF.OldNeedKey);
                if (eData != null)
                {
                    #region Departure Operation

                    NewChild = GetNewChildData(DepSEF.NewNeedKey);
                    GroupType = eData.SupGrpType;
                    List<string> SupporterIds = GetLinkedSupportersIds(eData.supgrpid);
                    if (SupporterIds != null && SupporterIds.Count > 0)
                    {
                        slObj = GetSupportersDetails(SupporterIds);
                    }


                    //add child in BB
                    AddChildIfNotExistInBB(DepSEF.NewNeedKey);


                    if (!string.IsNullOrEmpty(GroupType))
                    {
                        if (GroupType == "2" || GroupType == "3" || GroupType == "4")
                        {
                            if (eData.supgrpid != 0)
                            {
                                string bbid = FetchBBIDfromSrpGrpid(eData.supgrpid);
                                List<RGDetails> childlist = new List<RGDetails>();
                                childlist = FetchAllRecurringGiftIndividual(bbid, DepSEF.OldNeedKey);
                                if (childlist.Count == 0)
                                {
                                    sefcommitobj.CancelRG = null;
                                }
                                else
                                {
                                    sefcommitobj.CancelRG = childlist;
                                }
                               
                            }
                        }
                        else
                        {
                            string lookupid = "";
                            var constituentdata = FetchConstituentRecordIDOnCommitmentIDNew(eData.ComBBId);
                            if (constituentdata.Count > 0)
                            {
                                lookupid = constituentdata[0].Values[1].ToString();
                                List<RGDetails> childlist = new List<RGDetails>();
                                childlist = FetchAllRecurringGiftIndividual(lookupid, DepSEF.OldNeedKey);
                                if (childlist.Count == 0)
                                {
                                    sefcommitobj.CancelRG = null;
                                }
                                else
                                {
                                    sefcommitobj.CancelRG = childlist;
                                }
                            }
                        }
                    }

                    #region Flags

                    sefcommitobj.isDepartureSubCommitment = true;
                    sefcommitobj.isCorrespondentCommitment = false;
                    sefcommitobj.createconstituentonly = false;
                    sefcommitobj.commSponsorshipPlus = false;
                    sefcommitobj.isIndiaProcessService = false;
                    sefcommitobj.isOrganisation = false;
                    sefcommitobj.connectusestage = false;

                    #endregion

                    if (slObj != null)
                    {


                        #region Set Supporter Data
                        sefcommitobj.supporterid = SupporterIds.ToArray();
                        sefcommitobj.titlestring = slObj.titlestring.ToArray();
                        sefcommitobj.email = slObj.email.ToArray();
                        sefcommitobj.firstname = slObj.firstname.ToArray();
                        sefcommitobj.lastname = slObj.lastname.ToArray();
                        sefcommitobj.mobilephone = slObj.mobilephone.ToArray();
                        sefcommitobj.addresslineone = slObj.addresslineone.ToArray();
                        sefcommitobj.postcode = slObj.postcode.ToArray();
                        sefcommitobj.sponsorchild = NewChild.NewChild_sponsorchild;

                        sefcommitobj.BestTimetoCall = new string[] { "", "" };
                        sefcommitobj.primary = "0";
                        sefcommitobj.title = slObj.title.ToArray();
                        sefcommitobj.dob = slObj.yearofbirth.ToArray();
                        sefcommitobj.phone = new string[] { "", "" };
                        sefcommitobj.addresslinetwo = slObj.addresslinetwo.ToArray();
                        sefcommitobj.addresslinethree = slObj.addresslinethree.ToArray();
                        sefcommitobj.addresslinefour = slObj.addresslinefour.ToArray();
                        sefcommitobj.town = slObj.town.ToArray();
                        sefcommitobj.county = slObj.county.ToArray();
                        sefcommitobj.addresscountry = slObj.addresscountry.ToArray();


                        #endregion

                        #region HardCoded Values
                        sefcommitobj.iscorrsponsor = "0";
                        bool IsCorr = checkForCorrespodenceComm(DepSEF.OldNeedKey);
                        if (IsCorr)
                        {
                            sefcommitobj.iscorrsponsor = "1";
                        }
                        sefcommitobj.type = GroupType;
                        sefcommitobj.iamtaxpayer = "1";
                        sefcommitobj.country = "UK";
                        sefcommitobj.barcode = "167";
                        sefcommitobj.installmentfrequency = "Monthly";
                        sefcommitobj.paymentmethod = "Existing Direct Debit";
                        sefcommitobj.ddisource = "Paper";
                        sefcommitobj.loggedinUser = "GC_2";
                        sefcommitobj.indicator = "Written";
                        sefcommitobj.commBBPaymentMethod = "Existing Direct Debit";
                        sefcommitobj.DepartedBeneficiaryGlobalId = GetDepartedChildGlobalId(DepSEF.OldNeedKey);
                        sefcommitobj.loggedinUserAccountID = "545";
                        sefcommitobj.futuredonationdate = "01-07-2011";
                        sefcommitobj.firstfundeddate = DateTime.Now.ToString("dd-MM-yyyy");
                        sefcommitobj.donationdate = DateTime.Now.AddDays(1).ToString("dd-MM-yyyy");
                        sefcommitobj.sefGUID = SEFGUID;

                        List<string> solicitCode = new List<string>();
                        if (sefcommitobj.lastname.Count() > 0)
                        {
                            foreach (string data in sefcommitobj.lastname)
                            {
                                solicitCode.Add("2");
                            }
                        }

                        sefcommitobj.emailPreference = solicitCode.ToArray();
                        sefcommitobj.phonePreference = solicitCode.ToArray();
                        sefcommitobj.smsPreference = solicitCode.ToArray();
                        sefcommitobj.createSolicit = solicitCode.ToArray();

                        sefcommitobj.linktype = 2; // Beneficiary Exit/Sub assignment
                        sefcommitobj.linkreason = 328; // Compassion Assigned Sub
                        sefcommitobj.amount = DepSEF.Amount;
                        sefcommitobj.OldChildNeedkey = DepSEF.OldNeedKey;
                        #endregion

                        #region Set Existing Commitment Data

                        sefcommitobj.supgrpid = eData.supgrpid;
                        sefcommitobj.sponsorchild = NewChild.NewChild_sponsorchild;
                        sefcommitobj.childnumber = DepSEF.NewNeedKey;
                        sefcommitobj.sgname = eData.sgname;
                        sefcommitobj.sglettersalutation = eData.sglettersalutation;
                        sefcommitobj.sgaddresssalutation = eData.sgaddresssalutation;
                        sefcommitobj.BeneficiaryGlobalId = NewChild.NewChild_BeneficiaryGlobalId;
                        sefcommitobj.BeneficiaryHoldId = NewChild.NewChild_BeneficiaryHoldId;
                        sefcommitobj.CorrespondentSupporterGlobalID = eData.CorrespondentSupporterGlobalID;
                        sefcommitobj.ComBBId = eData.ComBBId;
                        sefcommitobj.commMarketingChannel = eData.commMarketingChannel;
                        sefcommitobj.commCampaign = eData.commCampaign;
                        sefcommitobj.commBBDDAmount = eData.commBBDDAmount;
                        sefcommitobj.SupGrpPreferredName = eData.SupGrpPreferredName;
                        sefcommitobj.ExistingBeneficiaryGlobalId = NewChild.NewChild_BeneficiaryGlobalId;
                        sefcommitobj.ExistingCommitmentId = eData.ExistingCommitmentId;
                        sefcommitobj.ExistingGlobalCommitmentId = eData.ExistingGlobalCommitmentId;
                        sefcommitobj.ExistingGlobalCorrCommitmentId = eData.ExistingGlobalCorrCommitmentId;
                        sefcommitobj.ExistingSupporterGroupID = eData.ExistingSupporterGroupID;

                        #endregion

                        #region Null, Empty and 0 value departure json

                        sefcommitobj.communicationmethod = 0;
                        sefcommitobj.debiton = "0";
                        sefcommitobj.volunteering = "0";
                        sefcommitobj.sortcode1 = "00";
                        sefcommitobj.sortcode2 = "00";
                        sefcommitobj.sortcode3 = "00";
                        sefcommitobj.reference = "0000000";
                        sefcommitobj.nomoney = "0";
                        sefcommitobj.groupaccount = "0";
                        sefcommitobj.scanneddocexists = "0";
                        sefcommitobj.samepc = "0";
                        sefcommitobj.orgId = "0";



                        sefcommitobj.taxpayertitle = "Not Selected";
                        sefcommitobj.taxpayerfirstname = "";
                        sefcommitobj.taxpayersurname = "";
                        sefcommitobj.enqrefid = "";
                        sefcommitobj.orgName = "";
                        sefcommitobj.accountname = "";
                        sefcommitobj.accountnumber = "";
                        sefcommitobj.sortcode = "";
                        sefcommitobj.orgwebsite = "";
                        sefcommitobj.orgPhone = "";
                        sefcommitobj.orgEmail = "";
                        sefcommitobj.orgType = "";
                        sefcommitobj.commMarketingCode = "";
                        sefcommitobj.commRelationshipManager = "";
                        sefcommitobj.commOrganisation = "";
                        sefcommitobj.commSupporter = "";
                        sefcommitobj.commEvent = "";
                        sefcommitobj.commBBDDNextDate = "";
                        sefcommitobj.commDDReference = "";
                        sefcommitobj.commLinkedToPartnership = "";
                        sefcommitobj.privateNote = "";
                        sefcommitobj.birthdayGiftAmount = "";
                        sefcommitobj.christmasGiftAmount = "";



                        sefcommitobj.giftaidstatus = null;
                        sefcommitobj.enquiryrefid = null;
                        sefcommitobj.dddate = null;
                        sefcommitobj.advancenoticesent = null;
                        sefcommitobj.sgglobalid = null;
                        sefcommitobj.sgcompassconid = null;
                        sefcommitobj.SponsorSupporterGlobalID = null;
                        sefcommitobj.individualsgname = null;
                        sefcommitobj.bic = null;
                        sefcommitobj.iban = null;
                        sefcommitobj.orgAddPref = null;
                        sefcommitobj.orgaddresslineone = null;
                        sefcommitobj.orgaddresslinetwo = null;
                        sefcommitobj.orgaddresslinethree = null;
                        sefcommitobj.orgaddresslinefour = null;
                        sefcommitobj.orgtown = null;
                        sefcommitobj.orgcounty = null;
                        sefcommitobj.orgaddresscountry = null;
                        sefcommitobj.orgpostcode = null;
                        sefcommitobj.isorgcorrsponsor = null;
                        sefcommitobj.sponsorship = null;
                        sefcommitobj.manager = null;
                        sefcommitobj.bankaddress = null;
                        sefcommitobj.bankpostcode = null;
                        sefcommitobj.commBBDDStartDate = null;
                        sefcommitobj.commPaymentMethod = null;
                        sefcommitobj.DepNeedStatus = null;
                        sefcommitobj.IsSponPlus = null;
                        sefcommitobj.delinkType = null;
                        sefcommitobj.delinkReason = null;
                        sefcommitobj.isChildChangeFlow = null;
                        sefcommitobj.Sponsorshipsource = null;
                        sefcommitobj.IsHillsongSponPlus = null;
                        sefcommitobj.nonDDPaymentMethod = null;
                        sefcommitobj.CreateRG = null;
                        sefcommitobj.AnnualBirthDate = null;
                        sefcommitobj.AnnualChristmasDate = null;

                        #endregion


                        SendDataToMainWS(sefcommitobj, 1002);//uncomment after debug
                        appLogger.Info("Processing ended in AssignedAndSendDepartureRequestToESB with data " + SimpleJson.SerializeObject(sefcommitobj));
                    }
                    else
                    {
                        appLogger.Info("Supporter data not found from RN on automation of sub failed at SEF.");
                        CreateIncidentAutomationOfSubFailedAtSEF(DepSEF.ContactId, DepSEF.OldNeedKey, SEFGUID);
                        InsertSEFOperationResponse(SEFGUID, "Supporter data not found from RN on automation of sub failed at SEF.", "ExitToResolve", false);//SEF Log
                        UpdateRTEenquiryStatus(DepSEF.ETREnquiryId, false);
                        UpdateRTXDisposition(DepSEF.RTXIncidentId);
                    }
                    #endregion
                }
                else
                {
                    appLogger.Info("Child commitment data not found with needkey: " + DepSEF.OldNeedKey + " automation of sub failed at SEF.");
                    CreateIncidentAutomationOfSubFailedAtSEF(DepSEF.ContactId, DepSEF.OldNeedKey, SEFGUID);
                    InsertSEFOperationResponse(SEFGUID, "Child commitment data not found with needkey: " + DepSEF.OldNeedKey + " automation of sub failed at SEF.", "ExitToResolve", false);//SEF Log
                    UpdateRTEenquiryStatus(DepSEF.ETREnquiryId, false);
                    UpdateRTXDisposition(DepSEF.RTXIncidentId);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in AssignedAndSendDepartureRequestToESB: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("AssignedAndSendDepartureRequestToESB ended...");
        }
        public void UpdateDepartureSetupStatus(long IncidentId, string GUID, bool Failed)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };

                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                GenericField SetupStartedGenericField = null;
                GenericField SetupGUIDGenericField = null;
                GenericField SetupEndateGenericField = null;
                GenericField SetupStatusGenericField = null;
                if (Failed)
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["Failed"]), DataTypeEnum.NAMED_ID);//Failed
                    SetupEndateGenericField = createGenericfield("setupended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);
                }
                else
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary["In Progress"]), DataTypeEnum.NAMED_ID);// In Progress
                    SetupStartedGenericField = createGenericfield("setupstarted", createdatetimedataValue(Now), DataTypeEnum.DATETIME);
                    if (!string.IsNullOrEmpty(GUID))
                    {
                        SetupGUIDGenericField = createGenericfield("setupguid", createStringdataValue(GUID), DataTypeEnum.STRING);
                    }
                }

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStartedGenericField, SetupStatusGenericField, SetupGUIDGenericField, SetupEndateGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                string Type = Failed ? "setupended" : "setupstarted";
                appLogger.Info("Departure Automated Enquiry Updated " + IncidentId);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in UpdateSetupStatusStartedField: " + ex.Message + " with incident id " + IncidentId);
                appLogger.Error(ex.StackTrace);
                appLogger.Error(ex.InnerException);
            }
        }

        #region Fetch Existing Commitment Data and Supporter Data
        public ExistingCommitmentData GetSupporterGrpAndCommitmentData(string Needkey)
        {
            ExistingCommitmentData eData = new ExistingCommitmentData();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = @"SELECT 
                                    C.ID, 
                                    C.SupporterGroup, 
                                    C.SupporterGroup.Name, 
                                    C.SupporterGroup.AddressSalutation, 
                                    C.SupporterGroup.LetterSalutation, 
                                    C.SupporterGroup.PreferredName, 
                                    C.SupporterGroup.GlobalID, 
                                    C.BeneficiaryOrICPHold.HoldID, 
                                    C.GlobalCommitmentID, 
                                    C.GlobalCorrespCommitmentID, 
                                    C.LinkType, 
                                    C.LinkReason, 
                                    C.BlackbaudID, 
                                    C.MarketingChannel, 
                                    C.Campaign, 
                                    C.BBDDAmount, 
                                    C.Need.NeedKey, 
                                    C.Need.Beneficiary_GlobalID, 
                                    C.Need.AbbreviatedName,
                                    C.SupporterGroup.Type
                                FROM 
                                    SCBS_CM.Commitment C WHERE SCBS_CM.Commitment.Need.NeedKey = '" + Needkey + "' AND C.SponsorshipAct != 1106 AND C.EndDate IS NULL";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        eData.ExistingCommitmentId = values[0];
                        eData.supgrpid = Convert.ToInt32(values[1]);
                        eData.ExistingSupporterGroupID = values[1];
                        eData.sgname = values[2];
                        eData.sgaddresssalutation = values[3];
                        eData.sglettersalutation = values[4];
                        eData.SupGrpPreferredName = values[5];
                        eData.CorrespondentSupporterGlobalID = values[6];
                        //eData.BeneficiaryHoldId = values[7];
                        eData.ExistingGlobalCommitmentId = values[8];
                        eData.ExistingGlobalCorrCommitmentId = values[9];
                        //eData.linktype = values[10];
                        //eData.linkreason = values[11];
                        eData.ComBBId = values[12];
                        eData.commMarketingChannel = values[13];
                        eData.commCampaign = values[14];
                        eData.commBBDDAmount = values[15];
                        //eData.amount = Convert.ToInt32(values[15]);

                        eData.childnumber = values[16];
                        //eData.BeneficiaryGlobalId = values[17];
                        eData.ExistingBeneficiaryGlobalId = values[17];
                        //eData.sponsorchild = values[18];
                        eData.SupGrpType = values[19];
                    }
                    else
                    {
                        appLogger.Info("No data found in GetSupporterGrpAndCommitmentData Row");
                        eData = null;
                    }
                }
                else
                {
                    appLogger.Info("No record found in GetSupporterGrpAndCommitmentData function");
                    eData = null;
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupporterGrpAndCommitmentData: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                eData = null;
            }
            return eData;
        }
        public SEFModel GetDepartureSupporterData(long contactid)
        {
            SEFModel sefObj = new SEFModel();
            SEFModel EPObj = new SEFModel();
            EPObj = GetEmailAndPhoneNo(contactid);
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT c.customfields.c.titlename.lookupname,c.customfields.c.titlename.id,c.name.first,c.name.last,c.customfields.c.street1,c.customfields.c.street2,c.customfields.c.street3,c.customfields.c.street4,c.customfields.c.town,c.customfields.c.county, c.customfields.c.add_mailingcountrydrop.id,c.customfields.c.postcode,c.customfields.c.connectusestage.lookupname FROM Contact as c where id =" + contactid;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Split('^');
                            sefObj.titlestring = values[0];
                            sefObj.title = values[1];
                            sefObj.firstname = values[2];
                            sefObj.lastname = values[3];
                            sefObj.addresslineone = values[4];
                            sefObj.addresslinetwo = values[5];
                            sefObj.addresslinethree = values[6];
                            sefObj.addresslinefour = values[7];
                            sefObj.town = values[8];
                            sefObj.county = values[9];
                            sefObj.addresscountry = values[10];
                            sefObj.postcode = values[11];
                            sefObj.connectusestage = values[12];
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDepartureSupporterData :" + e.Message + " with supporter id: " + contactid);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                sefObj = null;
            }
            return sefObj;
        }
        public string GetDepartedChildGlobalId(string Needkey)
        {
            string Beneficiary_GlobalID = null;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get Need data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = @"SELECT 
                                    N.Beneficiary_GlobalID
                                FROM 
                                    SCBS_CHILD.Need N WHERE N.NeedKey = '" + Needkey + "'";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        Beneficiary_GlobalID = result.CSVTables[0].Rows[0];
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetDepartedChildGlobalId: " + e.Message + " for Needkey :" + Needkey);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Beneficiary_GlobalID;
        }
        public SupporterDataList GetSupportersDetails(List<string> contactids)
        {
            SEFModel EPObj = new SEFModel();
            SupporterDataList slObj = new SupporterDataList();

            #region Model member Init
            slObj.titlestring = new List<string>();
            slObj.title = new List<string>();
            slObj.firstname = new List<string>();
            slObj.lastname = new List<string>();
            slObj.addresslineone = new List<string>();
            slObj.addresslinetwo = new List<string>();
            slObj.addresslinethree = new List<string>();
            slObj.addresslinefour = new List<string>();
            slObj.town = new List<string>();
            slObj.county = new List<string>();
            slObj.addresscountry = new List<string>();
            slObj.postcode = new List<string>();
            slObj.connectusestage = new List<string>();
            slObj.email = new List<string>();
            slObj.yearofbirth = new List<string>();
            slObj.mobilephone = new List<string>();
            #endregion

            //EPObj = GetEmailAndPhoneNo(contactid);
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT c.customfields.c.titlename.lookupname,c.customfields.c.titlename.id,c.name.first,c.name.last,c.customfields.c.street1,c.customfields.c.street2,c.customfields.c.street3,c.customfields.c.street4,c.customfields.c.town,c.customfields.c.county, c.customfields.c.add_mailingcountrydrop.id,c.customfields.c.postcode,c.customfields.c.connectusestage.lookupname,c.id,c.customfields.c.yearofbirth FROM Contact as c where id IN (" + string.Join(",", contactids) + ")";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Split('^');
                            slObj.titlestring.Add(values[0]);
                            slObj.title.Add(values[1]);
                            slObj.firstname.Add(values[2]);
                            slObj.lastname.Add(values[3]);
                            slObj.addresslineone.Add(values[4]);
                            slObj.addresslinetwo.Add(values[5]);
                            slObj.addresslinethree.Add(values[6]);
                            slObj.addresslinefour.Add(values[7]);
                            slObj.town.Add(values[8]);
                            slObj.county.Add(values[9]);
                            slObj.addresscountry.Add(values[10]);
                            slObj.postcode.Add(values[11]);
                            slObj.connectusestage.Add(values[12]);
                            EPObj = GetSupporterEmailAndPhoneNo(values[13]);
                            slObj.yearofbirth.Add(values[14]);
                            slObj.email.Add(EPObj.email);
                            slObj.mobilephone.Add(EPObj.mobilephone);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSupportersDetails :" + e.Message + " with supporter ids: " + string.Format(",", contactids));
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                slObj = null;
            }
            return slObj;
        }
        public SEFModel GetSupporterEmailAndPhoneNo(string contactid)
        {
            string Query = "SELECT contact FROM contact where id=" + contactid;
            SEFModel spobj = new SEFModel();
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get Supporter";

            Contact contactTemplate = new Contact();
            contactTemplate.CustomFields = new GenericObject() { };
            contactTemplate.Emails = new Email[] { };
            contactTemplate.Phones = new Phone[] { };

            RNObject[] objectTemplates = new RNObject[] { contactTemplate };
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();


            QueryResultData[] results;
            head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out results);

            if (results[0].RNObjectsResult.Length == 0)
            {
                return spobj;
            }
            foreach (RNObject RNsupporter in results[0].RNObjectsResult)
            {
                Contact contact = (Contact)RNsupporter;
                if (((Contact)(RNsupporter)).Emails != null)
                    spobj.email = ((Contact)(RNsupporter)).Emails[0].Address;
                else
                    spobj.email = "";
                if (((Contact)(RNsupporter)).Phones != null)
                    spobj.mobilephone = ((Contact)(RNsupporter)).Phones[0].Number;
                else
                    spobj.mobilephone = "";
            }

            return spobj;
        }
        public List<string> GetLinkedSupportersIds(int SupporterGroupId)
        {
            List<string> SupporterIds = new List<string>();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = @"SELECT 
                                    C.SupporterID
                                FROM 
                                    SCBS_SUP.SupporterGroupLinks C WHERE SCBS_SUP.SupporterGroupLinks.SupporterGroupID = " + SupporterGroupId + " AND SCBS_SUP.SupporterGroupLinks.SupporterID is not null;";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string id in result.CSVTables[0].Rows)
                        {
                            SupporterIds.Add(id);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetLinkedSupportersIds :" + e.Message + " with SupporterGroupId: " + SupporterGroupId);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);

            }
            return SupporterIds;
        }
        public NewChildData GetNewChildData(string Needkey)
        {
            NewChildData child = new NewChildData();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = @"SELECT 
                                    H.HoldID,
                                    H.NeedRNID.Beneficiary_GlobalID,
                                    H.NeedRNID.AbbreviatedName
                                    
                                FROM 
                                    SCBS_CHILD.BeneficiaryOrICPHold H WHERE H.NeedRNID.NeedKey = '" + Needkey + "' ORDER BY H.ID DESC";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        string[] values = result.CSVTables[0].Rows[0].Split('^');
                        child.NewChild_BeneficiaryHoldId = values[0];
                        child.NewChild_BeneficiaryGlobalId = values[1];
                        child.NewChild_sponsorchild = values[2];

                    }
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetNewChildData:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return child;
        }
        public int GetRGAmountFromNeedkey(string Needkey)
        {
            int Amount = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = @"SELECT 
                                    S.RGAmount
                                FROM 
                                    SCBS_CM.SchedChildDepartures S WHERE S.Need.NeedKey = '" + Needkey + "' ORDER BY SCBS_CM.SchedChildDepartures.ID DESC";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        if (!string.IsNullOrEmpty(result.CSVTables[0].Rows[0]))
                        {
                            Amount = Convert.ToInt32(Convert.ToDouble(result.CSVTables[0].Rows[0]));
                        }
                        else
                        {
                            appLogger.Info("ETR - RGAmount is empty in Beneficiary Kit Data.");
                        }
                        
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetRGAmountFromNeedkey: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return Amount;
        }
        public bool checkForCorrespodenceComm(string Needkey)
        {
            bool IsCorrComm = false;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT C.SponsorshipAct FROM SCBS_CM.Commitment C WHERE C.Need.NeedKey = '" + Needkey + "' AND C.EndDate is null;";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    foreach (string act in result.CSVTables[0].Rows)
                    {
                        if (act == "1106")
                        {
                            IsCorrComm = true;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in checkForCorrespodenceComm: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return IsCorrComm;
        }
        public void UpdateSetupBotStatusCheck(long IncidentId, string Status)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };


                GenericField SetupStatusGenericField = null;
                SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(SetupStatusDictionary[Status]), DataTypeEnum.NAMED_ID);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info("Incident updated for CheckBot process with incidentid " + IncidentId + " for Status:" + Status);
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in Updating incident for CheckBot status " + ex.Message + " with incident id " + IncidentId + " with status: " + Status);
                appLogger.Error(ex.InnerException);
                appLogger.Error(ex.StackTrace);
            }
        }
        public void UpdateRTEenquiryStatus(long IncidentId, bool IsSuccess)
        {
            appLogger.Info("UpdateRTEenquiryStatus started...");
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };
                GenericField SetupEndateGenericField = null;
                GenericField SetupStatusGenericField = null;
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                if (IsSuccess)
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1692), DataTypeEnum.NAMED_ID);//succeeded
                }
                else
                {
                    SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1693), DataTypeEnum.NAMED_ID);//Failed
                }


                SetupEndateGenericField = createGenericfield("setupended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField, SetupEndateGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info("UpdateRTEenquiryStatus Status updated successfully with incident: " + IncidentId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateRTEenquiryStatus: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("UpdateRTEenquiryStatus ended...");
        }
        public void UpdateRTEenquiryManualStatus(long IncidentId)
        {
            appLogger.Info("UpdateRTEenquiryManualStatus started...");
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                };
                GenericField SetupEndateGenericField = null;
                
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                

                SetupEndateGenericField = createGenericfield("setupended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupEndateGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info("UpdateRTEenquiryManualStatus Status updated successfully with incident: " + IncidentId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateRTEenquiryManualStatus: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("UpdateRTEenquiryManualStatus ended...");
        }
        public void UpdateRTXDisposition(long IncidentId)
        {
            appLogger.Info("UpdateRTXDisposition started...");
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                    Disposition = new NamedIDHierarchy
                    {
                        ID = new ID
                        {
                            id = 1287,//tst1 1192 - Auto-sub child failed / live 1287
                            idSpecified = true
                        }
                    },
                };
                GenericField SetupEndateGenericField = null;
                GenericField SetupStatusGenericField = null;
                DateTime Now = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Unspecified);//GMT standard time
                SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1693), DataTypeEnum.NAMED_ID);//Failed
                SetupEndateGenericField = createGenericfield("setupended", createdatetimedataValue(Now), DataTypeEnum.DATETIME);

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField, SetupEndateGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info("RTXAutomatedEnquiry Status updated successfully with incident: " + IncidentId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateRTXDisposition: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("UpdateRTXDisposition ended...");
        }

        #endregion

        #endregion

        #region Cancel Recurring Gift
        public List<cancelRecurringGift> CancelRecurringGift(List<cancelRecurringGift> rgobj, string delinkReason, string FundType, int DonationAmount, bool IsAssignToGeneralFund, string IncidentRefId, string DDiSource, string DDiSourceDate)
        {
            appLogger.Info($"CancelRecurringGift Process started with request: {SimpleJson.SerializeObject(rgobj)} delinkReason :{delinkReason} FundType :{FundType}  DonationAmount:{DonationAmount} IsAssignToGeneralFund:{IsAssignToGeneralFund} IncidentRefId:{IncidentRefId} DDiSource:{DDiSource} DDiSourceDate:{DDiSourceDate}");

            cancelRecurringGift responce = new cancelRecurringGift();// responce for newly added RG
            bool AssignToGeneralProcessDone = false;
            if (IsAssignToGeneralFund)
            {
                for (int i = 0; i < rgobj.Count; i++)
                {
                    bool Success = false;

                    if (!AssignToGeneralProcessDone)
                    {
                        bool IsRGSuccess = false;
                        appLogger.Info("Step1: Assign OtherRecurringGift object process started");
                        OtherRecurringGift rgData = new OtherRecurringGift();
                        rgData.LookupID = rgobj[i].PrimarySupporterblackbaudid;
                        rgData.SponsorshipType = FundType;
                        rgData.RevenueId = rgobj[i].revenueid;
                        rgData.TotalDonationAmount = DonationAmount;
                        rgData.DDISource = DDiSource;
                        rgData.DDISourceDate = DDiSourceDate;
                        appLogger.Info("Step1: Assign OtherRecurringGift object process ended");
                        appLogger.Info("Step2: CheckIfRgAlredayExist process started");
                        bool IsRgExist = CheckIfRgAlredayExist(rgData);
                        appLogger.Info("Step2: CheckIfRgAlredayExist process ended with IsRgExist: " + IsRgExist);
                        if (!IsRgExist)
                        {
                            appLogger.Info("Step3: CreateRecurringGift process started");
                            IsRGSuccess = CreateRecurringGift(rgobj[i].PrimarySupporterblackbaudid, FundType, DonationAmount, rgobj[i].commBBID, DDiSource, DDiSourceDate);
                            appLogger.Info("Step3: CreateRecurringGift process ended");
                        }

                        responce.sponsorshipType = FundType;
                        responce.PrimarySupporterblackbaudid = rgobj[i].PrimarySupporterblackbaudid;
                        responce.conid = rgobj[i].conid;
                        responce.childlocalid = "";
                        responce.commBBID = "";
                        responce.Responce = "False";
                        responce.Reason = "Failed";

                        if (IsRGSuccess)
                        {
                            responce.Responce = "True";
                            responce.Reason = "Added";
                        }
                        if (IsRgExist)
                        {
                            responce.Responce = "True";
                            responce.Reason = "Updated";
                        }
                        AssignToGeneralProcessDone = true;
                        UpdateCancelRGIncident(IncidentRefId, FundType);
                    }
                    if (rgobj[i].sponsorshipType != FundType)
                    {
                        appLogger.Info("Cancel process started for " + rgobj[i].sponsorshipType);
                        if (rgobj[i].sponsorshipType == "Child birthday gift")
                        {
                            Success = CancelBirthdayRecurringGift(rgobj[i].PrimarySupporterblackbaudid, rgobj[i].childlocalid, delinkReason, rgobj[i].commBBID);
                            if (Success)
                            {
                                rgobj[i].Responce = "True";
                                rgobj[i].Reason = "Cancelled";
                            }
                            else
                            {
                                rgobj[i].Responce = "False";
                                rgobj[i].Reason = "Failed";
                            }
                        }
                        else if (rgobj[i].sponsorshipType == "Sponsorship")
                        {
                            rgobj[i].Responce = rgobj[i].Responce;
                            rgobj[i].Reason = rgobj[i].Reason;
                        }
                        else
                        {
                            Success = CancelChristmasAndSponsorshipPlus(rgobj[i].PrimarySupporterblackbaudid, rgobj[i].sponsorshipType, delinkReason, rgobj[i].revenueid, rgobj[i].commBBID);
                            if (Success)
                            {
                                rgobj[i].Responce = "True";
                                rgobj[i].Reason = "Cancelled";
                            }
                            else
                            {
                                rgobj[i].Responce = "False";
                                rgobj[i].Reason = "Failed";
                            }
                        }
                        appLogger.Info("Cancel process ended");
                    }
                }
            }
            else
            {
                appLogger.Info("Cancel RG ELSE part started");
                bool Success = false;
                for (int i = 0; i < rgobj.Count; i++)
                {
                    appLogger.Info("Cancel process started for " + rgobj[i].sponsorshipType);

                    if (rgobj[i].sponsorshipType == "Child birthday gift")
                    {
                        Success = CancelBirthdayRecurringGift(rgobj[i].PrimarySupporterblackbaudid, rgobj[i].childlocalid, delinkReason, rgobj[i].commBBID);
                        if (Success)
                        {
                            rgobj[i].Responce = "True";
                            rgobj[i].Reason = "Cancelled";
                        }
                        else
                        {
                            rgobj[i].Responce = "False";
                            rgobj[i].Reason = "Failed";
                        }
                    }
                    else if (rgobj[i].sponsorshipType == "Sponsorship")
                    {
                        rgobj[i].Responce = rgobj[i].Responce;
                        rgobj[i].Reason = rgobj[i].Reason;
                    }
                    else
                    {
                        Success = CancelChristmasAndSponsorshipPlus(rgobj[i].PrimarySupporterblackbaudid, rgobj[i].sponsorshipType, delinkReason, rgobj[i].revenueid, rgobj[i].commBBID);
                        if (Success)
                        {
                            rgobj[i].Responce = "True";
                            rgobj[i].Reason = "Cancelled";
                        }
                        else
                        {
                            rgobj[i].Responce = "False";
                            rgobj[i].Reason = "Failed";
                        }
                    }
                }

                appLogger.Info("Cancel Sponsorship ELSE part ended");
            }
            if (IsAssignToGeneralFund)
            {
                if (responce != null)
                {
                    rgobj.Add(responce);
                }
            }

            appLogger.Info("CancelRecurringGift process ended");
            return rgobj;
        }
        public bool CheckIfRgAlredayExist(OtherRecurringGift rgdata)
        {
            appLogger.Info("Data received to check CheckIfRgAlredayExist: " + SimpleJson.SerializeObject(rgdata));
            bool IsRgCreated = false;
            try
            {
                var accountId = getNonSponorsAccountDetails(rgdata.LookupID);
                string constituentId = GetConstituentOnLookupID(rgdata.LookupID).Output.Rows[0].Values[0];
                var orgdata = fetchOtherRecurring(constituentId);
                if (orgdata.Count > 0)
                {
                    foreach (var rg in orgdata)
                    {
                        if ((rg.Values[0] == "Active" || rg.Values[0] == "Held") && rg.Values[7] == rgdata.SponsorshipType)//&& rg.Values[10] == rgdata.RevenueId
                        {
                            IsRgCreated = true;

                            RecurringGiftEditForm2Data rgEdit = new RecurringGiftEditForm2Data();
                            rgEdit.RecordID = rg.Values[11];

                            double rgAmount = Convert.ToDouble(rg.Values[1]);

                            RecurringGiftEditForm2Data.SPLITS_DATAITEM[] array = new RecurringGiftEditForm2Data.SPLITS_DATAITEM[1];
                            array[0] = new RecurringGiftEditForm2Data.SPLITS_DATAITEM();
                            array[0].DESIGNATIONID = new Guid(FundsDesignation[rgdata.SponsorshipType]);
                            array[0].AMOUNT = new decimal(rgdata.TotalDonationAmount + rgAmount + 0.0);
                            rgEdit.SPLITS = array;
                            rgEdit.AMOUNT = new decimal(rgdata.TotalDonationAmount + rgAmount + 0.0);
                            string rgRecordId = "";
                            try
                            {
                                rgRecordId = rgEdit.Save(provider());
                                appLogger.Info($"{rgdata.SponsorshipType} Recurring gift successfully updated with amount {rgdata.TotalDonationAmount}");
                            }
                            catch (AppFxWebServiceException e)
                            {
                                appLogger.Error("Error while RecurringGiftEditForm2Data in CheckIfRgAlredayExist(): " + e.Message);
                                appLogger.Error(e.StackTrace);
                                appLogger.Error(e.InnerException);
                            }


                            RecurringGiftPaymentDetailsEditForm3Data editPaymentFormData = new RecurringGiftPaymentDetailsEditForm3Data();
                            editPaymentFormData.RecordID = rgRecordId;
                            editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Direct_Debit;
                            editPaymentFormData.DDISOURCECODEID = GetIdForCodeTableValue("DDISOURCECODE", rgdata.DDISource);
                            editPaymentFormData.DDISOURCEDATE = Convert.ToDateTime(rgdata.DDISourceDate);
                            try
                            {
                                string payDetails = editPaymentFormData.Save(provider());

                            }
                            catch (Exception e)
                            {
                                appLogger.Error("Error while RecurringGiftPaymentDetailsEditForm3Data in CheckIfRgAlredayExist() : " + e.Message);
                                appLogger.Error(e.StackTrace);
                                appLogger.Error(e.InnerException);
                            }


                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfRgAlredayExist: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IsRgCreated;
        }
        public bool CreateRecurringGift(string Lookupid, string FundType, int DonationAmount, string spid, string DDiSource, string DDiSourceDate)
        {
            bool IsSuccess = false;
            appLogger.Info("CreateRecurringGift process started...");
            try
            {
                var accountId = getNonSponorsAccountDetails(Lookupid);
                SponsorshipModel sponsorshipData = new SponsorshipModel();
                DateTime RgInstallmentStartDate = new DateTime();
                List<DataListResultRow> row = GetCommitmentStartDateAndRgInstallmentStartDate(spid);
                if (row != null && row.Count > 0)
                {
                    RgInstallmentStartDate = Convert.ToDateTime(row[0].Values[3]);
                }
                sponsorshipData = GetSponsorshipDetails(Lookupid);
                sponsorshipData.RgInstallmentStartDate = RgInstallmentStartDate;
                sponsorshipData.DDISource = DDiSource;
                sponsorshipData.DDISourceDate = DDiSourceDate;
                string ReferenceNo = !string.IsNullOrEmpty(sponsorshipData.referenceNo) ? sponsorshipData.referenceNo : Lookupid;
                IsSuccess = AddRecurringGift(Lookupid, accountId[0].Values[4], ReferenceNo, sponsorshipData, FundsDesignation[FundType], DonationAmount);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateRecurringGift: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                IsSuccess = false;
            }
            appLogger.Info("CreateRecurringGift process ended...");
            return IsSuccess;
        }
        private bool AddRecurringGift(string lookupid, string acc, string referenceNo, SponsorshipModel sobj, string DesignationID, int DonationAmount)
        {
            bool IsSuccess = false;
            string msg = "";
            RecurringGiftEditForm2Data recurringGift = new RecurringGiftEditForm2Data();

            try
            {
                appLogger.Info("AddRecurringGift started...");
                RecurringGiftAddFormData data = new RecurringGiftAddFormData();
                data.AMOUNT = new decimal(DonationAmount);
                data.CONSTITUENTID = new Guid(GetConstituentOnLookupID(lookupid).Output.Rows[0].Values[0]);

                data.DATE = DateTime.Now;
                data.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue.RecurringGiftAddFormEnums.PAYMENTMETHODCODE.Direct_Debit;
                string frequency = sobj.InstallmentFrequency;
                switch (frequency)
                {
                    case "Monthly":
                        data.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue.RecurringGiftAddFormEnums.FREQUENCYCODE.Monthly;
                        break;
                    case "Annual":
                        data.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue.RecurringGiftAddFormEnums.FREQUENCYCODE.Annually;
                        break;
                    case "Semi-Annual":
                        data.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue.RecurringGiftAddFormEnums.FREQUENCYCODE.SemiAnnually;
                        break;
                    case "Quarterly":
                        data.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue.RecurringGiftAddFormEnums.FREQUENCYCODE.Quarterly;
                        break;
                    case "Weekly":
                        data.FREQUENCYCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.Revenue.RecurringGiftAddFormEnums.FREQUENCYCODE.Weekly;
                        break;
                }

                DateTime RgStartDate = sobj.RgInstallmentStartDate;
                DateTime TodaysDate = DateTime.Now;
                int RgDay = RgStartDate.Day;
                DateTime formDate = new DateTime(TodaysDate.Year, TodaysDate.Month, RgDay);

                if (TodaysDate.Date >= formDate.Date)
                {
                    formDate = formDate.AddMonths(1);
                }
                else if (formDate.Date > TodaysDate.Date && (formDate.Day - TodaysDate.Day) != 7)
                {
                    formDate = formDate.AddMonths(1);
                }

                data.STARTDATE = DateTime.ParseExact(formDate.ToString("dd-MM-yyyy"), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                RecurringGiftAddFormData.SPLITS_DATAITEM[] array = new RecurringGiftAddFormData.SPLITS_DATAITEM[1];
                array[0] = new RecurringGiftAddFormData.SPLITS_DATAITEM();
                array[0].DESIGNATIONID = new Guid(DesignationID);
                array[0].AMOUNT = new decimal(DonationAmount);
                data.SPLITS = array;
                data.REFERENCEDATE = new FuzzyDate(DateTime.ParseExact(DateTime.Now.ToString("dd-MM-yyyy"), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture));
                data.REFERENCENUMBER = referenceNo;
                if (!string.IsNullOrEmpty(sobj.DDISource))
                {
                    data.DDISOURCECODEID = GetIdForCodeTableValue("DDISOURCECODE", sobj.DDISource);
                }
                data.DDISOURCEDATE = Convert.ToDateTime(sobj.DDISourceDate);
                data.CONSTITUENTACCOUNTID = new Guid(acc);
                string resultofgift = data.Save(provider());

                #region Set Advance notice sent date null

                DataFormLoadRequest Loadreq = new DataFormLoadRequest();
                Loadreq.ClientAppInfo = GetRequestHeader();
                Loadreq.FormID = Guid.Parse("a33c583d-376c-4a43-9ace-0cf913808c3d");//we have find datalist id for 
                Loadreq.RecordID = resultofgift;
                DataFormLoadReply loadReply = provider().Service.DataFormLoad(Loadreq);
                Blackbaud.AppFx.XmlTypes.DataForms.DataFormItem DataFormItem = loadReply.DataFormItem;


                DataFormSaveRequest savereq = new DataFormSaveRequest();
                savereq.ClientAppInfo = GetRequestHeader();
                savereq.FormID = Guid.Parse("a33c583d-376c-4a43-9ace-0cf913808c3d");
                savereq.ID = resultofgift;

                /* DataFormItem.Values.Remove("PMINSTRUCTIONDATE_NEW");
                 DataFormItem.Values.Add("PMINSTRUCTIONDATE_NEW", null, null);*/

                DataFormItem.Values.Remove("PMADVANCENOTICESENTDATE");
                DataFormItem.Values.Add("PMADVANCENOTICESENTDATE", null, null);
                savereq.DataFormItem = DataFormItem;
                DataFormSaveReply saveReply = provider().Service.DataFormSave(savereq);//to set new instruction date null
                #endregion


                RecurringGiftPaymentDetailsEditForm3Data editPaymentFormData = new RecurringGiftPaymentDetailsEditForm3Data();
                editPaymentFormData.RecordID = resultofgift;
                editPaymentFormData.PAYMENTMETHODCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PAYMENTMETHODCODE.Direct_Debit;
                editPaymentFormData.REFERENCEDATE = new FuzzyDate(DateTime.Now);
                if (!string.IsNullOrEmpty(sobj.DDISource))
                {
                    editPaymentFormData.DDISOURCECODEID = GetIdForCodeTableValue("DDISOURCECODE", sobj.DDISource);
                }
                editPaymentFormData.DDISOURCEDATE = Convert.ToDateTime(sobj.DDISourceDate);
                editPaymentFormData.PMADVANCENOTICESENTDATE = DateTime.Now.AddDays(3);

                editPaymentFormData.SENDPMINSTRUCTION = true;
                editPaymentFormData.PMINSTRUCTIONTOSENDCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftPaymentDetailsEditForm3Enums.PMINSTRUCTIONTOSENDCODE.New;
                try
                {
                    string payDetails = editPaymentFormData.Save(provider());
                    IsSuccess = true;
                }
                catch (AppFxException e)
                {
                    IsSuccess = false;
                    msg = "Error in adding recurring gift in BB.";
                    appLogger.Error("Error in adding for recurring gift : " + e.Message + " at Time " + DateTime.Now);
                }
                msg = "Created Recurring Gift in BB.";
                Console.WriteLine(msg + " for Supporter with BB ID " + lookupid + " and recurring ID " + resultofgift);
                appLogger.Info(msg + " for Supporter with BB ID " + lookupid + " and recurring ID " + resultofgift);
            }
            catch (Exception e)
            {
                IsSuccess = false;
                msg = "Error in adding recurring gift in BB.";
                Console.WriteLine("Error in adding for recurring gift : " + e.Message + " at Time " + DateTime.Now);
                appLogger.Error("Error in adding for recurring gift : " + e.Message + " at Time " + DateTime.Now);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("AddRecurringGift ended...");
            return IsSuccess;
        }
        public SponsorshipModel GetSponsorshipDetails(string Lookupid)
        {
            SponsorshipModel sobj = new SponsorshipModel();
            try
            {
                List<DataListResultRow> rgrow = fetchRecurringGifts(Lookupid);

                if (rgrow.Count > 0)
                {
                    foreach (DataListResultRow row in rgrow)
                    {
                        sobj.PaymentMethod = row.Values[8];
                        sobj.RecordId = row.Values[9];
                        sobj.InstallmentFrequency = row.Values[11];
                        sobj.DDISource = row.Values[14];
                        sobj.referenceNo = row.Values[15];
                    }
                }
                else
                {
                    appLogger.Info($"No sponsorship record found for given constituent {Lookupid}");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSponsorshipDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return sobj;
        }
        public List<DataListResultRow> getNonSponorsAccountDetails(string lookup)
        {
            DataListLoadRequest req = new DataListLoadRequest();
            req.ClientAppInfo = GetRequestHeader();
            req.DataListID = new Guid("75c939dc-4191-4fb7-adc9-7ff014cd6bde");//Data List: Non-Sponsor's Details for Non-Child Donations


            req.IncludeMetaData = true;
            var fvSet = new DataFormFieldValueSet();
            fvSet.Add("LOOKUPID", lookup);
            // fvSet.Add("SPONSORSHIPSSTATUS", "Active");
            var dfi = new DataFormItem();
            dfi.Values = fvSet;
            req.Parameters = dfi;
            var datareply = _service.DataListLoad(req);
            List<DataListResultRow> row = new List<DataListResultRow>();
            var result = _service.DataListLoad(req);

            try
            {
                foreach (var resultST in result.Rows)
                {
                    if (resultST.Values[3] == "EFT" && !string.IsNullOrWhiteSpace(resultST.Values[4]) && !string.IsNullOrWhiteSpace(resultST.Values[5]))
                    {
                        row.Add(resultST);
                    }
                }
                return row;
            }
            catch (AppFxWebServiceException e)
            {
                appLogger.Error("Error in getNonSponorsAccountDetails : " + e.Message + " for " + lookup + " at Time " + DateTime.Now);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getNonSponorsAccountDetails : " + e.Message + " for " + lookup + " at Time " + DateTime.Now);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return row;
        }
        public string FetchConstituentRecordIDOnCommitmentID(string commitmentId)
        {
            string ConstituentRecordID = "";
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("ef7f23a0-444c-48ad-96d5-6e1be04668c5");// datalist : Fetch Constituent details on Commitment id
                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SPONSORSPONSORSHIPSCOMMITMENTID", commitmentId);
                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var datareply = _service.DataListLoad(req);
                if (datareply.TotalAvailableRows > 0)
                {
                    ConstituentRecordID = datareply.Rows[0].Values[0].ToString();
                }
            }
            catch (Exception ex)
            {
                appLogger.Error("Error in fetching Constituent Details  with commitment BBID : " + commitmentId + " " + ex.Message);
            }
            return ConstituentRecordID;
        }
        public bool CancelChristmasAndSponsorshipPlus(string PrimarySupporterblackbaudid, string sposorshiptype, string delinkReason, string revenueid, string spcommitmentid)
        {
            bool Success = false;
            appLogger.Info("Cancelling Recurring Gift with Primary Supporter blackbaudid " + PrimarySupporterblackbaudid + ", sposorship type " + sposorshiptype + "and Reason" + delinkReason + " revenueid " + revenueid);
            try
            {
                string constituentId = GetConstituentOnLookupID(PrimarySupporterblackbaudid).Output.Rows[0].Values[0];
                if (!string.IsNullOrEmpty(constituentId))
                {
                    var rgdata = fetchOtherRecurring(constituentId);
                    if (rgdata.Count == 0)
                    {
                        constituentId = FetchConstituentRecordIDOnCommitmentID(spcommitmentid);// for only organization case 
                        rgdata = fetchOtherRecurring(constituentId);
                    }
                    if (rgdata.Count > 0)
                    {
                        foreach (var rg in rgdata)
                        {
                            if ((rg.Values[0] == "Active" || rg.Values[0] == "Held") && rg.Values[7] == sposorshiptype && rg.Values[10] == revenueid)
                            {
                                string RGRecordID = rg.Values[11];
                                Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftStatusEditFormData editRGstatusFormData = new RecurringGiftStatusEditFormData();
                                editRGstatusFormData.RecordID = RGRecordID;
                                string reasonid;
                                if (!CancelRGReasonDictionary.ContainsKey(Convert.ToString(delinkReason)))
                                {
                                    delinkReason = "Other";
                                }
                                reasonid = CancelRGReasonDictionary[Convert.ToString(delinkReason)];
                                Console.WriteLine("Reason id for " + delinkReason + " is " + reasonid);
                                editRGstatusFormData.REASONCODEID = new Guid(reasonid);
                                editRGstatusFormData.STATUSCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftStatusEditFormEnums.STATUSCODE.Canceled;
                                try
                                {
                                    editRGstatusFormData.Save(provider());
                                    appLogger.Info("Recurring gift is cancel successfully of type " + sposorshiptype + " with Primary Supporter blackbaudid" + PrimarySupporterblackbaudid);
                                    Success = true;
                                }
                                catch (AppFxWebServiceException e)
                                {
                                    appLogger.Error("Error while cancelling recurring gift : " + e.Message);
                                    appLogger.Error(e.StackTrace);
                                    appLogger.Error(e.InnerException);
                                    Success = false;
                                }
                            }
                        }
                    }
                }
                else
                {
                    appLogger.Info("No Constituent Found by Primary Supporter blackbaudid " + PrimarySupporterblackbaudid + " with sposorship type " + sposorshiptype);
                    Success = false;
                }
            }
            catch (Exception ex)
            {
                appLogger.Info("Error in Cancelling Recurring Gift with Primary Supporter blackbaudid : " + PrimarySupporterblackbaudid + " with sposorship type " + sposorshiptype + " : " + ex.Message);
                Success = false;
            }
            return Success;
        }
        public bool CancelBirthdayRecurringGift(string PrimarySupporterblackbaudid, string NeedKey, string delinkReason, string spcommitmentid)
        {
            bool Success = false;
            string constituentId = null;
            appLogger.Info("Cancelling Birthday Recurring Gift with CommitmentID " + PrimarySupporterblackbaudid + ", NeedKey " + NeedKey + "and Reason" + delinkReason + "with spcommitmentid " + spcommitmentid);
            try
            {
                constituentId = GetConstituentOnLookupID(PrimarySupporterblackbaudid).Output.Rows[0].Values[0];
                if (!string.IsNullOrEmpty(constituentId))
                {
                    var rgdata = fetchOtherRecurring(constituentId);
                    if (rgdata.Count == 0)
                    {
                        constituentId = FetchConstituentRecordIDOnCommitmentID(spcommitmentid);// for only organization case 
                        rgdata = fetchOtherRecurring(constituentId);
                    }
                    if (rgdata.Count > 0)
                    {
                        foreach (var rg in rgdata)
                        {
                            if (rg.Values[0] == "Active" && rg.Values[4] == NeedKey)
                            {
                                string RGRecordID = rg.Values[11];
                                Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftStatusEditFormData editRGstatusFormData = new RecurringGiftStatusEditFormData();
                                editRGstatusFormData.RecordID = RGRecordID;
                                string reasonid;
                                if (!CancelRGReasonDictionary.ContainsKey(Convert.ToString(delinkReason)))
                                {
                                    delinkReason = "Other";
                                }
                                reasonid = CancelRGReasonDictionary[Convert.ToString(delinkReason)];
                                Console.WriteLine("Reason id for " + delinkReason + " is " + reasonid);
                                editRGstatusFormData.REASONCODEID = new Guid(reasonid);
                                editRGstatusFormData.STATUSCODE_IDVALUE = Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.EditForms.Revenue.RecurringGiftStatusEditFormEnums.STATUSCODE.Canceled;
                                try
                                {
                                    editRGstatusFormData.Save(provider());
                                    appLogger.Info("Birthday Recurring gift is cancel successfully of child " + NeedKey + " with  Primary Supporter blackbaudid" + PrimarySupporterblackbaudid);
                                    Success = true;
                                }
                                catch (AppFxWebServiceException e)
                                {
                                    appLogger.Error("Error while cancelling Recurring recurring gift : " + e.Message);
                                    appLogger.Error(e.StackTrace);
                                    appLogger.Error(e.InnerException);
                                    Success = false;
                                }
                            }
                        }
                    }
                }
                else
                {
                    appLogger.Info("No Constituent Found for Cancelling Birthday Recurring Gift by Primary Supporter blackbaudid " + PrimarySupporterblackbaudid + " with NeedKey " + NeedKey);
                    Success = false;
                }
            }
            catch (Exception ex)
            {
                appLogger.Info("Error in Cancelling Birthday Recurring Gift with  Primary Supporter blackbaudid : " + PrimarySupporterblackbaudid + " with NeedKey " + NeedKey + " : " + ex.Message);
                Success = false;
            }
            return Success;
        }
        public List<DataListResultRow> fetchRecurringGifts(string constituentLookupID)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                var constituentDetails = GetConstituentOnLookupID(constituentLookupID);
                if (constituentDetails.Output.RowCount > 0)
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    request.DataListID = new Guid("0be1b11f-854a-45b1-b90b-bc7947d17f17");   // Data List: Bacs Recurring gifts - sponsorship
                    request.ContextRecordID = constituentDetails.Output.Rows[0].Values[0];
                    request.IncludeMetaData = true;
                    var result = _service.DataListLoad(request);

                    if (result.TotalRowsInReply > 0)
                    {

                        foreach (var res in result.Rows)
                        {
                            responseList.Add(res);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching recurring gifts for constituent : " + constituentLookupID + " : " + e.Message);
            }
            return responseList;
        }
        private Guid GetIdForCodeTableValue(string CodeTableName, string Description)
        {
            Blackbaud.AppFx.WebAPI.ServiceProxy.CodeTableEntryGetIDReply reply = new CodeTableEntryGetIDReply();
            try
            {
                var req = new CodeTableEntryGetIDRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.CodeTableName = CodeTableName;
                req.Description = Description;
                reply = _service.CodeTableEntryGetID(req);
            }
            catch (SoapException ex)
            {
                Console.WriteLine("Error in GetIdForCodeTableValue: " + ex.Message);
                appLogger.Error("Error in GetIdForCodeTableValue: " + ex.Message);
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error in GetIdForCodeTableValue: " + ex.Message);
                appLogger.Error("Error in GetIdForCodeTableValue: " + ex.Message);
            }
            return reply.ID;
        }
        public void UpdateCancelRGIncident(string EnquiryRefNo, string FundType)
        {
            long IncidentId = 0;

            IncidentId = GetIncidentId(EnquiryRefNo);
            if (IncidentId > 0)
            {
                try
                {
                    Incident incident = new Incident
                    {
                        ID = new ID
                        {
                            id = IncidentId,
                            idSpecified = true
                        },

                    };


                    RightNowServices.Thread[] thrd = new RightNowServices.Thread[2];
                    thrd[0] = new RightNowServices.Thread();
                    thrd[0].action = ActionEnum.add;
                    thrd[0].actionSpecified = true;
                    thrd[0].EntryType = new NamedID { ID = new ID { id = 1, idSpecified = true } };
                    thrd[0].Channel = new NamedID { ID = new ID { id = 6, idSpecified = true } };
                    thrd[0].Text = "Donation re-allocation to fund(" + FundType + "), auto-advanced notice sent.";


                    incident.Threads = thrd;


                    GenericObject genericObject = new GenericObject();
                    genericObject.GenericFields = new GenericField[] { };
                    genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                    GenericField customFieldsPackage = new GenericField();
                    customFieldsPackage.name = "c";
                    customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                    customFieldsPackage.dataTypeSpecified = true;
                    customFieldsPackage.DataValue = new DataValue();
                    customFieldsPackage.DataValue.Items = new[] { genericObject };
                    customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                    incident.CustomFields = new GenericObject();
                    incident.CustomFields.GenericFields = new GenericField[1];
                    incident.CustomFields.GenericFields[0] = customFieldsPackage;
                    incident.CustomFields.ObjectType = new RNObjectType();
                    incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                    RNObject[] createContact = new RNObject[] { incident };
                    rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                    new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                    appLogger.Info("Cancel RG Incident successfully updated with incidentId : " + IncidentId);
                }
                catch (Exception ex)
                {
                    appLogger.Error("Error in UpdateCancelRGIncident: " + ex.Message + " with incident id " + IncidentId);
                    appLogger.Error(ex.InnerException);
                    appLogger.Error(ex.StackTrace);
                }
            }
            else
            {
                appLogger.Info("No incident id found from given EnquiryRefNo: " + EnquiryRefNo);
            }

        }
        public long GetIncidentId(string IncidentRef)
        {
            long IncidentId = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Incident data";
                String query = "SELECT Incident.ID FROM Incident WHERE Incident.lookupName='" + IncidentRef + "'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        IncidentId = Convert.ToInt64(result.CSVTables[0].Rows[0]);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error while fetching GetIncidentId :" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IncidentId;
        }

        #endregion

        #region Check if Sponsorship start Today
        public bool CheckSponsroshipStartToday(string sponsorshipID)
        {
            bool IsSponsorshipStartToday = false;
            try
            {
                DateTime Today = DateTime.Now.Date;
                DateTime SponsorshipStartDate = new DateTime();
                DateTime RgInstallmentStartDate = new DateTime();
                List<DataListResultRow> row = GetCommitmentStartDateAndRgInstallmentStartDate(sponsorshipID);
                if (row != null && row.Count > 0)
                {
                    SponsorshipStartDate = Convert.ToDateTime(row[0].Values[0]);
                    RgInstallmentStartDate = Convert.ToDateTime(row[0].Values[1]);

                    if (Today <= SponsorshipStartDate || Today <= RgInstallmentStartDate)
                    {
                        IsSponsorshipStartToday = true;
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching sponsorship details:" + e.Message + " with sponsorship id:" + sponsorshipID);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return IsSponsorshipStartToday;
        }
        public List<DataListResultRow> GetCommitmentStartDateAndRgInstallmentStartDate(string sponsorshipID)
        {
            List<DataListResultRow> row = new List<DataListResultRow>();
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("a8bc342a-6fd9-4c4a-b0af-da464e847c77");//Data List: Get sponsorship start date and RG installment start date


                req.IncludeMetaData = true;
                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("SPONSORSHIPSCOMMITMENTID", sponsorshipID);

                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                req.Parameters = dfi;
                var result = retryPolicy.Execute(() => _service.DataListLoad(req));
                if (result.Rows.Length > 0)
                {
                    foreach (DataListResultRow data in result.Rows)
                    {
                        row.Add(data);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetCommitmentStartDateAndRgInstallmentStartDate: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            return row;
        }

        #endregion

        #region (USID: IE90A) Rate Change 23: Notify Legally of Rate increase Send Advance Notice

        public void ImportRateChangeEnquiriesForKingslineData()
        {
            try
            {

            }
            catch (Exception e)
            {
                appLogger.Error("Error in ImportRateChangeEnquiriesForKingslineData: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public List<AdvanceNotice> GetWhiteMailAdvanceNoticeData()
        {
            List<AdvanceNotice> ANList = new List<AdvanceNotice>();
            try
            {
                string Query = "SELECT ID,LookupID,DirectDebitReferenceNo,DirectDebitAccountNo,TriggerType,Frequency,Office,Amount,Designation,PreferredChildName,BatchNo,Status,IncidentID,CurrencySymbol,CollectionDate,AdvanceNoticeSentDate,RevenueID,NeedKey,EnquiryCreatedTime FROM AdvanceNoticeControl where Type = 'WhiteMail' Order by BatchNo ASC";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader Reader;
                    Reader = cmd.ExecuteReader();
                    while (Reader.Read())
                    {
                        AdvanceNotice AdObj = new AdvanceNotice();
                        AdObj.RecordID = Convert.ToInt32(Reader["ID"]);
                        AdObj.RevenueID = Reader["RevenueID"] != null ? Reader["RevenueID"].ToString() : null;
                        AdObj.LookupID = Reader["LookupID"] != null ? Reader["LookupID"].ToString() : null;
                        AdObj.NeedKey = Reader["NeedKey"] != null ? Reader["NeedKey"].ToString() : null;
                        AdObj.DirectDebitReferenceNo = Reader["DirectDebitReferenceNo"] != null ? Reader["DirectDebitReferenceNo"].ToString() : null;
                        AdObj.DirectDebitAccountNo = Reader["DirectDebitAccountNo"] != null ? Reader["DirectDebitAccountNo"].ToString() : null;
                        AdObj.TriggerType = Reader["TriggerType"] != null ? Reader["TriggerType"].ToString() : null;
                        AdObj.Frequency = Reader["Frequency"] != null ? Reader["Frequency"].ToString() : null;
                        AdObj.Office = Reader["Office"] != null ? Reader["Office"].ToString() : null;
                        AdObj.Amount = Reader["Amount"] != null ? Convert.ToDecimal(Reader["Amount"]) : 0;
                        AdObj.Designation = Reader["Designation"] != null ? Reader["Designation"].ToString() : null;
                        AdObj.PreferredChildName = Reader["PreferredChildName"] != null ? Reader["PreferredChildName"].ToString() : null;
                        AdObj.BatchNo = Reader["BatchNo"] != null ? Reader["BatchNo"].ToString() : null;
                        AdObj.Status = Reader["Status"] != null ? Reader["Status"].ToString() : null;
                        AdObj.IncidentId = Reader["IncidentID"] != null ? Reader["IncidentID"].ToString() : null;
                        AdObj.Currency = Reader["CurrencySymbol"] != null ? Reader["CurrencySymbol"].ToString() : null;
                        AdObj.CollectionDate = Reader["CollectionDate"] != null ? Reader["CollectionDate"].ToString() : null;
                        AdObj.AdvanceNoticeDateSent = Reader["AdvanceNoticeSentDate"] != null ? Reader["AdvanceNoticeSentDate"].ToString() : null;
                        AdObj.EnquiryCreatedTime = Reader["EnquiryCreatedTime"] != null ? Reader["EnquiryCreatedTime"].ToString() : null;
                        ANList.Add(AdObj);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetWhiteMailAdvanceNoticeData: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return ANList;
        }
        public void SyncRateChangeEnquiriesForKingsline(List<RateChangeEnquiriesForKingsline> rateChangeList)
        {
            appLogger.Info("SyncRateChangeEnquiriesForKingsline Sync Started...");
            int rowCounter = 0;
            try
            {
                string command = "INSERT INTO `RateChangeEnquiriesForKingsline`(`RNID`, `RevenueIds`, `EnquiryRefNo`, `AddressSalutation`, `Street1`, `Street2`, `Street3`, `Street4`, `Street5`, `POBOX`, `Town`, `County`, `Postcode`, `Country`, `LetterSalutation`, `PaymentDetails`,`Segment`,`PaymentDetailsRowCount`, `AggregateAmount`, `NextCollectionDate`, `ANCreatedDate`, `DayOfInstallments`, `DirectDebitReferenceNo`, `DirectDebitAccountNo`,`Frequency`,`CurrencySymbol`) VALUES (?RNID,?RevenueIds,?EnquiryRefNo,?AddressSalutation,?Street1,?Street2,?Street3,?Street4,?Street5,?POBOX,?Town,?County,?Postcode,?Country,?LetterSalutation,?PaymentDetails,?Segment,?PaymentDetailsRowCount,?AggregateAmount,?NextCollectionDate,?ANCreatedDate,?DayOfInstallments,?DirectDebitReferenceNo,?DirectDebitAccountNo,?Frequency,?CurrencySymbol)";

                foreach (RateChangeEnquiriesForKingsline row in rateChangeList)
                {
                    try
                    {

                        // DB Upsert
                        using (MySqlConnection mConnection = new MySqlConnection(mycuk_tcpt4ConnectionString))
                        using (MySqlCommand myCmd = new MySqlCommand(command, mConnection))
                        {
                            mConnection.Open();
                            myCmd.Parameters.Add("?RNID", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.RNID) ? row.RNID : null;
                            myCmd.Parameters.Add("?RevenueIds", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.RevenueIds) ? row.RevenueIds : null;
                            myCmd.Parameters.Add("?AddressSalutation", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.AddressSalutation) ? row.AddressSalutation : null;
                            myCmd.Parameters.Add("?LetterSalutation", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.LetterSalutation) ? row.LetterSalutation : null;

                            myCmd.Parameters.Add("?Street1", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.street1) ? row.street1 : null;
                            myCmd.Parameters.Add("?Street2", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.street2) ? row.street2 : null;
                            myCmd.Parameters.Add("?Street3", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.street3) ? row.street3 : null;
                            myCmd.Parameters.Add("?Street4", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.street4) ? row.street4 : null;
                            myCmd.Parameters.Add("?Street5", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.street5) ? row.street5 : null;
                            myCmd.Parameters.Add("?POBOX", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.POBox) ? row.POBox : null;
                            myCmd.Parameters.Add("?Town", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.town) ? row.town : null;
                            myCmd.Parameters.Add("?County", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.county) ? row.county : null;
                            myCmd.Parameters.Add("?Postcode", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.postcode) ? row.postcode : null;

                            //myCmd.Parameters.Add("?Country", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.Country) ? row.Country : null;
                            myCmd.Parameters.Add("?Country", MySqlDbType.VarChar).Value = "United Kingdom";

                            myCmd.Parameters.Add("?PaymentDetails", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.PaymentDetails) ? row.PaymentDetails : null;
                            myCmd.Parameters.Add("?Segment", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.Segment) ? row.Segment : null;

                            myCmd.Parameters.Add("?PaymentDetailsRowCount", MySqlDbType.Int64).Value = row.PaymentDetailsRowCount != 0 ? row.PaymentDetailsRowCount : 0;
                            myCmd.Parameters.Add("?DayOfInstallments", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.DayOfInstallments) ? row.DayOfInstallments : null;

                            myCmd.Parameters.Add("?AggregateAmount", MySqlDbType.Decimal).Value = row.AggregateAmount;
                            myCmd.Parameters.Add("?NextCollectionDate", MySqlDbType.DateTime).Value = !string.IsNullOrWhiteSpace(row.NextCollectionDate) ? row.NextCollectionDate : null;

                            myCmd.Parameters.Add("?ANCreatedDate", MySqlDbType.DateTime).Value = !string.IsNullOrWhiteSpace(row.ANCreatedDate) ? row.ANCreatedDate : null;
                            myCmd.Parameters.Add("?DirectDebitReferenceNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.DirectDebitReferenceNo) ? row.DirectDebitReferenceNo : null;
                            myCmd.Parameters.Add("?DirectDebitAccountNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.DirectDebitAccountNo) ? row.DirectDebitAccountNo : null;

                            myCmd.Parameters.Add("?CurrencySymbol", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.Currency) ? row.Currency : null;
                            myCmd.Parameters.Add("?EnquiryRefNo", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.EnquiryRefNo) ? row.EnquiryRefNo : null;
                            myCmd.Parameters.Add("?Frequency", MySqlDbType.VarChar).Value = !string.IsNullOrWhiteSpace(row.Frequency) ? row.Frequency : null;

                            myCmd.ExecuteNonQuery();
                            appLogger.Info(rowCounter + " RateChangeEnquiriesForKingsline records inserted successfully");
                        }
                        rowCounter++;
                        if (rowCounter % 1000 == 0)
                        {
                            appLogger.Info(rowCounter + " RateChangeEnquiriesForKingsline records inserted successfully");
                        }
                    }
                    catch (Exception e)
                    {
                        appLogger.Error("Error in RateChangeEnquiriesForKingsline for row " + rowCounter + ", RevenueID " + dbObj.RevenueID);
                        appLogger.Error("Error Message - " + e.Message);
                        appLogger.Error("Stack Trace - " + e.StackTrace);
                    }
                }
                if (rowCounter < 1000)
                {
                    appLogger.Info(rowCounter + "RateChangeEnquiriesForKingsline records inserted successfully.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Main - Error in RateChangeEnquiriesForKingsline : " + e.Message);
                appLogger.Error("Main - Error for row " + rowCounter);
                appLogger.Error("Main - Error Message - " + e.Message);
                appLogger.Error("Main - Stack Trace - " + e.StackTrace);
            }
            appLogger.Info("SyncRateChangeEnquiriesForKingsline Sync Ended...");
        }
        public void GetSetGetWhiteMailAdvanceNoticeData(long RecordId)
        {
            appLogger.Info("GetSetGetWhiteMailAdvanceNoticeData Process started...");
            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();


            if (RecordId != 0)
            {
                UpdateANLog(RecordId, "Generate Rate Change CSV", "Start", "Oneview");
            }
            else
            {
                RecordId = UpdateANLog(RecordId, "Generate Rate Change CSV", "Start", "Service");
            }

            try
            {

                DeleteAndArchiveRateChangeEnquiriesForKingsline();
                List<RateChangeEnquiriesForKingsline> rateChangeList = new List<RateChangeEnquiriesForKingsline>();
                List<AdvanceNotice> rows = GetWhiteMailAdvanceNoticeData(); // Orignal revenue data
                List<AdvanceNotice> DistinctRows = new List<AdvanceNotice>(); // assigned to new List to use later
                DistinctRows.AddRange(rows);
                List<AdvanceNotice> DuplicateRecords = rows.GroupBy(i => new { i.BatchNo })
                   .Where(g => g.Count() > 1)
                   .Select(s => s.First()).ToList();
                foreach (AdvanceNotice data in DuplicateRecords)
                {
                    DistinctRows.RemoveAll(x => x.BatchNo == data.BatchNo);// did this to get remaining records which are no duplicated
                }
                foreach (AdvanceNotice SingleRow in DuplicateRecords)
                {
                    if (SingleRow.Status == "Too Late" || SingleRow.Status == "No Action")
                    {
                        continue;// if incident is already is created than skip
                    }
                    rateChangeList.Add(SetWhiteMailAdvanceNoticeData(SingleRow, rows));// create enquiry
                }

                foreach (AdvanceNotice SingleRow in DistinctRows)//create incident for single records
                {
                    if (SingleRow.Status == "Too Late" || SingleRow.Status == "No Action")
                    {
                        continue;// if incident is already is created than skip
                    }
                    rateChangeList.Add(SetWhiteMailAdvanceNoticeData(SingleRow, rows));// create enquiry
                }

                stopwatch.Stop();
                appLogger.Info("Time taken to get RateChangeEnquiriesForKingsline: " + stopwatch.ElapsedMilliseconds);

                if (rateChangeList.Count > 0)
                {
                    SyncRateChangeEnquiriesForKingsline(rateChangeList);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetSetGetWhiteMailAdvanceNoticeData: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }

            if (RecordId != 0)
            {
                UpdateANLog(RecordId, "Generate Rate Change CSV", "End", "Oneview");
            }
            else
            {
                UpdateANLog(RecordId, "Generate Rate Change CSV", "End", "Service");
            }
            appLogger.Info("Create AN Enquiry Process Ended...");

            appLogger.Info("GetSetGetWhiteMailAdvanceNoticeData Process Ended...");
        }
        public RateChangeEnquiriesForKingsline SetWhiteMailAdvanceNoticeData(AdvanceNotice SingleRow, List<AdvanceNotice> rows)
        {
            RateChangeEnquiriesForKingsline rateChange = new RateChangeEnquiriesForKingsline();
            try
            {
                List<AdvanceNotice> SameRecords = rows.Where(i => i.BatchNo == SingleRow.BatchNo).ToList();


                AdvanceNoticeContact contact = CheckEmailValidated(SingleRow.LookupID, false);
                if (contact == null)//Variation Story: Pulling through Group/Organisation IE40
                {

                    OrganisationDetails SupOrgData = GetPrimaryContactIDFromOrgBBID(SingleRow.LookupID);
                    if (SupOrgData != null)
                    {
                        contact = CheckEmailValidated(SupOrgData.PrioritySupporterId.ToString(), true);
                        OrganisationDetails OrgData = GetOrganisations(SupOrgData.OrgId);

                        contact.street1 = !string.IsNullOrEmpty(OrgData.street1) && OrgData.street1 != "Null data" ? OrgData.street1 : "";
                        contact.street2 = !string.IsNullOrEmpty(OrgData.street2) && OrgData.street2 != "Null data" ? OrgData.street2 : "";
                        contact.street3 = !string.IsNullOrEmpty(OrgData.street3) && OrgData.street3 != "Null data" ? OrgData.street3 : "";
                        contact.street4 = !string.IsNullOrEmpty(OrgData.street4) && OrgData.street4 != "Null data" ? OrgData.street4 : "";
                        contact.street5 = !string.IsNullOrEmpty(OrgData.street5) && OrgData.street5 != "Null data" ? OrgData.street5 : "";
                        contact.town = !string.IsNullOrEmpty(OrgData.city) && OrgData.city != "Null data" ? OrgData.city : "";
                        contact.postcode = !string.IsNullOrEmpty(OrgData.postcode) && OrgData.postcode != "Null data" ? OrgData.postcode : "";
                        contact.county = !string.IsNullOrEmpty(OrgData.county) && OrgData.county != "Null data" ? OrgData.county : "";
                        contact.Undeliverable = !string.IsNullOrEmpty(OrgData.undeliverable) ? OrgData.undeliverable : "";
                        contact.POBox = !string.IsNullOrEmpty(OrgData.POBox) && OrgData.POBox != "Null data" ? OrgData.POBox : "";
                        contact.SupporterGroupAddressSalutation = !string.IsNullOrEmpty(SupOrgData.SupporterGroupAddressSalutation) ? SupOrgData.SupporterGroupAddressSalutation : "";

                    }
                }
                string TodaysDate = DateTime.Now.ToString("yyyy-MM-dd");

                string CampaignFormType = "";
                string TemplateType = "";
                if (contact != null)
                {
                    #region postalAddress
                    string postalAddress = "";
                    if (!string.IsNullOrEmpty(contact.SupporterGroupAddressSalutation) && contact.SupporterGroupAddressSalutation != "Null data")
                    {
                        postalAddress += "" + contact.SupporterGroupAddressSalutation + "," + Environment.NewLine;//For OrgCase only
                    }
                    if (!string.IsNullOrWhiteSpace(contact.street1) && contact.street1 != "Null data")
                    {
                        postalAddress += "" + contact.street1.Trim() + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.street2) && contact.street2 != "Null data")
                    {
                        postalAddress += contact.street2 + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.street3) && contact.street3 != "Null data")
                    {
                        postalAddress += contact.street3 + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.street4) && contact.street4 != "Null data")
                    {
                        postalAddress += contact.street4 + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.street5) && contact.street5 != "Null data")
                    {
                        postalAddress += contact.street5 + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.town) && contact.town != "Null data")
                    {
                        postalAddress += contact.town + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.county) && contact.county != "Null data")
                    {
                        postalAddress += contact.county + "," + Environment.NewLine;
                    }
                    if (!string.IsNullOrWhiteSpace(contact.postcode) && contact.postcode != "Null data")
                    {
                        postalAddress += contact.postcode + "," + Environment.NewLine;
                    }

                    postalAddress += "United Kingdom";

                    #endregion



                    if (contact.ContactID != 0)
                    {
                        AdvanceNoticeIncident incidentdata = new AdvanceNoticeIncident();
                        incidentdata.Type = SingleRow.TriggerType;
                        incidentdata.TemplateType = TemplateType;
                        incidentdata.ContactID = contact.ContactID;
                        string paymentDetails = "";
                        List<string> revenueIds = new List<string>();
                        decimal AggregateAmount = 0;
                        List<AdvanceNoticeDonationDetails> DonList = new List<AdvanceNoticeDonationDetails>();
                        foreach (AdvanceNotice advance in SameRecords)
                        {
                            AdvanceNoticeDonationDetails don = new AdvanceNoticeDonationDetails();
                            AggregateAmount += advance.Amount;
                            don.Amount = advance.Amount;
                            don.Designation = advance.Designation;
                            don.PreferredChildName = advance.PreferredChildName;
                            don.RecordId = advance.RecordID;
                            don.Currency = advance.Currency;
                            don.AdvanceNoticeDateSent = advance.AdvanceNoticeDateSent;
                            DonList.Add(don);

                            //Child support (Marie) £28.00

                            //paymentDetails += $"{advance.PreferredChildName},{advance.Designation},{advance.Currency}{advance.Amount},{advance.Frequency},{TodaysDate}{Environment.NewLine}";
                            paymentDetails += $"{advance.Designation} ({advance.PreferredChildName}) {advance.Currency}{advance.Amount} {Environment.NewLine} ";

                            revenueIds.Add(advance.RevenueID);
                        }

                        string TransactionDate = Convert.ToDateTime(SingleRow.CollectionDate).ToString("dd MMMM yyyy");
                        string CollectionDateOrdinal = AddOrdinal(Convert.ToDateTime(SingleRow.CollectionDate).Day);
                        rateChange.AggregateAmount = AggregateAmount.ToString();
                        string AccountNo = SingleRow.DirectDebitAccountNo;

                        rateChange.DirectDebitAccountNo = AccountNo.Substring(AccountNo.Length - 4);
                        rateChange.LetterSalutation = contact.LetterSalutation;
                        rateChange.AddressSalutation = contact.AddressSalutation;
                        rateChange.Address = postalAddress;
                        rateChange.Office = SingleRow.Office;
                        rateChange.PaymentDetails = paymentDetails;
                        rateChange.NextCollectionDate = Convert.ToDateTime(SingleRow.CollectionDate).ToString("yyyy-MM-dd");
                        rateChange.ANCreatedDate = !string.IsNullOrEmpty(SingleRow.EnquiryCreatedTime) ? Convert.ToDateTime(SingleRow.EnquiryCreatedTime).ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd");
                        rateChange.DirectDebitReferenceNo = SingleRow.DirectDebitReferenceNo;
                        rateChange.Currency = SingleRow.Currency;
                        rateChange.EnquiryRefNo = SingleRow.IncidentId;
                        rateChange.PreferredChildName = SingleRow.PreferredChildName;
                        rateChange.Designation = SingleRow.Designation;
                        rateChange.AdvanceNoticeDateSent = TodaysDate;
                        rateChange.RevenueIds = string.Join(",", revenueIds);
                        rateChange.RNID = contact.ContactID.ToString();
                        rateChange.street1 = contact.street1 != "Null data" ? contact.street1 : "";
                        rateChange.street2 = contact.street2 != "Null data" ? contact.street2 : "";
                        rateChange.street3 = contact.street3 != "Null data" ? contact.street3 : "";
                        rateChange.street4 = contact.street4 != "Null data" ? contact.street4 : "";
                        rateChange.street5 = contact.street5 != "Null data" ? contact.street5 : "";

                        rateChange.town = contact.town != "Null data" ? contact.town : "";
                        rateChange.postcode = contact.postcode != "Null data" ? contact.postcode : "";
                        rateChange.county = contact.county != "Null data" ? contact.county : "";
                        rateChange.POBox = contact.POBox != "Null data" ? contact.POBox : "";

                        rateChange.Frequency = SingleRow.Frequency;
                        rateChange.DayOfInstallments = CollectionDateOrdinal;
                        rateChange.Currency = SingleRow.Currency;
                        rateChange.Segment = SameRecords.Count() <= 20 ? "segment1" : "segment2";
                        rateChange.PaymentDetailsRowCount = SameRecords.Count();

                    }
                    else
                    {
                        appLogger.Info("Incident not created as contact id not found with lookupid" + SingleRow.LookupID);
                    }
                }
                else
                {
                    appLogger.Info("Contact records not found in RN for lookupid: " + SingleRow.LookupID);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in SetWhiteMailAdvanceNoticeData" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return rateChange;
        }
        public void InsertRateChangeEnquiriesForKingslineRecord(RateChangeEnquiriesForKingsline rc)
        {
            try
            {
                string Query = $"INSERT INTO `RateChangeEnquiriesForKingsline`(`AddressSalutation`, `LetterSalutation`, `Address`, `PaymentDetails`, `AdvanceNoticeSentDate`, `AggregateAmount`, `NextCollectionDate`, `DirectDebitReferenceNo`, `DirectDebitAccountNo`, `Designation`, `PreferredChildName`, `Office`, `CurrencySymbol`, `EnquiryRefNo`) VALUES ('{rc.AddressSalutation}','{rc.LetterSalutation}','{rc.Address}','{rc.PaymentDetails}','{rc.AdvanceNoticeDateSent}',{rc.AggregateAmount},'{rc.NextCollectionDate}','{rc.DirectDebitReferenceNo}','{rc.DirectDebitAccountNo}','{rc.Designation}','{rc.PreferredChildName}','{rc.Office}','{rc.Currency}','{rc.EnquiryRefNo}')";

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in InsertRateChangeEnquiriesForKingslineRecord: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void DeleteAndArchiveRateChangeEnquiriesForKingsline()
        {
            try
            {

                string ArchiveQuery = "INSERT INTO RateChangeEnquiriesForKingslineArchieve SELECT * FROM RateChangeEnquiriesForKingsline;";

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(ArchiveQuery, conn);
                    cmd.ExecuteNonQuery();
                }






                string TruncateQuery = "truncate table RateChangeEnquiriesForKingsline";

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(TruncateQuery, conn);
                    cmd.ExecuteNonQuery();
                }



            }
            catch (Exception e)
            {
                appLogger.Error("Error in DeleteArchiveRateChangeEnquiriesForKingsline: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void ResolveRateChangeEnquiries(long RecordId)
        {
            try
            {

                appLogger.Info("ResolveRateChangeEnquiries Process started...");
                if (RecordId != 0)
                {
                    UpdateANLog(RecordId, "Resolve Rate Change Enquiries", "Start", "Oneview");
                }
                else
                {
                    RecordId = UpdateANLog(RecordId, "Resolve Rate Change Enquiries", "Start", "Service");
                }


                appLogger.Info("Resolving enquiry started.....");

                List<string> EnqRefIds = GetRateChangeEnqRef();
                appLogger.Info($"Total EnqRefIds {EnqRefIds.Count} found to update incident status from DB");
                if (EnqRefIds.Count() > 0)
                {
                    List<long> IncidentIds = GetIncidentIdsFromEnqRef(EnqRefIds);
                    appLogger.Info($"Total IncidentIds {IncidentIds.Count} found to update incident status from RN");
                    if (IncidentIds.Count() > 0)
                    {
                        foreach (long incidentId in IncidentIds)
                        {
                            UpdateRateChangeIncident(incidentId);
                        }
                    }
                    else
                    {
                        appLogger.Info("IncidentId found to update status.");
                    }
                }
                appLogger.Info("Resolving enquiry ended.....");

                appLogger.Info("Adding Rate Change Advance Notice Sent attribute in BB started...");

                List<AdvanceNotice> rows = GetWhiteMailAdvanceNoticeData();

                foreach (AdvanceNotice row in rows)
                {
                    addRateChangeAttribute("Rate Change Advance Notice Sent", row.RevenueID);
                }

                appLogger.Info("Adding Rate Change Advance Notice Sent attribute in BB ended...");

                if (RecordId != 0)
                {
                    UpdateANLog(RecordId, "Resolve Rate Change Enquiries", "End", "Oneview");
                }
                else
                {
                    UpdateANLog(RecordId, "Resolve Rate Change Enquiries", "End", "Service");
                }
                appLogger.Info("Create AN Enquiry Process Ended...");

            }
            catch (Exception e)
            {
                appLogger.Error("Error in ResolveRateChangeEnquiries: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public List<string> GetRateChangeEnqRef()
        {
            List<string> EnquiryRefIds = new List<string>();
            try
            {
                string Query = "SELECT EnquiryRefNo FROM RateChangeEnquiriesForKingsline group by EnquiryRefNo";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(Query, conn);
                    MySqlDataReader reader = cmd.ExecuteReader();

                    while (reader.Read())
                    {
                        EnquiryRefIds.Add(reader["EnquiryRefNo"].ToString());
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetRateChangeEnqRef: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return EnquiryRefIds;
        }
        public List<long> GetIncidentIdsFromEnqRef(List<string> EnqRefIds)
        {
            List<long> IncidentIds = new List<long>();
            try
            {

                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Incident details";
                string query = "SELECT ID FROM Incident WHERE Incident.lookupName IN ('" + string.Join("','", EnqRefIds) + "');";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string incidentId in result.CSVTables[0].Rows)
                        {
                            IncidentIds.Add(Convert.ToInt64(incidentId));
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetIncidentIdsFromEnqRef: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return IncidentIds;
        }
        public bool addRateChangeAttribute(string attributeName, string revenueId)
        {
            appLogger.Info($"Adding {attributeName} attribute for RevenueId {revenueId} in BB.");
            bool IsSuccess = false;
            try
            {
                SearchListLoadReply revenueDetails = fetchRevenueRecordFromRevenueLookupID(revenueId);
                if (revenueDetails != null && revenueDetails.Output.RowCount > 0)
                {
                    string revenueRecordGUID = revenueDetails.Output.Rows[0].Values[0];
                    DeleteRateChangeAttribute(revenueRecordGUID, attributeName);

                    try
                    {
                        Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.RevenueAttribute.RevenueAttributeAddFormData attrData = new Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.AddForms.RevenueAttribute.RevenueAttributeAddFormData();
                        attrData.ATTRIBUTECATEGORYID = new Guid("124e76bf-a76d-4eae-bc43-df885e444a45");//Rate Change Advance Notice Sent - d62d4a46-ee5f-41a0-8e6b-00ff959138fa
                        attrData.ContextRecordID = revenueRecordGUID; // Revenue record GUID
                        attrData.DATEVALUE = Convert.ToDateTime(DateTime.Now);


                        attrData.Save(provider());
                        IsSuccess = true;
                        appLogger.Info("Rate change attribute " + attributeName + " added in BB at " + DateTime.Now);
                    }
                    catch (Exception e)
                    {
                        if (e.Message.Contains("The request failed with HTTP status 502: Bad Gateway"))
                        {
                            appLogger.Info("Retrying...");
                            return addRateChangeAttribute(attributeName, revenueId);
                        }
                        else
                        {
                            appLogger.Error("Error in addAttribute: " + attributeName + " : " + e.Message);
                            appLogger.Error(e.InnerException);
                            appLogger.Error(e.StackTrace);
                        }


                    }

                }
                else
                {
                    appLogger.Info("No revenue record found with given revenueId: " + revenueId);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in addRateChangeAttribute: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return IsSuccess;
        }
        public void UpdateRateChangeIncident(long IncidentId)
        {
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                    StatusWithType = new StatusWithType
                    {
                        Status = new NamedID
                        {
                            ID = new ID
                            {
                                id = 107,//107 - Resolved (Automated)
                                idSpecified = true
                            }
                        }
                    },
                };


                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });
                appLogger.Info("RateChange incident status updated successfully with incidentid: " + IncidentId);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in UpdateRateChangeIncident:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public bool DeleteRateChangeAttribute(string recordId, string attributeName)
        {
            appLogger.Info("DeleteAttributes started with DeleteAttributes: " + attributeName);
            bool success = false;
            string[] bbAttributes = null;
            try
            {
                var attributeListRows = GetRevenueAttributeList(recordId);
                if (attributeListRows != null && attributeListRows.Length > 0)
                {

                    var bbObj = attributeListRows.Where(i => i.CATEGORY == attributeName).FirstOrDefault();
                    if (bbObj != null)
                    {
                        string attrRecordId = bbObj.ATTRIBUTECATEGORYID + "_" + bbObj.ID;
                        Blackbaud.AppFx.Fundraising.Catalog.WebApiClient.RecordOperations.RevenueAttribute.RevenueAttributeDelete.ExecuteOperation(provider(), attrRecordId);
                        success = true;
                        appLogger.Info(bbObj.VALUE + " BB Attribute Deleted.");
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in DeleteAttributes: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return success;
        }
        public RevenueAttributeListRow[] GetRevenueAttributeList(string recordId)
        {
            try
            {
                DataListLoadRequest req = new DataListLoadRequest();
                req.ClientAppInfo = GetRequestHeader();
                req.DataListID = new Guid("b5b669f3-4d7b-4cdb-b3b1-7cb650511786");//Data List: Revenue Attribute List

                req.ContextRecordID = recordId;
                RevenueAttributeListRow[] rows = retryPolicy.Execute(() => RevenueAttributeList.GetRows(provider(), req));
                return rows;
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetRevenueAttributeList:" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
                return null;
            }
        }
        public SearchListLoadReply fetchRevenueRecordFromRevenueLookupID(string revenueLookupID)
        {
            SearchListLoadReply response = new SearchListLoadReply();
            try
            {
                var searchreq = new SearchListLoadRequest();

                searchreq.ClientAppInfo = GetRequestHeader();
                searchreq.SearchListID = new Guid("78e403c2-f4d6-482e-a9f4-f53c5b3c8740");
                searchreq.ReturnSearchFilters = true;
                searchreq.MaxRecords = 500;

                var fvSet = new DataFormFieldValueSet();
                fvSet.Add("REVENUELOOKUPID", revenueLookupID);

                var dfi = new DataFormItem();
                dfi.Values = fvSet;
                searchreq.Filter = dfi;
                response = retryPolicy.Execute(() => _service.SearchListLoad(searchreq));
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetchRevenueRecordFromRevenueLookupID : " + revenueLookupID + " : " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
            return response;
        }

        #endregion
        public List<DataListResultRow> fetchRecurringGiftsNew(string constituentId)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                if (!string.IsNullOrWhiteSpace(constituentId))
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    request.DataListID = new Guid("91f59ee7-98e6-44b3-a053-bd0842bb4292");   // GUID for Data List: Recurring gifts - sponsorship                    
                    request.ContextRecordID = constituentId;
                    request.IncludeMetaData = true;
                    var result = _service.DataListLoad(request);
                    if (result.TotalRowsInReply > 0)
                    {
                        //foreach (var res in result.Rows)
                        //{
                        for (int i = 0; i < result.TotalRowsInReply; i++)
                        {
                            var res = result.Rows[i];

                            responseList.Add(res);
                        }
                        //}
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching recurring gifts for Sponsorship Cancel screen : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }

        public List<DataListResultRow> fetchOtherRecurringTest(string constituentId)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {

                //var constituentDetails = GetConstituentOnCommitmentID(CommitmentID);
                if (!string.IsNullOrWhiteSpace(constituentId))
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    request.DataListID = new Guid("573dbbaf-5bf0-4808-bc6b-37fc4c1eb7b7");// GUID for Data List: Other Recurring gifts - Linked                    
                    request.ContextRecordID = constituentId;
                    request.IncludeMetaData = true;
                    var result = _service.DataListLoad(request);

                    if (result.TotalRowsInReply > 0)
                    {
                        foreach (var res in result.Rows)
                        {
                            responseList.Add(res);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching other recurring gifts for Sponsorship Cancel screen  : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }


        public List<DataListResultRow> fetchRecurringGiftsForReassignSponsorshipnew(string constituentId)
        {
            //14 - DDI source
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                DataListLoadRequest request = new DataListLoadRequest();
                request.ClientAppInfo = GetRequestHeader();
                request.DataListID = new Guid("0be1b11f-854a-45b1-b90b-bc7947d17f17");   // Data List: Bacs Recurring gifts - sponsorship
                request.ContextRecordID = constituentId;
                request.IncludeMetaData = true;
                var result = _service.DataListLoad(request);

                if (result.TotalRowsInReply > 0)
                {

                    foreach (var res in result.Rows)
                    {
                        responseList.Add(res);
                    }
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching sponsorship recurring gifts for constituent for reassign Sponsorship : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }

        public List<DataListResultRow> fetchRecurringGiftsTest(string constituentLookupID)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            string childKeyOtherFormat = constituentLookupID;
            if (constituentLookupID.Length > 9)
            {
                childKeyOtherFormat = constituentLookupID.Remove(6, 1).Remove(2, 1);
            }
            else if (constituentLookupID.Length == 9)
            {
                childKeyOtherFormat = constituentLookupID.Insert(5, "0").Insert(2, "0");
            }
            try
            {

                var constituentDetails = GetConstituentOnLookupID(constituentLookupID);
                if (constituentDetails.Output.RowCount > 0)
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    foreach (ListOutputRow row in constituentDetails.Output.Rows)
                    {
                        // GUID for Data List: Recurring gifts - sponsorship
                        request.DataListID = new Guid("91f59ee7-98e6-44b3-a053-bd0842bb4292");
                        request.ContextRecordID = row.Values[0];
                        request.IncludeMetaData = true;
                        var result = _service.DataListLoad(request);

                        if (result.TotalRowsInReply > 0)
                        {
                            foreach (var res in result.Rows)
                            {
                                responseList.Add(res);
                            }
                        }
                    }

                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching recurring gifts for constituent : " + constituentLookupID + " : " + e.Message);
            }
            return responseList;
        }

        public string fetchNeed()
        {
            string BirthDate = "";
            // ClientInfoHeader
            ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            clientInfoHeader.AppID = "Fetch  Need record from RN";

            string queryString = "SELECT SCBS_CHILD.Need FROM SCBS_CHILD.Need Where SCBS_CHILD.Need.Beneficiary_GlobalID = '06101305'";

            // Create Object
            GenericObject genericObj = new GenericObject();
            RNObjectType objtype = new RNObjectType();
            objtype.TypeName = "Need";
            objtype.Namespace = "SCBS_CHILD";
            genericObj.ObjectType = objtype;

            RNObject[] objectTemplates = new RNObject[] { genericObj };

            QueryResultData[] queryObjects = null;
            head = rightNowSyncPortClient.QueryObjects(clientInfoHeader,api, queryString, objectTemplates, 1000000,out queryObjects);

            RNObject[] rnObject = queryObjects[0].RNObjectsResult;

            if (rnObject.Length > 0)
            {
                foreach (QueryResultData queryResultData in queryObjects)
                {
                    foreach (GenericObject genericObject in queryResultData.RNObjectsResult)
                    {
                        foreach (GenericField genericField in genericObject.GenericFields)
                        {
                            //Console.WriteLine(genericField.name);
                            if (genericField.DataValue != null)
                            {
                                foreach (object obj in genericField.DataValue.Items)
                                {
                                    switch (genericField.name)
                                    {
                                        case "BirthDate":
                                            BirthDate = fetchchilddata(genericField);
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            string NewBirthday = "2000-11-20 00:00:00";


            DateTime oldBirthDate = DateTime.Parse(BirthDate);
            DateTime newBirthdayDate = DateTime.Parse(NewBirthday);

            if (oldBirthDate == newBirthdayDate)
            {

            }


            if (NewBirthday == BirthDate)
            {

            }


            return BirthDate;
        }

        #region Functions is linked with ESB
        public string GetLookupIdOnSupporterId(long contactId)
        {
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get Supporter";
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

            string Query = "Select contact from contact where ID =" + contactId + ""; //13500
            //string Query = "Select contact from contact where Contact.Login = 'tim_hathaway' OR ID ='57958'";

            Contact contactTemplate = new Contact();
            contactTemplate.CustomFields = new GenericObject() { };
            contactTemplate.Notes = new Note[] { };

            RNObject[] objectTemplates = new RNObject[] { contactTemplate };

            QueryResultData[] results;
            head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out results);
            if (results[0].RNObjectsResult.Length == 0)
            {
                return null;
            }
            Contact contact = (Contact)results[0].RNObjectsResult[0];
            //Console.WriteLine("ID : " + contact.ID.id);

            string lookupID = null;

            foreach (GenericField fetchchildfields in ((GenericObject)(contact.CustomFields.GenericFields[3].DataValue.Items[0])).GenericFields)
            {
                switch (fetchchildfields.name)
                {
                    case "blackbaudid":
                        lookupID = fetchchilddata(fetchchildfields);
                        break;
                }
            }

            return lookupID;
        }

        #endregion

        #region IE180: Processing Non-Sponsor Donations: Matching Donations to existing sponsors
        public string GetCurrentGiftAidBatchId()
        {
            string BatchID = null;
            BatchSearchFilterData filter = new BatchSearchFilterData();
            filter.DESCRIPTION = Convert.ToString($"Gift Aid Batch : {DateTime.Now.ToString("dd-MM-yyyy")}");

            filter.STATUSCODE_IDVALUE = Blackbaud.AppFx.Platform.Catalog.WebApiClient.SearchLists.Batch.BatchSearchEnums.STATUSCODE.Uncommitted;
            string[] row = BatchSearch.GetIDs(provider(), filter);

            if (row.Length > 0)
            {
                BatchID = row[0];
            }

            return BatchID;
        }

        public void ProcessGiftAidBatchRows(string BatchID)
        {
            BatchLoadReply loadReply = new BatchLoadReply();
            BatchLoadRequest loadreq = new BatchLoadRequest();
            loadreq.ClientAppInfo = GetRequestHeader();
            loadreq.BatchID = new Guid(BatchID);

            // loadReply = retryPolicy.Execute(() => _service.BatchLoad(loadreq));
            loadReply = _service.BatchLoad(loadreq);

            List<string> rowIds = new List<string>();

            if (loadReply.Rows.Length > 0)
            {
                foreach (BatchDataRow row in loadReply.Rows)
                {
                    DataFormFieldValueSet rowData = row.DataFormItem.Values;
                    AddTaxDeclaration(rowData);
                }
            }
        }

        public string AddTaxDeclaration(DataFormFieldValueSet rowData)
        {
            TaxDeclarationAddForm2Data declobj = new TaxDeclarationAddForm2Data();

            // CHARITYCLAIMREFERENCENUMBERID
            declobj.CHARITYCLAIMREFERENCENUMBERID = (Guid)rowData["CHARITYCLAIMREFERENCENUMBERID"].Value; //XR35745

            // DECLARATIONMADE
            if (rowData["DECLARATIONMADE"].Value != null)
                declobj.DECLARATIONMADE = (DateTime)rowData["DECLARATIONMADE"].Value;
            else
                declobj.DECLARATIONMADE = DateTime.Now;

            // DECLARATIONSTARTS
            if (rowData["DECLARATIONSTARTS"].Value != null)
                declobj.DECLARATIONSTARTS = (DateTime)rowData["DECLARATIONSTARTS"].Value;
            else
                declobj.DECLARATIONSTARTS = new DateTime(2011, 7, 1);

            // DECLARATIONINDICATORCODE
            //declobj.DECLARATIONINDICATORCODE_IDVALUE = Blackbaud.AppFx.GiftAid.Catalog.WebApiClient.AddForms.GiftAid.TaxDeclarationAddForm2Enums.DECLARATIONINDICATORCODE.Internet;
            declobj.DECLARATIONINDICATORCODE_IDVALUE = (Blackbaud.AppFx.GiftAid.Catalog.WebApiClient.AddForms.GiftAid.TaxDeclarationAddForm2Enums.DECLARATIONINDICATORCODE)Enum.Parse(typeof(Blackbaud.AppFx.GiftAid.Catalog.WebApiClient.AddForms.GiftAid.TaxDeclarationAddForm2Enums.DECLARATIONINDICATORCODE), (string)rowData["DECLARATIONINDICATORCODE"].Value);

            //declobj.SCANNEDDOCSEXIST = scannedDocExists; // ???

            // "PAYSTAXCODE"
            declobj.PAYSTAXCODE_IDVALUE = (Blackbaud.AppFx.GiftAid.Catalog.WebApiClient.AddForms.GiftAid.TaxDeclarationAddForm2Enums.PAYSTAXCODE)rowData["PAYSTAXCODE"].Value;
            //declobj.TAXSTATUSCODEID = GetIdForCodeTableValue("TAXSTATUSCODE", "Never"); // ???

            // DECLARATIONSOURCECODEID
            if (rowData["DECLARATIONSOURCECODEID"].Value != null)
                declobj.DECLARATIONSOURCECODEID = (Guid)rowData["DECLARATIONSOURCECODEID"].Value;

            if ((rowData["COMMENTS"].Value != null))
                declobj.COMMENTS = (string)rowData["COMMENTS"].Value;


            // CONSTITUENTLOOKUPID
            declobj.ContextRecordID = (string)rowData["CONSTITUENTLOOKUPID"].Value;

            string res = declobj.Save(provider());

            // GA Automation
            Blackbaud.AppFx.XmlTypes.DataForms.DataFormItem DataFormItem = new DataFormItem();

            DataFormSaveRequest savereq = new DataFormSaveRequest();
            savereq.ClientAppInfo = GetRequestHeader();
            savereq.FormID = Guid.Parse("39d51e72-ac25-4b40-9887-8bde86402114");
            savereq.ID = res.ToString();

            /*if (!string.IsNullOrWhiteSpace(galocation))
                DataFormItem.Values.Add("GIFTAIDDECLARATIONLOCATION", galocation, null); // ??? */

            // COMMENTS
            if ((rowData["COMMENTS"].Value != null))
                DataFormItem.Values.Add("SUPPORTERENQUIRYREFERENCE", rowData["COMMENTS"].Value, null);

            savereq.DataFormItem = DataFormItem;
            DataFormSaveReply saveReply = provider().Service.DataFormSave(savereq);
            return res;
        }

        public void ProcessGiftAidBatch()
        {
            try
            {
                string currentBatchId = GetCurrentGiftAidBatchId();
                ProcessGiftAidBatchRows(currentBatchId);
            }
            catch (Exception e)
            {
                appLogger.Error($"Error in ProcessGiftAidBatch : {e.Message}");
                appLogger.Error(e.StackTrace);
            }
        }
        #endregion

        #region IE154 - Processing Non-Sponsor Donations: Matching Donations to existing sponsors 

        public void transferSupporterDetails(long recordId)
        {
            appLogger.Info($"transferSupporterDetails request received for NonDonationSponsor record {recordId}");
            try
            {
                NonSponsorDonationsModel nModel = getNonDonationSponsorDetails(recordId);
                if (nModel.SupporterID != 0 && nModel.NewSupporterID != 0)
                {

                    // Transfer constituent in BB Batch
                    string NewlookupId = GetlookupidfromSupporterid(nModel.NewSupporterID);
                    if (!string.IsNullOrEmpty(NewlookupId))
                    {
                        TransferConstituentInBatchModel tObj = new TransferConstituentInBatchModel();
                        tObj.NewLookupId = NewlookupId;
                        tObj.OldLookupId = nModel.BlackbaudID;
                        tObj.BatchName = nModel.BatchName;
                        TransferConstituentInBatch(tObj);
                    }
                    else
                    {
                        appLogger.Info($"No lookupId found to Transfer of constituent in BB batch with SupporterId {nModel.NewSupporterID}");
                    }


                    List<long> IncidentIds = fetchAllIncidentLinkedToSupporter(nModel.SupporterID);

                    if (IncidentIds.Count > 0)
                    {
                        appLogger.Info($"Total {IncidentIds.Count} records found to transfer incident");
                        foreach (long incidentId in IncidentIds)
                        {
                            TransferIncidentToNewSupporter(incidentId, nModel.NewSupporterID);
                        }
                    }
                    else
                    {
                        appLogger.Info("No incident record found to transfer.");
                    }

                    List<long> DonationIds = fetchAllDonationsLinkedToSupporter(nModel.SupporterID);

                    if (DonationIds.Count > 0)
                    {
                        appLogger.Info($"Total {DonationIds.Count} records found to transfer donation");
                        foreach (long donationId in DonationIds)
                        {
                            TransferDonationToNewSupporter(donationId, nModel.NewSupporterID);
                        }
                    }
                    else
                    {
                        appLogger.Info("No donation record found to transfer.");
                    }

                    setSupporterStatusInactiveInRN(nModel.SupporterID);
                    if (!string.IsNullOrEmpty(nModel.BlackbaudID))
                    {
                        makeConstituentInactiveInBB(nModel.BlackbaudID);
                    }
                    else
                    {
                        appLogger.Info("No constituent record found to inactive in BB.");
                    }

                    UpdateNonSponsorDonationsDBFields(recordId, "ItemDeleted", "NOW()");

                }
                else
                {
                    appLogger.Info($"Unable to transferSupporterDetails due to SupporterId or NewSupporterId is blank for recordId: {recordId}");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in transferSupporterDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }


        public NonSponsorDonationsModel getNonDonationSponsorDetails(long recordId)
        {
            NonSponsorDonationsModel nModel = new NonSponsorDonationsModel();
            try
            {

                string query = $"SELECT * FROM NonSponsorDonations WHERE ID={recordId}";
                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand cmd = new MySqlCommand(query, conn);
                    MySqlDataReader reader = cmd.ExecuteReader();
                    if (reader.Read())
                    {
                        nModel.SupporterID = reader["SupporterID"] != null ? Convert.ToInt64(reader["SupporterID"]) : 0;
                        nModel.NewSupporterID = reader["NewSupporterID"] != null ? Convert.ToInt64(reader["NewSupporterID"]) : 0;
                        nModel.BlackbaudID = reader["BlackbaudID"] != null ? reader["BlackbaudID"].ToString() : "";
                        nModel.BatchId = reader["BatchID"] != null ? reader["BatchID"].ToString() : "";
                        nModel.BatchName = reader["BatchName"] != null ? reader["BatchName"].ToString() : "";
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getNonDonationSponsorDetails: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return nModel;
        }
        public void TransferDonationToNewSupporter(long DonationId, long NewSupporterId)
        {
            appLogger.Info($"TransferDonationToNewSupporter request received with DonationId {DonationId} and SupporterId {NewSupporterId}");
            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Updating donation supporter";

                GenericObject genericObject = new GenericObject();
                RNObjectType objType = new RNObjectType();
                objType.TypeName = "Donation";
                objType.Namespace = "SCBS_DON";
                genericObject.ObjectType = objType;

                UpdateProcessingOptions options = new UpdateProcessingOptions();
                options.SuppressExternalEvents = false;
                options.SuppressRules = false;

                ID objID = new ID();
                objID.id = DonationId;
                objID.idSpecified = true;

                genericObject.ID = objID;

                List<GenericField> genFieldsList = new List<GenericField>();
                GenericField SupporterGenericField = null;



                if (NewSupporterId != 0)
                {
                    SupporterGenericField = createGenericfield("Supporter", createNamedIdDataValue(NewSupporterId), DataTypeEnum.NAMED_ID);
                    genFieldsList.Add(SupporterGenericField);
                }

                genericObject.GenericFields = genFieldsList.ToArray();
                RNObject[] createObjects = new RNObject[] { genericObject };

                rightNowSyncPortClient.Update(clientInfoHeader, api, createObjects, options);
                appLogger.Info($"Donation {DonationId} successfully transfered to new supporter {NewSupporterId}");

            }
            catch (Exception e)
            {
                appLogger.Error("Error in TransferDonationToNewSupporter: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public void TransferIncidentToNewSupporter(long IncidentId, long NewSupporterId)
        {
            appLogger.Info($"TransferIncidentToNewSupporter request received with IncidentId {IncidentId} and SupporterId {NewSupporterId}");
            try
            {
                Incident incident = new Incident
                {
                    ID = new ID
                    {
                        id = IncidentId,
                        idSpecified = true
                    },
                    PrimaryContact = new IncidentContact
                    {
                        Contact = new NamedID
                        {
                            ID = new ID
                            {
                                id = NewSupporterId,
                                idSpecified = true
                            }
                        }
                    },
                };


                /*GenericField SetupStatusGenericField = null;
                SetupStatusGenericField = createGenericfield("setupstatus", createNamedIdDataValue(1661), DataTypeEnum.NAMED_ID);//Held

                GenericObject genericObject = new GenericObject();
                genericObject.GenericFields = new GenericField[] { SetupStatusGenericField };
                genericObject.ObjectType = new RNObjectType() { TypeName = "CustomIncident" };

                GenericField customFieldsPackage = new GenericField();
                customFieldsPackage.name = "c";
                customFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
                customFieldsPackage.dataTypeSpecified = true;
                customFieldsPackage.DataValue = new DataValue();
                customFieldsPackage.DataValue.Items = new[] { genericObject };
                customFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

                incident.CustomFields = new GenericObject();
                incident.CustomFields.GenericFields = new GenericField[1];
                incident.CustomFields.GenericFields[0] = customFieldsPackage;
                incident.CustomFields.ObjectType = new RNObjectType();
                incident.CustomFields.ObjectType.TypeName = "IncidentCustomFields";*/

                RNObject[] createContact = new RNObject[] { incident };
                rightNowSyncPortClient.Update(new ClientInfoHeader { AppID = "Update incident" }, api, new RNObject[] { incident },
                new UpdateProcessingOptions { SuppressExternalEvents = false, SuppressRules = false });

                appLogger.Info($"Incident {IncidentId} successfully transfered to new supporter {NewSupporterId}");
            }
            catch (Exception e)
            {
                appLogger.Error("Error in TransferIncidentToNewSupporter: " + e.Message);
                appLogger.Error(e.InnerException);
                appLogger.Error(e.StackTrace);
            }
        }
        public List<long> fetchAllDonationsLinkedToSupporter(long SupporterId)
        {
            List<long> listresobj = new List<long>();
            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Delete Donation Fields";
                String queryString;
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                queryString = "SELECT SCBS_DON.Donation FROM SCBS_DON.Donation Where SCBS_DON.Donation.Supporter=" + SupporterId;

                GenericObject genericObj = new GenericObject();
                RNObjectType objtype = new RNObjectType();
                objtype.TypeName = "Donation";
                objtype.Namespace = "SCBS_DON";
                genericObj.ObjectType = objtype;
                RNObject[] objectTemplates = new RNObject[] { genericObj };
                QueryResultData[] queryObjects;
                head = rightNowSyncPortClient.QueryObjects(clientInfoHeader, api, queryString, objectTemplates, 1000000, out queryObjects);
                RNObject[] rnObject = queryObjects[0].RNObjectsResult;
                if (rnObject.Length > 0)
                {
                    for (int k = 0; k < rnObject.Length; k++)
                    {
                        listresobj.Add(rnObject[k].ID.id);
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetchAllDonationsLinkedToSupporter: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return listresobj;
        }
        public List<long> fetchAllIncidentLinkedToSupporter(long SupporterId)
        {
            List<long> listresobj = new List<long>();
            APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
            ClientInfoHeader info = new ClientInfoHeader();
            info.AppID = "Get Incident Data";

            string Query = "SELECT Incident FROM Incident WHERE Incident.PrimaryContact.Contact.ID = " + SupporterId + " limit 10000";
            Incident contactTemplate = new Incident();
            contactTemplate.PrimaryContact = new IncidentContact();

            RNObject[] objectTemplates = new RNObject[] { contactTemplate };
            try
            {
                QueryResultData[] queryObjects = null;
                head = rightNowSyncPortClient.QueryObjects(info, api, Query, objectTemplates, 10000, out queryObjects);
                RNObject[] rnObjects = queryObjects[0].RNObjectsResult;

                if (rnObjects != null && rnObjects.Length > 0)
                {
                    foreach (QueryResultData queryResultData in queryObjects)
                    {
                        foreach (RNObject data in queryResultData.RNObjectsResult)
                        {
                            Incident incidentTemp = (Incident)data;
                            listresobj.Add(incidentTemp.ID.id);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetchAllIncidentLinkedToSupporter: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return listresobj;
        }



        public void setSupporterStatusInactiveInRN(long RNID)
        {
            UpdateProcessingOptions options = new UpdateProcessingOptions();
            options.SuppressExternalEvents = false;
            options.SuppressRules = false;

            Contact updateContact = new Contact();

            ID contactID = new ID();
            contactID.id = RNID;

            updateContact.ID = contactID;
            updateContact.ID.idSpecified = true;

            GenericField statusGenericField = null;

            statusGenericField = createGenericfield("status", createNamedIdDataValue(394), DataTypeEnum.NAMED_ID);//tst1 - 394 Inactive (Duplicate)

            GenericObject updateGenericObject = new GenericObject();
            updateGenericObject.GenericFields = new GenericField[] { statusGenericField };
            updateGenericObject.ObjectType = new RNObjectType() { TypeName = "CustomContacts" };

            GenericField updateCustomFieldsPackage = new GenericField();
            updateCustomFieldsPackage.name = "c";
            updateCustomFieldsPackage.dataType = DataTypeEnum.NAMED_ID;
            updateCustomFieldsPackage.dataTypeSpecified = true;
            updateCustomFieldsPackage.DataValue = new DataValue();
            updateCustomFieldsPackage.DataValue.Items = new[] { updateGenericObject };
            updateCustomFieldsPackage.DataValue.ItemsElementName = new[] { ItemsChoiceType.ObjectValue };

            updateContact.CustomFields = new GenericObject();
            updateContact.CustomFields.GenericFields = new GenericField[1];
            updateContact.CustomFields.GenericFields[0] = updateCustomFieldsPackage;
            updateContact.CustomFields.ObjectType = new RNObjectType();
            updateContact.CustomFields.ObjectType.TypeName = "ContactCustomFields";

            ClientInfoHeader updateClientInfoHeader = new ClientInfoHeader();
            updateClientInfoHeader.AppID = "Supporter Update";

            RNObject[] updateObject = new RNObject[] { updateContact };
            try
            {
                rightNowSyncPortClient.Update(updateClientInfoHeader, api, updateObject, options);
                appLogger.Info($"Supporter {RNID} status succesfully set inactive in RN.");

            }
            catch (Exception e)
            {
                appLogger.Error("Error in setSupporterStatusInactive: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

        }


        public void makeConstituentInactiveInBB(string BBID)
        {
            try
            {
                var constituentDetails = GetConstituentOnLookupID(BBID);
                Blackbaud.AppFx.Constituent.Catalog.WebApiClient.EditForms.Constituent.ConstituentInactiveDetailEditDataFormData conData = new ConstituentInactiveDetailEditDataFormData();
                conData.RecordID = constituentDetails.Output.Rows[0].Values[0];

                /*
                
                        "labelDisplayText": "394 - Inactive (Duplicate)",
                        "name": "CONSTITUENTINACTIVITYREASONCODEID",
                        "value": "d8d549f7-b452-494e-819b-6770965d9d24",

                 */

                conData.CONSTITUENTINACTIVITYREASONCODEID = new Guid("d8d549f7-b452-494e-819b-6770965d9d24");
                conData.DETAILS = " ";
                conData.Save(provider());
                appLogger.Info("Constituent with lookup " + BBID + " made inactive successfully at " + DateTime.Now);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in makeConstituentInactiveInBB with lookup " + BBID + "" + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }


        }
        public void UpdateNonSponsorDonationsDBFields(long dbRecordId, string dbFieldName, string value)
        {
            try
            {
                string updateFields = dbFieldName == "SupporterID" ? $"{dbFieldName} = {value}" : $"{dbFieldName} = '{value}'";
                string query = $"UPDATE NonSponsorDonations SET {updateFields} WHERE ID={dbRecordId}";

                using (MySqlConnection conn = new MySqlConnection(mycuk_tcpt4ConnectionString))
                {
                    conn.Open();
                    MySqlCommand insertCommand = new MySqlCommand(query, conn);
                    MySqlDataReader dataReader;
                    dataReader = insertCommand.ExecuteReader();
                    appLogger.Info($"NonSponsorDonations record field {dbFieldName} updated with value {value} for {dbRecordId} updated in DB");
                }
            }
            catch (Exception e)
            {
                appLogger.Error($"Error in UpdateNonSponsorDonationsConstituentIds : {e.Message}");
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }


        public void TransferConstituentInBatch(TransferConstituentInBatchModel Obj)
        {
            try
            {
                if (!string.IsNullOrEmpty(Obj.BatchName) && !string.IsNullOrEmpty(Obj.NewLookupId) && !string.IsNullOrEmpty(Obj.OldLookupId))
                {
                    EditBatchNonSponsorDonation(Obj);
                }
                else
                {
                    appLogger.Info("BatchName,NewLookupId and OldLookupId connot be empty.");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in TransferConstituentInBatch: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }


        public void EditBatchNonSponsorDonation(TransferConstituentInBatchModel Obj)
        {

            string BatchID = null;
            BatchSearchFilterData filter = new BatchSearchFilterData();
            filter.DESCRIPTION = Convert.ToString(Obj.BatchName);

            filter.STATUSCODE_IDVALUE = Blackbaud.AppFx.Platform.Catalog.WebApiClient.SearchLists.Batch.BatchSearchEnums.STATUSCODE.Uncommitted;
            string[] row = BatchSearch.GetIDs(provider(), filter);

            if (row.Length > 0)
            {
                BatchID = row[0];
            }
            if (!string.IsNullOrEmpty(BatchID))
            {
                EditRowToNonSponsorDonation(new Guid(BatchID), Obj);
            }
            else
            {
                appLogger.Info("No batch found in BB with given BatchName: " + Obj.BatchName);
                Console.WriteLine("No batch found in BB with given BatchName: " + Obj.BatchName);
            }
        }

        public string EditRowToNonSponsorDonation(Guid _currentBatchID, TransferConstituentInBatchModel Obj)
        {
            appLogger.Info($"EditRowToNonSponsorDonation request received with json: {SimpleJson.SerializeObject(Obj)}");
            var constituentId = "";
            Guid? SaveRequestGUID = default(Guid);
            int _batchRowSequence = 5;
            DataFormItem dfimain = new DataFormItem();
            try
            {
                DataFormFieldValueSet fvSetmain = new DataFormFieldValueSet();
                fvSetmain.Add("PDACCOUNTSYSTEMID", "8888e850-e394-422a-a234-18fd45bed112");//Compassion-UK Dev BB
                constituentId = GetConstituentOnLookupID(Obj.NewLookupId).Output.Rows[0].Values[0];
                fvSetmain.Add("CONSTITUENTID", constituentId);

                dfimain.Values = fvSetmain;

                SaveRequestGUID = BatchSaveRequestOtherPaymentMethod(_currentBatchID, dfimain, _batchRowSequence, Obj);
                if (SaveRequestGUID != default(Guid))
                {
                    Console.WriteLine($"Error in OtherPaymentMethod Batch for NewLookupId " + Obj.NewLookupId + " OldLookupId " + Obj.OldLookupId + " at " + DateTime.Now);
                    appLogger.Info($"Error in OtherPaymentMethod Batch for NewLookupId " + Obj.NewLookupId + " OldLookupId " + Obj.OldLookupId + " at " + DateTime.Now);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in EditRowToOtherPaymentMethodBatch: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            return Convert.ToString(SaveRequestGUID);
        }

        private Guid? BatchSaveRequestOtherPaymentMethod(Guid BatchID, DataFormItem DataFormItem, int BatchRowSequence, TransferConstituentInBatchModel Obj)
        {
            BatchLoadReply loadReply = new BatchLoadReply();
            BatchLoadRequest loadreq = new BatchLoadRequest();
            loadreq.ClientAppInfo = GetRequestHeader();
            loadreq.BatchID = BatchID;

            Guid functionReturnValue = default(Guid);
            loadReply = retryPolicy.Execute(() => _service.BatchLoad(loadreq));
            List<string> rowIds = new List<string>();

            if (loadReply.Rows.Length > 0)
            {
                foreach (BatchDataRow row in loadReply.Rows)
                {
                    DataFormFieldValueSet values = row.DataFormItem.Values;
                    foreach (DataFormFieldValue val in values)
                    {
                        if (val.ID == "CONSTITUENTLOOKUPID" && val.ValueTranslation != null && val.ValueTranslation.ToString() == Obj.OldLookupId)
                        {
                            rowIds.Add(row.ID);
                        }
                    }
                }

                try
                {
                    if (rowIds.Count > 0)
                    {
                        foreach (string ID in rowIds)
                        {
                            BatchSaveRequest req = new BatchSaveRequest();
                            BatchSaveReply reply = new BatchSaveReply();
                            req.ClientAppInfo = GetRequestHeader();
                            req.BatchID = BatchID;
                            BatchDataRow BatchDataRow = new BatchDataRow();
                            BatchDataRow[] BatchDataRows = new BatchDataRow[1];

                            BatchDataRow.ID = ID;
                            BatchDataRow.AddRow = false;

                            BatchDataRow.DataFormItem = DataFormItem;
                            BatchDataRow.ExceptionMessageTypeCode = BatchMessageType.GeneralError;
                            BatchDataRow.ClearUserMessage = false;
                            BatchDataRow.ClearSystemMessage = false;
                            BatchDataRow.IgnoreDuplicate = false;

                            BatchDataRows[0] = BatchDataRow;
                            req.Rows = BatchDataRows;

                            reply = retryPolicy.Execute(() => _service.BatchSave(req));

                            if ((reply.Exceptions != null))
                            {
                                if (reply.Exceptions.Count() > 0)
                                {
                                    appLogger.Error($"Error while adding Constituent {Obj.NewLookupId} in  OtherPaymentMethod batch for OldLookupId {Obj.OldLookupId} at " + DateTime.Now);
                                    Exception ex = new Exception("Batch Save Error. " + reply.Exceptions[0].ErrorMessage);
                                    Console.WriteLine(reply.Exceptions[0].ErrorMessage);
                                    appLogger.Error(reply.Exceptions[0].ErrorMessage);
                                    throw ex;
                                    return functionReturnValue;
                                }
                            }
                            else
                            {
                                appLogger.Info($"In NonSponsorDonor batch rowid {ID} Constituent {Obj.NewLookupId} successfully updated for OldLookupId {Obj.OldLookupId} at " + DateTime.Now);
                                Console.WriteLine($"In NonSponsorDonor batch rowid {ID} Constituent {Obj.NewLookupId} successfully updated for OldLookupId {Obj.OldLookupId} at " + DateTime.Now);
                            }
                        }
                    }
                    else
                    {
                        appLogger.Info($"No row record found in Batch for OldLookupId {Obj.OldLookupId}");
                    }
                }
                catch (Exception e)
                {
                    appLogger.Error("Error in BatchSaveRequestOtherPaymentMethod: " + e.Message);
                    appLogger.Error(e.StackTrace);
                    appLogger.Error(e.InnerException);
                }
            }
            return functionReturnValue;
        }

        #endregion

        #region Search supporter by firstname, lastname and email for NonSponsorDonation process

        public string SearchSupporterByParams(SearchSupporterModel Obj)
        {
            /* Obj.FirstName = "";
             Obj.LastName = "";
             Obj.Email = "";
             Obj.IncludeEmail = true;*/

            appLogger.Info($"SearchSupporterByParams request received with json: {SimpleJson.SerializeObject(Obj)}");
            string filters = null;

            if (string.IsNullOrEmpty(Obj.FirstName) && string.IsNullOrEmpty(Obj.LastName) && string.IsNullOrEmpty(Obj.Email))
            {
                appLogger.Info("Supporter search not possible as all search params is empty or null.");
                return null;
            }

            try
            {
                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "Get Supporter";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string Query = "SELECT id FROM contact WHERE ";

                if (!string.IsNullOrEmpty(Obj.FirstName) && !string.IsNullOrEmpty(Obj.LastName))
                {
                    Query += $"Contact.Name.First = '{Obj.FirstName}' AND contact.Name.Last = '{Obj.LastName}'";
                    filters += "FirstName and LastName";

                }

                if (Obj.IncludeEmail && !string.IsNullOrEmpty(Obj.Email))
                {
                    string Operator = !string.IsNullOrEmpty(filters) ? "AND" : "";
                    Query += $" {Operator} contact.Emails.Address LIKE '%" + Obj.Email + "%'";
                    filters += " Email";
                }


                byte[] byteArray;

                CSVTableSet results;
                head = rightNowSyncPortClient.QueryCSV(clientInfoHeader, api, Query, 20000, ",", false, true, out results, out byteArray);

                if (results.CSVTables[0].Rows.Length > 0)
                {
                    appLogger.Info($"Total {results.CSVTables[0].Rows.Length} records found with filters {filters} and SupporterId {results.CSVTables[0].Rows[0]}");

                    return results.CSVTables[0].Rows[0];
                }
                else
                {
                    appLogger.Info($"No records found with filters {filters}");
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in SearchSupporterByParams: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return null;
        }

        #endregion

        #region Create only consituent using RN SupporterId
        public void CreateOnlyConstituentProcess(long SupporterId, string CC_TransactionId)
        {
            appLogger.Info("CreateOnlyConstituentProcess process started with " + SupporterId);
            try
            {
                SEFModel sefobj = new SEFModel();
                sefobj = GetSupporterData(SupporterId, null);
                Model.CIFModel sefcommitobj = new Model.CIFModel();
                Guid Guid = Guid.NewGuid();
                sefcommitobj.CC_TransactionId = CC_TransactionId;
                //Flags
                sefcommitobj.isDepartureSubCommitment = false;
                sefcommitobj.isCorrespondentCommitment = false;
                sefcommitobj.createconstituentonly = true;

                //asign value to CIF Model
                //supporter data
                sefcommitobj.supporterid = new string[] { SupporterId.ToString(), "0" };
                sefcommitobj.titlestring = new string[] { sefobj.titlestring, "" };
                sefcommitobj.email = new string[] { sefobj.email, "" };
                sefcommitobj.firstname = new string[] { sefobj.firstname, "" };
                sefcommitobj.lastname = new string[] { sefobj.lastname, "" };
                sefcommitobj.mobilephone = new string[] { sefobj.mobilephone, "" };
                sefcommitobj.addresslineone = new string[] { sefobj.addresslineone, "" };
                sefcommitobj.postcode = new string[] { sefobj.postcode, "" };
                sefcommitobj.sponsorchild = sefobj.sponsorchild;
                sefcommitobj.communicationmethod = 0;
                sefcommitobj.BestTimetoCall = new string[] { "", "" };
                sefcommitobj.type = "2";
                sefcommitobj.primary = "0";
                sefcommitobj.title = new string[] { "992", "992" }; // HardCoded title
                sefcommitobj.dob = new string[] { "", "" };
                sefcommitobj.phone = new string[] { sefobj.mobilephone, "" };
                sefcommitobj.addresslinetwo = new string[] { sefobj.addresslinetwo, "" };
                sefcommitobj.addresslinethree = new string[] { sefobj.addresslinethree, "" };
                sefcommitobj.addresslinefour = new string[] { sefobj.addresslinefour, "" };
                sefcommitobj.town = new string[] { sefobj.town, "" };
                sefcommitobj.county = new string[] { sefobj.county, "" };
                sefcommitobj.addresscountry = new string[] { sefobj.addresscountry, "" };
                sefcommitobj.communicationmethod = 0;

                sefcommitobj.country = CukAutomationOperations.Model.AutomationBot.Constant.COUNTRY;
                sefcommitobj.loggedinUser = CukAutomationOperations.Model.AutomationBot.Constant.LOGGEDINUSER;
                sefcommitobj.loggedinUserAccountID = CukAutomationOperations.Model.AutomationBot.Constant.LOGGEDINUSERACCOUNTID;

                sefcommitobj.sefGUID = "{" + Guid.ToString().ToUpper() + "}";
                sefcommitobj.sgname = sefobj.titlestring + " " + sefobj.firstname + " " + sefobj.lastname;
                sefcommitobj.SupGrpPreferredName = sefobj.firstname;
                sefcommitobj.sglettersalutation = sefobj.firstname;
                sefcommitobj.sgaddresssalutation = sefobj.titlestring + " " + sefobj.firstname + " " + sefobj.lastname;



                //child details
                sefcommitobj.childnumber = sefobj.childnumber;
                sefcommitobj.BeneficiaryGlobalId = sefobj.BeneficiaryGlobalId;
                sefcommitobj.BeneficiaryHoldId = sefobj.BeneficiaryHoldId;


                //bank details
                sefcommitobj.accountname = null;
                sefcommitobj.accountnumber = null;
                sefcommitobj.sortcode = null;
                sefcommitobj.paymentmethod = null;
                sefcommitobj.barcode = null;





                sefcommitobj.amount = 0;
                sefcommitobj.installmentfrequency = null;

                sefcommitobj.ddisource = null;
                sefcommitobj.firstfundeddate = null;

                sefcommitobj.indicator = null;

                sefcommitobj.futuredonationdate = null;
                sefcommitobj.Sponsorshipsource = null;



                sefcommitobj.christmasGiftAmount = null;
                sefcommitobj.AnnualChristmasDate = null;
                sefcommitobj.birthdayGiftAmount = null;
                sefcommitobj.AnnualBirthDate = null;


                sefcommitobj.IsSponPlus = null;
                sefcommitobj.IsHillsongSponPlus = null;


                sefcommitobj.dddate = null;
                sefcommitobj.advancenoticesent = null;
                sefcommitobj.nomoney = "0";


                sefcommitobj.emailPreference = new string[] { "2", "2" };
                sefcommitobj.phonePreference = new string[] { "2", "2" };
                sefcommitobj.smsPreference = new string[] { "2", "2" };
                sefcommitobj.createSolicit = new string[] { "2", "2" };

                sefcommitobj.donationdate = null;
                sefcommitobj.taxpayertitle = null;


                sefcommitobj.linkreason = 328;
                sefcommitobj.linktype = 1;
                sefcommitobj.giftaidstatus = null;
                sefcommitobj.taxpayertitle = "";
                sefcommitobj.taxpayerfirstname = "";
                sefcommitobj.taxpayersurname = "";
                sefcommitobj.iamtaxpayer = "1";





                sefcommitobj.connectusestage = sefobj.connectusestage == "Yes" ? true : false;
                sefcommitobj.iscorrsponsor = "0";
                sefcommitobj.volunteering = "0";
                sefcommitobj.sponsorship = null;
                sefcommitobj.manager = null;
                sefcommitobj.bankaddress = null;
                sefcommitobj.bankpostcode = "";
                sefcommitobj.sortcode1 = "00";
                sefcommitobj.sortcode2 = "00";
                sefcommitobj.sortcode3 = "00";
                sefcommitobj.reference = "0000000";
                sefcommitobj.supgrpid = 0;
                sefcommitobj.enqrefid = "";
                sefcommitobj.groupaccount = "0";
                sefcommitobj.scanneddocexists = "0";
                sefcommitobj.sgglobalid = null;
                sefcommitobj.sgcompassconid = null;
                sefcommitobj.SponsorSupporterGlobalID = "null";
                sefcommitobj.DepartedBeneficiaryGlobalId = "";
                sefcommitobj.ExistingBeneficiaryGlobalId = "";
                sefcommitobj.individualsgname = null;
                sefcommitobj.ExistingCommitmentId = null;
                sefcommitobj.ExistingGlobalCommitmentId = null;
                sefcommitobj.ExistingGlobalCorrCommitmentId = null;
                sefcommitobj.ExistingSupporterGroupID = null;
                sefcommitobj.CorrespondentSupporterGlobalID = null;
                sefcommitobj.ComBBId = null;
                sefcommitobj.bic = "";
                sefcommitobj.iban = "";
                sefcommitobj.isOrganisation = false;
                sefcommitobj.orgId = "0";
                sefcommitobj.orgName = "";
                sefcommitobj.orgAddPref = null;
                sefcommitobj.orgaddresslineone = null;
                sefcommitobj.orgaddresslinetwo = null;
                sefcommitobj.orgaddresslinethree = null;
                sefcommitobj.orgaddresslinefour = null;
                sefcommitobj.orgtown = null;
                sefcommitobj.orgcounty = null;
                sefcommitobj.orgaddresscountry = null;
                sefcommitobj.orgpostcode = null;
                sefcommitobj.orgwebsite = "";
                sefcommitobj.orgPhone = "";
                sefcommitobj.orgEmail = "";
                sefcommitobj.orgType = "";
                sefcommitobj.isorgcorrsponsor = null;
                sefcommitobj.commMarketingChannel = "";
                sefcommitobj.commMarketingCode = "";
                sefcommitobj.commRelationshipManager = "";
                sefcommitobj.commOrganisation = "";
                sefcommitobj.commSupporter = "";
                sefcommitobj.commEvent = "";
                sefcommitobj.commCampaign = "";
                sefcommitobj.commBBDDAmount = null;
                sefcommitobj.commBBDDNextDate = null;
                sefcommitobj.commBBDDStartDate = null;
                sefcommitobj.commBBPaymentMethod = null;
                sefcommitobj.commDDReference = null;
                sefcommitobj.commSponsorshipPlus = true;
                sefcommitobj.commPaymentMethod = null;
                sefcommitobj.commLinkedToPartnership = null;
                sefcommitobj.isIndiaProcessService = false;
                sefcommitobj.DepNeedStatus = null;
                sefcommitobj.delinkType = null;
                sefcommitobj.delinkReason = null;
                sefcommitobj.isChildChangeFlow = null;
                sefcommitobj.samepc = "0";
                sefcommitobj.debiton = "0";

                appLogger.Info("CreateOnlyConstituentProcess with data " + SimpleJson.SerializeObject(sefcommitobj));
                SendDataToMainWS(sefcommitobj, 1002);//uncomment after debug
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateOnlyConstituentProcess: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            appLogger.Info("CreateOnlyConstituentProcess ended...");
        }
        public SEFModel GetSupporterData(long contactid, string Needkey)
        {
            SEFModel sefObj = new SEFModel();
            SEFModel EPObj = new SEFModel();
            SEFModel ChildObj = new SEFModel();
            if (!string.IsNullOrEmpty(Needkey))
            {
                ChildObj = GetChildData(Needkey);
            }
            EPObj = GetEmailAndPhoneNo(contactid);
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get contact data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                string query = "SELECT c.customfields.c.titlename.lookupname,c.customfields.c.titlename.id,c.name.first,c.name.last,c.customfields.c.street1,c.customfields.c.street2,c.customfields.c.street3,c.customfields.c.street4,c.customfields.c.town,c.customfields.c.county, c.customfields.c.add_mailingcountrydrop.id,c.customfields.c.postcode,c.customfields.c.connectusestage.lookupname FROM Contact as c where id =" + contactid;
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        foreach (string row in result.CSVTables[0].Rows)
                        {
                            string[] values = row.Split('^');
                            sefObj.titlestring = values[0];
                            sefObj.title = values[1];
                            sefObj.firstname = values[2];
                            sefObj.lastname = values[3];
                            sefObj.addresslineone = values[4];
                            sefObj.addresslinetwo = values[5];
                            sefObj.addresslinethree = values[6];
                            sefObj.addresslinefour = values[7];
                            sefObj.town = values[8];
                            sefObj.county = values[9];
                            sefObj.addresscountry = values[10];
                            sefObj.postcode = values[11];
                            sefObj.mobilephone = EPObj.mobilephone;
                            sefObj.email = EPObj.email;
                            sefObj.BeneficiaryGlobalId = ChildObj.BeneficiaryGlobalId;
                            sefObj.sponsorchild = ChildObj.sponsorchild;
                            sefObj.BeneficiaryHoldId = ChildObj.BeneficiaryHoldId;
                            sefObj.childnumber = Needkey;
                            sefObj.BirthDate = ChildObj.BirthDate;
                            sefObj.connectusestage = values[12];
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching supporter data :" + e.Message + " with supporter id: " + contactid);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return sefObj;
        }

        #endregion

        #region Create only consituent using RN Supporter data
        public void CreateOnlyConstituentProcessOtherPayments(OnlyConstituentDetails Obj)
        {
            try
            {
                appLogger.Info("CreateOnlyConstituentProcessOtherPayments request received with data:  " + SimpleJson.SerializeObject(Obj));

                SEFModel sefobj = new SEFModel();
                Model.CIFModel sefcommitobj = new Model.CIFModel();
                Guid Guid = Guid.NewGuid();
                sefcommitobj.BatchName = Obj.BatchName;
                sefcommitobj.BatchDonorId = Obj.BatchDonorId;
                sefcommitobj.NonSponsorDonationRecordId = Obj.NonSponsorDonationRecordId;

                //Flags
                sefcommitobj.isDepartureSubCommitment = false;
                sefcommitobj.isCorrespondentCommitment = false;
                sefcommitobj.createconstituentonly = true;

                string SupporterId = !string.IsNullOrWhiteSpace(Obj.SupporterId) ? Obj.SupporterId : "0";

                //asign value to CIF Model
                //supporter data
                sefcommitobj.supporterid = new string[] { SupporterId, "0" };
                sefcommitobj.titlestring = new string[] { Obj.titlestring, "" };
                sefcommitobj.email = new string[] { Obj.email, "" };
                sefcommitobj.firstname = new string[] { Obj.firstname, "" };
                sefcommitobj.lastname = new string[] { Obj.lastname, "" };
                sefcommitobj.mobilephone = new string[] { Obj.mobilephone, "" };
                sefcommitobj.addresslineone = new string[] { Obj.addresslineone, "" };
                sefcommitobj.postcode = new string[] { Obj.postcode, "" };
                sefcommitobj.sponsorchild = sefobj.sponsorchild;
                sefcommitobj.communicationmethod = 0;
                sefcommitobj.BestTimetoCall = new string[] { "", "" };
                sefcommitobj.type = "2";
                sefcommitobj.primary = "0";
                sefcommitobj.title = new string[] { "992", "992" }; // HardCoded title
                sefcommitobj.dob = new string[] { "", "" };
                sefcommitobj.phone = new string[] { Obj.mobilephone, "" };
                sefcommitobj.addresslinetwo = new string[] { Obj.addresslinetwo, "" };
                sefcommitobj.addresslinethree = new string[] { Obj.addresslinethree, "" };
                sefcommitobj.addresslinefour = new string[] { Obj.addresslinefour, "" };
                sefcommitobj.town = new string[] { Obj.town, "" };
                sefcommitobj.county = new string[] { Obj.county, "" };
                sefcommitobj.addresscountry = new string[] { Obj.addresscountry, "" };
                sefcommitobj.communicationmethod = 0;

                sefcommitobj.country = CukAutomationOperations.Model.AutomationBot.Constant.COUNTRY;
                sefcommitobj.loggedinUser = CukAutomationOperations.Model.AutomationBot.Constant.LOGGEDINUSER;
                sefcommitobj.loggedinUserAccountID = CukAutomationOperations.Model.AutomationBot.Constant.LOGGEDINUSERACCOUNTID;

                sefcommitobj.sefGUID = "{" + Guid.ToString().ToUpper() + "}";
                sefcommitobj.sgname = Obj.titlestring + " " + Obj.firstname + " " + Obj.lastname;
                sefcommitobj.SupGrpPreferredName = Obj.firstname;
                sefcommitobj.sglettersalutation = Obj.firstname;
                sefcommitobj.sgaddresssalutation = Obj.titlestring + " " + Obj.firstname + " " + Obj.lastname;



                //child details
                sefcommitobj.childnumber = sefobj.childnumber;
                sefcommitobj.BeneficiaryGlobalId = sefobj.BeneficiaryGlobalId;
                sefcommitobj.BeneficiaryHoldId = sefobj.BeneficiaryHoldId;


                //bank details
                sefcommitobj.accountname = null;
                sefcommitobj.accountnumber = null;
                sefcommitobj.sortcode = null;
                sefcommitobj.paymentmethod = null;
                sefcommitobj.barcode = null;





                sefcommitobj.amount = 0;
                sefcommitobj.installmentfrequency = null;

                sefcommitobj.ddisource = null;
                sefcommitobj.firstfundeddate = null;

                sefcommitobj.indicator = null;

                sefcommitobj.futuredonationdate = null;
                sefcommitobj.Sponsorshipsource = null;



                sefcommitobj.christmasGiftAmount = null;
                sefcommitobj.AnnualChristmasDate = null;
                sefcommitobj.birthdayGiftAmount = null;
                sefcommitobj.AnnualBirthDate = null;


                sefcommitobj.IsSponPlus = null;
                sefcommitobj.IsHillsongSponPlus = null;


                sefcommitobj.dddate = null;
                sefcommitobj.advancenoticesent = null;
                sefcommitobj.nomoney = "0";


                sefcommitobj.emailPreference = new string[] { "2", "2" };
                sefcommitobj.phonePreference = new string[] { "2", "2" };
                sefcommitobj.smsPreference = new string[] { "2", "2" };
                sefcommitobj.createSolicit = new string[] { "2", "2" };

                sefcommitobj.donationdate = null;
                sefcommitobj.taxpayertitle = null;


                sefcommitobj.linkreason = 328;
                sefcommitobj.linktype = 1;
                sefcommitobj.giftaidstatus = null;
                sefcommitobj.taxpayertitle = "";
                sefcommitobj.taxpayerfirstname = "";
                sefcommitobj.taxpayersurname = "";
                sefcommitobj.iamtaxpayer = "1";





                sefcommitobj.connectusestage = sefobj.connectusestage == "Yes" ? true : false;
                sefcommitobj.iscorrsponsor = "0";
                sefcommitobj.volunteering = "0";
                sefcommitobj.sponsorship = null;
                sefcommitobj.manager = null;
                sefcommitobj.bankaddress = null;
                sefcommitobj.bankpostcode = "";
                sefcommitobj.sortcode1 = "00";
                sefcommitobj.sortcode2 = "00";
                sefcommitobj.sortcode3 = "00";
                sefcommitobj.reference = "0000000";
                sefcommitobj.supgrpid = 0;
                sefcommitobj.enqrefid = "";
                sefcommitobj.groupaccount = "0";
                sefcommitobj.scanneddocexists = "0";
                sefcommitobj.sgglobalid = null;
                sefcommitobj.sgcompassconid = null;
                sefcommitobj.SponsorSupporterGlobalID = "null";
                sefcommitobj.DepartedBeneficiaryGlobalId = "";
                sefcommitobj.ExistingBeneficiaryGlobalId = "";
                sefcommitobj.individualsgname = null;
                sefcommitobj.ExistingCommitmentId = null;
                sefcommitobj.ExistingGlobalCommitmentId = null;
                sefcommitobj.ExistingGlobalCorrCommitmentId = null;
                sefcommitobj.ExistingSupporterGroupID = null;
                sefcommitobj.CorrespondentSupporterGlobalID = null;
                sefcommitobj.ComBBId = null;
                sefcommitobj.bic = "";
                sefcommitobj.iban = "";
                sefcommitobj.isOrganisation = false;
                sefcommitobj.orgId = "0";
                sefcommitobj.orgName = "";
                sefcommitobj.orgAddPref = null;
                sefcommitobj.orgaddresslineone = null;
                sefcommitobj.orgaddresslinetwo = null;
                sefcommitobj.orgaddresslinethree = null;
                sefcommitobj.orgaddresslinefour = null;
                sefcommitobj.orgtown = null;
                sefcommitobj.orgcounty = null;
                sefcommitobj.orgaddresscountry = null;
                sefcommitobj.orgpostcode = null;
                sefcommitobj.orgwebsite = "";
                sefcommitobj.orgPhone = "";
                sefcommitobj.orgEmail = "";
                sefcommitobj.orgType = "";
                sefcommitobj.isorgcorrsponsor = null;
                sefcommitobj.commMarketingChannel = "";
                sefcommitobj.commMarketingCode = "";
                sefcommitobj.commRelationshipManager = "";
                sefcommitobj.commOrganisation = "";
                sefcommitobj.commSupporter = "";
                sefcommitobj.commEvent = "";
                sefcommitobj.commCampaign = "";
                sefcommitobj.commBBDDAmount = null;
                sefcommitobj.commBBDDNextDate = null;
                sefcommitobj.commBBDDStartDate = null;
                sefcommitobj.commBBPaymentMethod = null;
                sefcommitobj.commDDReference = null;
                sefcommitobj.commSponsorshipPlus = true;
                sefcommitobj.commPaymentMethod = null;
                sefcommitobj.commLinkedToPartnership = null;
                sefcommitobj.isIndiaProcessService = false;
                sefcommitobj.DepNeedStatus = null;
                sefcommitobj.delinkType = null;
                sefcommitobj.delinkReason = null;
                sefcommitobj.isChildChangeFlow = null;
                sefcommitobj.samepc = "0";
                sefcommitobj.debiton = "0";

                appLogger.Info("CreateOnlyConstituentProcess with data " + SimpleJson.SerializeObject(sefcommitobj));
                SendDataToMainWS(sefcommitobj, 1002);//uncomment after debug
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CreateOnlyConstituentProcess: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }

            appLogger.Info("CreateOnlyConstituentProcess ended...");
        }
        #endregion

        #region Delete RN Task Records

        public long GetTaskRecordsCount()
        {
            long count = 0;
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get task data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT COUNT(1) FROM task";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0 && result.CSVTables[0].Rows.Length > 0)
                {
                    count = Convert.ToInt64(result.CSVTables[0].Rows[0]);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetTaskRecords: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return count;
        }
        private List<long> GetTaskRecords()
        {
            List<long> taskIds = new List<long>();
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                info.AppID = "Get task data";
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();

                string query = "SELECT task.id FROM task ORDER BY task.id ASC LIMIT 0,10";

                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, "^", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    foreach (string id in result.CSVTables[0].Rows)
                    {
                        taskIds.Add(Convert.ToInt64(id));
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in GetTaskRecords: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return taskIds;
        }
        public void DeleteRightNowTaskRecords()
        {
            appLogger.Info("DeleteRightNowTaskRecords process started...");
            try
            {
                List<long> taskIds = GetTaskRecords();

                appLogger.Info("Total task record deleting from RN: " + taskIds.Count);
                //do something here
                foreach (long taskid in taskIds)
                {
                    DestroyTaskRecord(taskid);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in DeleteRightNowTaskRecords: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            appLogger.Info("DeleteRightNowTaskRecords process ended...");
        }
        private void DestroyTaskRecord(long taskId)
        {
            try
            {
                Task task = new Task();
                ID taskid = new ID();

                taskid.id = taskId;

                task.ID = taskid;
                task.ID.idSpecified = true;

                //Instantiate and populate the RNObject[]
                RNObject[] destroyObjects = new RNObject[] { task };

                //Create the DestroyProcessingOptions
                DestroyProcessingOptions options = new DestroyProcessingOptions();
                options.SuppressExternalEvents = false;
                options.SuppressRules = false;


                ClientInfoHeader clientInfoHeader = new ClientInfoHeader();
                clientInfoHeader.AppID = "delete task";

                //Invoke the Delete operation
                rightNowSyncPortClient.Destroy(clientInfoHeader, api, destroyObjects, options);
                appLogger.Info("Task deleted from RN with id:" + taskId);
            }
            catch (Exception e)
            {

                appLogger.Error("Error in DestroyTaskRecord: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);

            }
        }
        #endregion

        public string getSupIdFromBlackbaudId(string blackbaudid)
        {
            string Supporterid = "";
            try
            {
                ClientInfoHeader info = new ClientInfoHeader();
                APIAccessResponseHeaderType head = new APIAccessResponseHeaderType();
                info.AppID = "Fetch Supporter id";
                String query = "select contact.ID from contact where contact.customFields.c.blackbaudid = '" + blackbaudid + "'";
                byte[] byteArray;

                CSVTableSet result;
                head = rightNowSyncPortClient.QueryCSV(info, api, query, 100000, ",", false, true, out result, out byteArray);
                if (result.CSVTables.Length > 0)
                {
                    if (result.CSVTables[0].Rows.Length > 0)
                    {
                        Supporterid = result.CSVTables[0].Rows[0].ToString();
                    }
                }
                appLogger.Info("Supporterid : " + Supporterid + " found for blackbaudid  " + blackbaudid);
            }
            catch (Exception e)
            {
                appLogger.Error("Error in getSupIdFromBlackbaudId while fetching Supporter ID from blackbaudid for Arrears Payment Method None: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return Supporterid;
        }


        #region TEST CODE - No Need to move in PROD
        public void CheckBBRecords()
        {
            appLogger.Info("CheckIfConstituentHasSponsorshipPlusRg started....");
            string[] bbids = { "8-10035784", "8-10041148", "8-10043878", "8-10135273", "8-10062302", "8-10123518", "8-10082868", "8-10105364", "8-10110369", "8-10120718", "8-10124920", "8-10399214", "8-10421010", "8-10512481", "8-10487489", "8-10505886", "8-10512011", "8-10512067", "8-10579696", "8-10515878", "8-10518178", "8-10518846", "8-10577337", "8-10533581", "8-10555859", "8-10583557", "8-10577350", "8-10547723", "8-10555121", "8-10557660", "8-10578454", "8-10577515", "8-10581932", "8-10577292", "8-10577341", "8-10577445", "8-10577496", "8-10577575", "8-10577506", "8-10577673", "8-10577623", "8-10577709", "8-10577727", "8-10577888", "8-10578011", "8-10578013", "8-10577891", "8-10577917", "8-10578063", "8-10578069", "8-10578168", "8-10578235", "8-10578338", "8-10578340", "8-10578405", "8-10578385", "8-10578434", "8-10578472", "8-10578476", "8-10578646", "8-10578645", "8-10578625", "8-10578676", "8-10578671", "8-10578677", "8-10578679", "8-10578720", "8-10578816", "8-10578929", "8-10578979", "8-10579069", "8-10579087", "8-10579122", "8-10579326", "8-10579422", "8-10579493", "8-10579466", "8-10579462", "8-10579542", "8-10579650", "8-10579679", "8-10579690", "8-10579675", "8-10579704", "8-10579771", "8-10579763", "8-10579933", "8-10579970", "8-10580111", "8-10580131", "8-10580373", "8-10580209", "8-10580343", "8-10580374", "8-10580430", "8-10580379", "8-10580566", "8-10580539", "8-10580743", "8-10580759", "8-10580755", "8-10580855", "8-10580879", "8-10580900", "8-10580977", "8-10581006", "8-10581148", "8-10581179", "8-10581235", "8-10581238", "8-10583249", "8-10581467", "8-10581751", "8-10581568", "8-10581841", "8-10581831", "8-10581786", "8-10581825", "8-10582045", "8-10582013", "8-10582031", "8-10582054", "8-10582058", "8-10582206", "8-10582119", "8-10582166", "8-10582179", "8-10582178", "8-10582123", "8-10582277", "8-10582127", "8-10582145", "8-10582406", "8-10582582", "8-10582562", "8-10582544", "8-10582590", "8-10582596", "8-10582980", "8-10582568", "8-10582772", "8-10582985", "8-10582997", "8-10583000", "8-10583052", "8-10583234", "8-10583367", "8-10583391", "8-10583446", "8-10583448", "8-10583533", "8-10583709", "8-10583561", "8-10583484", "8-10583604", "8-10583620", "8-10583861", "8-10583839", "8-10583859", "8-10583856", "8-10583922", "8-10584012", "8-10584064", "8-10584068", "8-10584190"};

            appLogger.Info("Total records found: "+bbids.Length);
            foreach (string bbid in bbids)
            {
                CheckIfConstituentHasSponsorshipPlusRg(bbid);
            }
            appLogger.Info("CheckIfConstituentHasSponsorshipPlusRg ended....");
        }
        public void CheckIfConstituentHasSponsorshipPlusRg(string bbid)
        {
            
            try
            {
                string constituentId = GetConstituentOnLookupID(bbid).Output.Rows[0].Values[0];
                bool isFound = false;
                if (!string.IsNullOrEmpty(constituentId))
                {
                    var orgdata = fetchRecurringGiftsNew(constituentId);
                    if (orgdata.Count > 0)
                    {
                        for (int i = 0; i < orgdata.Count; i++)
                        {
                            if (orgdata[i].Values[0] == "Active" && orgdata[i].Values[7] == "Sponsorship Plus")
                            {
                                appLogger.Info("Sponsorship Plus SET for " + bbid + ", SET");
                                isFound = true;
                                break;
                            }
                        }
                        if (!isFound)
                        {
                            appLogger.Info("Sponsorship Plus NOT SET for " + bbid + ", NOT SET");
                        }
                    }
                    else
                    {
                        appLogger.Info("Sponsorship Plus NOT SET for "+ bbid + ", NOT SET");
                    }
                }
                else
                {
                    appLogger.Info("Cannot find constituent data using bbid " + bbid);
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfConstituentHasSponsorshipPlusRg: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
        }
        public bool CheckIfGivenAmountIsMatchWithAllRgsAmount(string LookupId, string Amount)
        {
            bool isAmountMatched = false;
            try
            {
                Double TotalAmount = 0;
                string constituentId = GetConstituentOnLookupID(LookupId).Output.Rows[0].Values[0];

                List<DataListResultRow> sponsorshipRecurringGift = fetchRecurringGiftsforBOS(constituentId);
                for (int i = 0; i < sponsorshipRecurringGift.Count; i++)
                {
                    if (sponsorshipRecurringGift[i].Values[0].ToString() == "Active")
                    {
                        TotalAmount += Convert.ToDouble(sponsorshipRecurringGift[i].Values[1]);
                    }
                }


                List<DataListResultRow> otherRecurringGift = fetchOtherRecurringforBOS(constituentId);
                for (int i = 0; i < otherRecurringGift.Count; i++)
                {
                    if (otherRecurringGift[i].Values[0].ToString() == "Active")
                    {
                        TotalAmount += Convert.ToDouble(otherRecurringGift[i].Values[1]);
                    }
                }
                
                if (Convert.ToInt32(Convert.ToDecimal(Amount)) == Convert.ToInt32(Convert.ToDecimal(TotalAmount)))
                {
                    isAmountMatched = true;
                }

            }
            catch (Exception e)
            {
                appLogger.Error("Error in CheckIfGivenAmountIsMatchWithAllRgsAmount: " + e.Message);
                appLogger.Error(e.StackTrace);
                appLogger.Error(e.InnerException);
            }
            return isAmountMatched;
        }
        public List<DataListResultRow> fetchRecurringGiftsforBOS(string constituentId)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {
                if (!string.IsNullOrWhiteSpace(constituentId))
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    request.DataListID = new Guid("91f59ee7-98e6-44b3-a053-bd0842bb4292");   // GUID for Data List: Recurring gifts - sponsorship                    
                    request.ContextRecordID = constituentId;
                    request.IncludeMetaData = true;
                    var result = _service.DataListLoad(request);
                    if (result.TotalRowsInReply > 0)
                    {
                        //foreach (var res in result.Rows)
                        //{
                        for (int i = 0; i < result.TotalRowsInReply; i++)
                        {
                            var res = result.Rows[i];

                            if (result.Rows[i].Values[0].ToString() == "Active")
                            {
                                responseList.Add(res);
                            }
                        }
                        //}
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching recurring gifts for gift aid : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }
        public List<DataListResultRow> fetchOtherRecurringforBOS(string constituentId)
        {
            List<DataListResultRow> responseList = new List<DataListResultRow>();
            try
            {

                //var constituentDetails = GetConstituentOnCommitmentID(CommitmentID);
                if (!string.IsNullOrWhiteSpace(constituentId))
                {
                    DataListLoadRequest request = new DataListLoadRequest();

                    request.ClientAppInfo = GetRequestHeader();
                    request.DataListID = new Guid("573dbbaf-5bf0-4808-bc6b-37fc4c1eb7b7");// GUID for Data List: Other Recurring gifts - Linked                    
                    request.ContextRecordID = constituentId;
                    request.IncludeMetaData = true;
                    var result = _service.DataListLoad(request);

                    if (result.TotalRowsInReply > 0)
                    {
                        foreach (var res in result.Rows)
                        {
                            responseList.Add(res);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                appLogger.Error("Error in fetching other recurring gifts for constituent : " + constituentId + " : " + e.Message);
            }
            return responseList;
        }

        #endregion

    }
}
